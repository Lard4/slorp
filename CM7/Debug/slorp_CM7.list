
slorp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08005190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049bc  20000014  080051a4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200049d0  080051a4  000249d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021b65  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003673  00000000  00000000  00041ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001430  00000000  00000000  00045220  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012e8  00000000  00000000  00046650  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003989a  00000000  00000000  00047938  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011726  00000000  00000000  000811d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018351e  00000000  00000000  000928f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00215e16  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005468  00000000  00000000  00215e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080050e4 	.word	0x080050e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	080050e4 	.word	0x080050e4

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	2b07      	cmp	r3, #7
 8000344:	d907      	bls.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <main+0xbc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x24>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0xe>
  if ( timeout < 0 )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x2e>
  {
  Error_Handler();
 800043e:	f000 f99d 	bl	800077c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 fa69 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f851 	bl	80004ec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <main+0xbc>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <main+0xbc>)
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <main+0xbc>)
 800045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fd67 	bl	8000f3c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fd7d 	bl	8000f70 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800047c:	bf00      	nop
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <main+0xbc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d104      	bne.n	8000494 <main+0x80>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	1e5a      	subs	r2, r3, #1
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	dcf4      	bgt.n	800047e <main+0x6a>
if ( timeout < 0 )
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da01      	bge.n	800049e <main+0x8a>
{
Error_Handler();
 800049a:	f000 f96f 	bl	800077c <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  init_shared_memory();
 800049e:	f000 f8f5 	bl	800068c <init_shared_memory>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f89d 	bl	80005e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a6:	f002 f831 	bl	800250c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <main+0xc0>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <main+0xc4>)
 80004b0:	f002 f896 	bl	80025e0 <osThreadNew>
 80004b4:	4602      	mov	r2, r0
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <main+0xc8>)
 80004b8:	601a      	str	r2, [r3, #0]

  /* creation of sendPulseToM4 */
  sendPulseToM4Handle = osThreadNew(sendPulse, NULL, &sendPulseToM4_attributes);
 80004ba:	4a09      	ldr	r2, [pc, #36]	; (80004e0 <main+0xcc>)
 80004bc:	2100      	movs	r1, #0
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <main+0xd0>)
 80004c0:	f002 f88e 	bl	80025e0 <osThreadNew>
 80004c4:	4602      	mov	r2, r0
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <main+0xd4>)
 80004c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004ca:	f002 f853 	bl	8002574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <main+0xba>
 80004d0:	58024400 	.word	0x58024400
 80004d4:	08005140 	.word	0x08005140
 80004d8:	08000705 	.word	0x08000705
 80004dc:	20004938 	.word	0x20004938
 80004e0:	08005164 	.word	0x08005164
 80004e4:	08000715 	.word	0x08000715
 80004e8:	2000493c 	.word	0x2000493c

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b09c      	sub	sp, #112	; 0x70
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f6:	224c      	movs	r2, #76	; 0x4c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fde9 	bl	80050d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 fde3 	bl	80050d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800050c:	2004      	movs	r0, #4
 800050e:	f000 fd43 	bl	8000f98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <SystemClock_Config+0xec>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <SystemClock_Config+0xec>)
 800051c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <SystemClock_Config+0xec>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <SystemClock_Config+0xf0>)
 800052e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000530:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <SystemClock_Config+0xf0>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xf0>)
 800053a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000544:	bf00      	nop
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <SystemClock_Config+0xec>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800054e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000552:	d1f8      	bne.n	8000546 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000558:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	2302      	movs	r3, #2
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800056a:	2378      	movs	r3, #120	; 0x78
 800056c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000572:	2302      	movs	r3, #2
 8000574:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800057a:	230c      	movs	r3, #12
 800057c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057e:	2300      	movs	r3, #0
 8000580:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fd5e 	bl	800104c <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000596:	f000 f8f1 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	233f      	movs	r3, #63	; 0x3f
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a6:	2308      	movs	r3, #8
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ae:	2340      	movs	r3, #64	; 0x40
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f953 	bl	800186c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005cc:	f000 f8d6 	bl	800077c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3770      	adds	r7, #112	; 0x70
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	58024800 	.word	0x58024800
 80005dc:	58000400 	.word	0x58000400

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xa4>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_GPIO_Init+0xa4>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <MX_GPIO_Init+0xa4>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_GPIO_Init+0xa4>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0xa8>)
 8000658:	f000 fc56 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800065c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000666:	2302      	movs	r3, #2
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xa8>)
 8000676:	f000 fa97 	bl	8000ba8 <HAL_GPIO_Init>

}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	58024400 	.word	0x58024400
 8000688:	58020400 	.word	0x58020400

0800068c <init_shared_memory>:

/* USER CODE BEGIN 4 */

void init_shared_memory() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
    xfr_ptr->status_M7toM4 = SM_CLEAN;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <init_shared_memory+0x14>)
 8000692:	2200      	movs	r2, #0
 8000694:	705a      	strb	r2, [r3, #1]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	38001000 	.word	0x38001000

080006a4 <put_M7>:
	} else {
        return 0;
    }
}

int put_M7(uint8_t buffer[], uint32_t buff_size) {
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    // only allowed to write if clean
	if (xfr_ptr->status_M7toM4 == SM_CLEAN) {
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <put_M7+0x5c>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d11b      	bne.n	80006f0 <put_M7+0x4c>

        // start transfer
        int i = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < buff_size; i++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e00d      	b.n	80006de <put_M7+0x3a>
			xfr_ptr->M7toM4[i] = buffer[i];
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <put_M7+0x5c>)
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80006d4:	460a      	mov	r2, r1
 80006d6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < buff_size; i++) {
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d8ed      	bhi.n	80006c2 <put_M7+0x1e>
		}

        // mark as dirty
		xfr_ptr->status_M7toM4 = SM_DIRTY;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <put_M7+0x5c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	705a      	strb	r2, [r3, #1]
        return i;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	e000      	b.n	80006f2 <put_M7+0x4e>
	} else {
        return 0;
 80006f0:	2300      	movs	r3, #0
    }
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	38001000 	.word	0x38001000

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f002 f813 	bl	8002738 <osDelay>
 8000712:	e7fb      	b.n	800070c <StartDefaultTask+0x8>

08000714 <sendPulse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendPulse */
void sendPulse(void *argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendPulse */
  /* Infinite loop */
  for(;;) {

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <sendPulse+0x40>)
 8000724:	f000 fbf0 	bl	8000f08 <HAL_GPIO_WritePin>

      uint8_t buff = 250;
 8000728:	23fa      	movs	r3, #250	; 0xfa
 800072a:	73fb      	strb	r3, [r7, #15]

      if (put_M7(&buff, 1) == 1) {
 800072c:	f107 030f 	add.w	r3, r7, #15
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffb6 	bl	80006a4 <put_M7>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d107      	bne.n	800074e <sendPulse+0x3a>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <sendPulse+0x40>)
 8000746:	f000 fbdf 	bl	8000f08 <HAL_GPIO_WritePin>
          osThreadExit();
 800074a:	f001 ffef 	bl	800272c <osThreadExit>
      } else {
          Error_Handler();
 800074e:	f000 f815 	bl	800077c <Error_Handler>
  for(;;) {
 8000752:	e7e3      	b.n	800071c <sendPulse+0x8>
 8000754:	58020400 	.word	0x58020400

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f911 	bl	8000990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010000 	.word	0x40010000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000782:	e7fe      	b.n	8000782 <Error_Handler+0x6>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x38>)
 800078c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <HAL_MspInit+0x38>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x38>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	210f      	movs	r1, #15
 80007ac:	f06f 0001 	mvn.w	r0, #1
 80007b0:	f000 f9d2 	bl	8000b58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58024400 	.word	0x58024400

080007c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d844      	bhi.n	8000858 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80007ce:	2200      	movs	r2, #0
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	2019      	movs	r0, #25
 80007d4:	f000 f9c0 	bl	8000b58 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007d8:	2019      	movs	r0, #25
 80007da:	f000 f9d7 	bl	8000b8c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <HAL_InitTick+0xb0>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <HAL_InitTick+0xb4>)
 80007e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <HAL_InitTick+0xb4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HAL_InitTick+0xb4>)
 80007f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fb9b 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000812:	f001 fb83 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8000816:	4603      	mov	r3, r0
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <HAL_InitTick+0xb8>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	3b01      	subs	r3, #1
 8000828:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_InitTick+0xbc>)
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_InitTick+0xc0>)
 800082e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0xbc>)
 8000832:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000836:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000838:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_InitTick+0xbc>)
 800083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_InitTick+0xbc>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_InitTick+0xbc>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_InitTick+0xbc>)
 800084c:	f001 fbbe 	bl	8001fcc <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <HAL_InitTick+0xa6>
 8000856:	e001      	b.n	800085c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e005      	b.n	8000868 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <HAL_InitTick+0xbc>)
 800085e:	f001 fc17 	bl	8002090 <HAL_TIM_Base_Start_IT>
 8000862:	4603      	mov	r3, r0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3738      	adds	r7, #56	; 0x38
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000008 	.word	0x20000008
 8000874:	58024400 	.word	0x58024400
 8000878:	431bde83 	.word	0x431bde83
 800087c:	20004940 	.word	0x20004940
 8000880:	40010000 	.word	0x40010000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM1_UP_IRQHandler+0x10>)
 80008b6:	f001 fc21 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20004940 	.word	0x20004940

080008c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008c8:	f7ff fd0a 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ce:	e003      	b.n	80008d8 <LoopCopyDataInit>

080008d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80008d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008d6:	3104      	adds	r1, #4

080008d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80008dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008e0:	d3f6      	bcc.n	80008d0 <CopyDataInit>
  ldr  r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80008e4:	e002      	b.n	80008ec <LoopFillZerobss>

080008e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008e8:	f842 3b04 	str.w	r3, [r2], #4

080008ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80008ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008f0:	d3f9      	bcc.n	80008e6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80008f2:	f004 fbbf 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fd8d 	bl	8000414 <main>
  bx  lr    
 80008fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000900:	08005190 	.word	0x08005190
  ldr  r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000908:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800090c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000910:	200049d0 	.word	0x200049d0

08000914 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC3_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091e:	2003      	movs	r0, #3
 8000920:	f000 f90f 	bl	8000b42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000924:	f001 f958 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8000928:	4601      	mov	r1, r0
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_Init+0x68>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_Init+0x6c>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	fa21 f303 	lsr.w	r3, r1, r3
 8000940:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_Init+0x68>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_Init+0x6c>)
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	fa22 f303 	lsr.w	r3, r2, r3
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_Init+0x70>)
 800095a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_Init+0x74>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ff2c 	bl	80007c0 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e002      	b.n	8000978 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000972:	f7ff ff07 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024400 	.word	0x58024400
 8000984:	08005130 	.word	0x08005130
 8000988:	20000004 	.word	0x20000004
 800098c:	20000000 	.word	0x20000000

08000990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	2000498c 	.word	0x2000498c

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000498c 	.word	0x2000498c

080009d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetREVID+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0c1b      	lsrs	r3, r3, #16
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	5c001000 	.word	0x5c001000

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <__NVIC_SetPriorityGrouping+0x40>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x40>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	05fa0000 	.word	0x05fa0000

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff4c 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b66:	f7ff ff63 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	6978      	ldr	r0, [r7, #20]
 8000b72:	f7ff ffb3 	bl	8000adc <NVIC_EncodePriority>
 8000b76:	4602      	mov	r2, r0
 8000b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff82 	bl	8000a88 <__NVIC_SetPriority>
}
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff56 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bb6:	4b89      	ldr	r3, [pc, #548]	; (8000ddc <HAL_GPIO_Init+0x234>)
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bba:	e194      	b.n	8000ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8186 	beq.w	8000ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d00b      	beq.n	8000bf4 <HAL_GPIO_Init+0x4c>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b12      	cmp	r3, #18
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	f003 0201 	and.w	r2, r3, #1
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0xee>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d123      	bne.n	8000cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	69b9      	ldr	r1, [r7, #24]
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0203 	and.w	r2, r3, #3
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80e0 	beq.w	8000ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <HAL_GPIO_Init+0x23c>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_GPIO_Init+0x240>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d052      	beq.n	8000e10 <HAL_GPIO_Init+0x268>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_GPIO_Init+0x244>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d031      	beq.n	8000dd6 <HAL_GPIO_Init+0x22e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_GPIO_Init+0x248>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x22a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_GPIO_Init+0x24c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x226>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <HAL_GPIO_Init+0x250>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x222>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x254>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <HAL_GPIO_Init+0x258>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x21a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_GPIO_Init+0x25c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x216>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x260>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x212>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_GPIO_Init+0x264>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20e>
 8000db2:	2309      	movs	r3, #9
 8000db4:	e02d      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000db6:	230a      	movs	r3, #10
 8000db8:	e02b      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dba:	2308      	movs	r3, #8
 8000dbc:	e029      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e027      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e025      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e023      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e021      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e01f      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e01d      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e01b      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dda:	bf00      	nop
 8000ddc:	58000080 	.word	0x58000080
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58000400 	.word	0x58000400
 8000de8:	58020000 	.word	0x58020000
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58020c00 	.word	0x58020c00
 8000df8:	58021000 	.word	0x58021000
 8000dfc:	58021400 	.word	0x58021400
 8000e00:	58021800 	.word	0x58021800
 8000e04:	58021c00 	.word	0x58021c00
 8000e08:	58022000 	.word	0x58022000
 8000e0c:	58022400 	.word	0x58022400
 8000e10:	2300      	movs	r3, #0
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	f002 0203 	and.w	r2, r2, #3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e22:	4938      	ldr	r1, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x35c>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f ae63 	bne.w	8000bbc <HAL_GPIO_Init+0x14>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	58000400 	.word	0x58000400

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_HSEM_FastTake+0x2c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3320      	adds	r3, #32
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_HSEM_FastTake+0x30>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e000      	b.n	8000f5a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	58026400 	.word	0x58026400
 8000f6c:	80000300 	.word	0x80000300

08000f70 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f7a:	4906      	ldr	r1, [pc, #24]	; (8000f94 <HAL_HSEM_Release+0x24>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58026400 	.word	0x58026400

08000f98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d00a      	beq.n	8000fc2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d001      	beq.n	8000fbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e040      	b.n	8001040 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e03e      	b.n	8001040 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000fca:	491f      	ldr	r1, [pc, #124]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fd2:	f7ff fcf1 	bl	80009b8 <HAL_GetTick>
 8000fd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fd8:	e009      	b.n	8000fee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fda:	f7ff fced 	bl	80009b8 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe8:	d901      	bls.n	8000fee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e028      	b.n	8001040 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffa:	d1ee      	bne.n	8000fda <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b1e      	cmp	r3, #30
 8001000:	d008      	beq.n	8001014 <HAL_PWREx_ConfigSupply+0x7c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b2e      	cmp	r3, #46	; 0x2e
 8001006:	d005      	beq.n	8001014 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b1d      	cmp	r3, #29
 800100c:	d002      	beq.n	8001014 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b2d      	cmp	r3, #45	; 0x2d
 8001012:	d114      	bne.n	800103e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001014:	f7ff fcd0 	bl	80009b8 <HAL_GetTick>
 8001018:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800101a:	e009      	b.n	8001030 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800101c:	f7ff fccc 	bl	80009b8 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102a:	d901      	bls.n	8001030 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e007      	b.n	8001040 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_PWREx_ConfigSupply+0xb0>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d1ee      	bne.n	800101c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58024800 	.word	0x58024800

0800104c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e3ff      	b.n	800185e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800106c:	4b99      	ldr	r3, [pc, #612]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001076:	4b97      	ldr	r3, [pc, #604]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	2b10      	cmp	r3, #16
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	2b18      	cmp	r3, #24
 8001086:	d110      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b90      	ldr	r3, [pc, #576]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <HAL_RCC_OscConfig+0x12c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d168      	bne.n	8001178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e3d9      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x76>
 80010b4:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a86      	ldr	r2, [pc, #536]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a81      	ldr	r2, [pc, #516]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0xbc>
 80010ee:	4b79      	ldr	r3, [pc, #484]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a78      	ldr	r2, [pc, #480]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a71      	ldr	r2, [pc, #452]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fc46 	bl	80009b8 <HAL_GetTick>
 800112c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fc42 	bl	80009b8 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e38d      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001142:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xe4>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc32 	bl	80009b8 <HAL_GetTick>
 8001154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fc2e 	bl	80009b8 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e379      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x10c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80ae 	beq.w	80012e4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001190:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_RCC_OscConfig+0x162>
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	2b18      	cmp	r3, #24
 80011a2:	d13a      	bne.n	800121a <HAL_RCC_OscConfig+0x1ce>
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d135      	bne.n	800121a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x17a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e34b      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	f7ff fc03 	bl	80009d0 <HAL_GetREVID>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d817      	bhi.n	8001204 <HAL_RCC_OscConfig+0x1b8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b40      	cmp	r3, #64	; 0x40
 80011da:	d108      	bne.n	80011ee <HAL_RCC_OscConfig+0x1a2>
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011e4:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ec:	e07a      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	031b      	lsls	r3, r3, #12
 80011fc:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001202:	e06f      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	061b      	lsls	r3, r3, #24
 8001212:	4930      	ldr	r1, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001218:	e064      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d045      	beq.n	80012ae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 0219 	bic.w	r2, r3, #25
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	4929      	ldr	r1, [pc, #164]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fbc0 	bl	80009b8 <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fbbc 	bl	80009b8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e307      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	f7ff fbb9 	bl	80009d0 <HAL_GetREVID>
 800125e:	4602      	mov	r2, r0
 8001260:	f241 0303 	movw	r3, #4099	; 0x1003
 8001264:	429a      	cmp	r2, r3
 8001266:	d817      	bhi.n	8001298 <HAL_RCC_OscConfig+0x24c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b40      	cmp	r3, #64	; 0x40
 800126e:	d108      	bne.n	8001282 <HAL_RCC_OscConfig+0x236>
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	6053      	str	r3, [r2, #4]
 8001280:	e030      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	4910      	ldr	r1, [pc, #64]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
 8001296:	e025      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	490b      	ldr	r1, [pc, #44]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	e01a      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_RCC_OscConfig+0x288>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb7d 	bl	80009b8 <HAL_GetTick>
 80012be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb79 	bl	80009b8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d903      	bls.n	80012d8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e2c4      	b.n	800185e <HAL_RCC_OscConfig+0x812>
 80012d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012d8:	4ba4      	ldr	r3, [pc, #656]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a9 	beq.w	8001444 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f2:	4b9e      	ldr	r3, [pc, #632]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012fc:	4b9b      	ldr	r3, [pc, #620]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d007      	beq.n	8001318 <HAL_RCC_OscConfig+0x2cc>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b18      	cmp	r3, #24
 800130c:	d13a      	bne.n	8001384 <HAL_RCC_OscConfig+0x338>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d135      	bne.n	8001384 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001318:	4b94      	ldr	r3, [pc, #592]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x2e4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b80      	cmp	r3, #128	; 0x80
 800132a:	d001      	beq.n	8001330 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e296      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001330:	f7ff fb4e 	bl	80009d0 <HAL_GetREVID>
 8001334:	4602      	mov	r2, r0
 8001336:	f241 0303 	movw	r3, #4099	; 0x1003
 800133a:	429a      	cmp	r2, r3
 800133c:	d817      	bhi.n	800136e <HAL_RCC_OscConfig+0x322>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	2b20      	cmp	r3, #32
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x30c>
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800134e:	4a87      	ldr	r2, [pc, #540]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001354:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001356:	e075      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001358:	4b84      	ldr	r3, [pc, #528]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	069b      	lsls	r3, r3, #26
 8001366:	4981      	ldr	r1, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800136c:	e06a      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800136e:	4b7f      	ldr	r3, [pc, #508]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	497b      	ldr	r1, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001382:	e05f      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d042      	beq.n	8001412 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800138c:	4b77      	ldr	r3, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a76      	ldr	r2, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fb0e 	bl	80009b8 <HAL_GetTick>
 800139c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013a0:	f7ff fb0a 	bl	80009b8 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e255      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013b2:	4b6e      	ldr	r3, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013be:	f7ff fb07 	bl	80009d0 <HAL_GetREVID>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d817      	bhi.n	80013fc <HAL_RCC_OscConfig+0x3b0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d108      	bne.n	80013e6 <HAL_RCC_OscConfig+0x39a>
 80013d4:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013e2:	6053      	str	r3, [r2, #4]
 80013e4:	e02e      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	069b      	lsls	r3, r3, #26
 80013f4:	495d      	ldr	r1, [pc, #372]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
 80013fa:	e023      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	4958      	ldr	r1, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800140c:	4313      	orrs	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a55      	ldr	r2, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff facb 	bl	80009b8 <HAL_GetTick>
 8001422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001426:	f7ff fac7 	bl	80009b8 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e212      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d036      	beq.n	80014be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d019      	beq.n	800148c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001458:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	4a43      	ldr	r2, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff faa8 	bl	80009b8 <HAL_GetTick>
 8001468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff faa4 	bl	80009b8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1ef      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x420>
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	4a36      	ldr	r2, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fa8e 	bl	80009b8 <HAL_GetTick>
 800149c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fa8a 	bl	80009b8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1d5      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d036      	beq.n	8001538 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014de:	f7ff fa6b 	bl	80009b8 <HAL_GetTick>
 80014e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014e6:	f7ff fa67 	bl	80009b8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1b2      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x520>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x49a>
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_OscConfig+0x520>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800150c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001510:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001512:	f7ff fa51 	bl	80009b8 <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800151a:	f7ff fa4d 	bl	80009b8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e198      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_RCC_OscConfig+0x520>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8085 	beq.w	8001650 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x524>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x524>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001552:	f7ff fa31 	bl	80009b8 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001558:	e00c      	b.n	8001574 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fa2d 	bl	80009b8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b64      	cmp	r3, #100	; 0x64
 8001566:	d905      	bls.n	8001574 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e178      	b.n	800185e <HAL_RCC_OscConfig+0x812>
 800156c:	58024400 	.word	0x58024400
 8001570:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001574:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <HAL_RCC_OscConfig+0x784>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ec      	beq.n	800155a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x54a>
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a91      	ldr	r2, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_OscConfig+0x5a6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x56c>
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a8c      	ldr	r2, [pc, #560]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a89      	ldr	r2, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	e01c      	b.n	80015f2 <HAL_RCC_OscConfig+0x5a6>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x58e>
 80015c0:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a80      	ldr	r2, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x5a6>
 80015da:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a7d      	ldr	r2, [pc, #500]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff f9dd 	bl	80009b8 <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff f9d9 	bl	80009b8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e122      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001618:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCC_OscConfig+0x5b6>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff f9c7 	bl	80009b8 <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff f9c3 	bl	80009b8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e10c      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001644:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8101 	beq.w	800185c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800165a:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001662:	2b18      	cmp	r3, #24
 8001664:	f000 80bc 	beq.w	80017e0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	2b02      	cmp	r3, #2
 800166e:	f040 8095 	bne.w	800179c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff f99b 	bl	80009b8 <HAL_GetTick>
 8001682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff f997 	bl	80009b8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0e2      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80016a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <HAL_RCC_OscConfig+0x78c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	430a      	orrs	r2, r1
 80016b8:	4946      	ldr	r1, [pc, #280]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	628b      	str	r3, [r1, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	3b01      	subs	r3, #1
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	3b01      	subs	r3, #1
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	3b01      	subs	r3, #1
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016ee:	4939      	ldr	r1, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_RCC_OscConfig+0x790>)
 8001706:	4013      	ands	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170c:	00d2      	lsls	r2, r2, #3
 800170e:	4931      	ldr	r1, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001710:	4313      	orrs	r3, r2
 8001712:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f023 020c 	bic.w	r2, r3, #12
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	492c      	ldr	r1, [pc, #176]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001722:	4313      	orrs	r3, r2
 8001724:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f023 0202 	bic.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4928      	ldr	r1, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001734:	4313      	orrs	r3, r2
 8001736:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f920 	bl	80009b8 <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f91c 	bl	80009b8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e067      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x730>
 800179a:	e05f      	b.n	800185c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f906 	bl	80009b8 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f902 	bl	80009b8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e04d      	b.n	800185e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_OscConfig+0x788>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x764>
 80017ce:	e045      	b.n	800185c <HAL_RCC_OscConfig+0x810>
 80017d0:	58024800 	.word	0x58024800
 80017d4:	58024400 	.word	0x58024400
 80017d8:	fffffc0c 	.word	0xfffffc0c
 80017dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <HAL_RCC_OscConfig+0x81c>)
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_OscConfig+0x81c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d031      	beq.n	8001858 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d12a      	bne.n	8001858 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d122      	bne.n	8001858 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d11a      	bne.n	8001858 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	0a5b      	lsrs	r3, r3, #9
 8001826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d111      	bne.n	8001858 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0e1b      	lsrs	r3, r3, #24
 800184a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3730      	adds	r7, #48	; 0x30
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	58024400 	.word	0x58024400

0800186c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e19c      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d910      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b87      	ldr	r3, [pc, #540]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	4985      	ldr	r1, [pc, #532]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b83      	ldr	r3, [pc, #524]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e184      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d010      	beq.n	80018de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d908      	bls.n	80018de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018cc:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	4975      	ldr	r1, [pc, #468]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d010      	beq.n	800190c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d908      	bls.n	800190c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	496a      	ldr	r1, [pc, #424]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001908:	4313      	orrs	r3, r2
 800190a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d010      	beq.n	800193a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001924:	429a      	cmp	r2, r3
 8001926:	d908      	bls.n	800193a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	495e      	ldr	r1, [pc, #376]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001936:	4313      	orrs	r3, r2
 8001938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b00      	cmp	r3, #0
 8001944:	d010      	beq.n	8001968 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001952:	429a      	cmp	r2, r3
 8001954:	d908      	bls.n	8001968 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001956:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4953      	ldr	r1, [pc, #332]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001964:	4313      	orrs	r3, r2
 8001966:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	429a      	cmp	r2, r3
 8001982:	d908      	bls.n	8001996 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f023 020f 	bic.w	r2, r3, #15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4947      	ldr	r1, [pc, #284]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001992:	4313      	orrs	r3, r2
 8001994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d055      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4940      	ldr	r1, [pc, #256]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d121      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0f6      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d115      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0ea      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0de      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0d6      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f023 0207 	bic.w	r2, r3, #7
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4925      	ldr	r1, [pc, #148]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7fe ffcb 	bl	80009b8 <HAL_GetTick>
 8001a22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7fe ffc7 	bl	80009b8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0be      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d1eb      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d208      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d214      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 020f 	bic.w	r2, r3, #15
 8001a92:	4906      	ldr	r1, [pc, #24]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e086      	b.n	8001bba <HAL_RCC_ClockConfig+0x34e>
 8001aac:	52002000 	.word	0x52002000
 8001ab0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d208      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4939      	ldr	r1, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d208      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d208      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d208      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4917      	ldr	r1, [pc, #92]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b6c:	f000 f834 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b70:	4601      	mov	r1, r0
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x35c>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa21 f303 	lsr.w	r3, r1, r3
 8001b88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x358>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_RCC_ClockConfig+0x35c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x360>)
 8001ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x364>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x368>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fe06 	bl	80007c0 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	08005130 	.word	0x08005130
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bde:	4baf      	ldr	r3, [pc, #700]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be6:	2b18      	cmp	r3, #24
 8001be8:	f200 814e 	bhi.w	8001e88 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c59 	.word	0x08001c59
 8001bf8:	08001e89 	.word	0x08001e89
 8001bfc:	08001e89 	.word	0x08001e89
 8001c00:	08001e89 	.word	0x08001e89
 8001c04:	08001e89 	.word	0x08001e89
 8001c08:	08001e89 	.word	0x08001e89
 8001c0c:	08001e89 	.word	0x08001e89
 8001c10:	08001e89 	.word	0x08001e89
 8001c14:	08001c7f 	.word	0x08001c7f
 8001c18:	08001e89 	.word	0x08001e89
 8001c1c:	08001e89 	.word	0x08001e89
 8001c20:	08001e89 	.word	0x08001e89
 8001c24:	08001e89 	.word	0x08001e89
 8001c28:	08001e89 	.word	0x08001e89
 8001c2c:	08001e89 	.word	0x08001e89
 8001c30:	08001e89 	.word	0x08001e89
 8001c34:	08001c85 	.word	0x08001c85
 8001c38:	08001e89 	.word	0x08001e89
 8001c3c:	08001e89 	.word	0x08001e89
 8001c40:	08001e89 	.word	0x08001e89
 8001c44:	08001e89 	.word	0x08001e89
 8001c48:	08001e89 	.word	0x08001e89
 8001c4c:	08001e89 	.word	0x08001e89
 8001c50:	08001e89 	.word	0x08001e89
 8001c54:	08001c8b 	.word	0x08001c8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c58:	4b90      	ldr	r3, [pc, #576]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c64:	4b8d      	ldr	r3, [pc, #564]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	4a8c      	ldr	r2, [pc, #560]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c76:	e10a      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c78:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c7a:	61bb      	str	r3, [r7, #24]
    break;
 8001c7c:	e107      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c7e:	4b89      	ldr	r3, [pc, #548]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001c80:	61bb      	str	r3, [r7, #24]
    break;
 8001c82:	e104      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001c86:	61bb      	str	r3, [r7, #24]
    break;
 8001c88:	e101      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c8a:	4b84      	ldr	r3, [pc, #528]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c94:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ca0:	4b7e      	ldr	r3, [pc, #504]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001caa:	4b7c      	ldr	r3, [pc, #496]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80da 	beq.w	8001e82 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d05a      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1b2>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d302      	bcc.n	8001cde <HAL_RCC_GetSysClockFreq+0x106>
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d078      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f6>
 8001cdc:	e099      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cde:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d02d      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cea:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d24:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d28:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d44:	e087      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d50:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001eb0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d68:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d6c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d88:	e065      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d94:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dac:	ed97 6a02 	vldr	s12, [r7, #8]
 8001db0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8001db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dcc:	e043      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001eb8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001df4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8001df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e10:	e021      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e34:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e38:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001eac <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e54:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	0a5b      	lsrs	r3, r3, #9
 8001e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e60:	3301      	adds	r3, #1
 8001e62:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e80:	e005      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e8a:	61bb      	str	r3, [r7, #24]
    break;
 8001e8c:	bf00      	nop
  }

  return sysclockfreq;
 8001e8e:	69bb      	ldr	r3, [r7, #24]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	03d09000 	.word	0x03d09000
 8001ea4:	003d0900 	.word	0x003d0900
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	46000000 	.word	0x46000000
 8001eb0:	4c742400 	.word	0x4c742400
 8001eb4:	4a742400 	.word	0x4a742400
 8001eb8:	4af42400 	.word	0x4af42400

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ec2:	f7ff fe89 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	fa21 f303 	lsr.w	r3, r1, r3
 8001ede:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8001ef8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	08005130 	.word	0x08005130
 8001f14:	20000004 	.word	0x20000004
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001f20:	f7ff ffcc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f24:	4601      	mov	r1, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	58024400 	.word	0x58024400
 8001f44:	08005130 	.word	0x08005130

08001f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0207 	and.w	r2, r3, #7
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_GetClockConfig+0x80>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	52002000 	.word	0x52002000

08001fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e049      	b.n	8002072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f841 	bl	800207a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f000 f9be 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e021      	b.n	80020ec <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_TIM_Base_Start_IT+0x68>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d00b      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x5a>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d007      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	00010007 	.word	0x00010007

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0202 	mvn.w	r2, #2
 8002128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f905 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8f7 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f908 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0204 	mvn.w	r2, #4
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8db 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8cd 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8de 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8b1 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8a3 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f8b4 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f887 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f879 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f88a 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0201 	mvn.w	r2, #1
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fa6c 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f914 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	d10e      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d107      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f907 	bl	80024e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d10e      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d107      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f838 	bl	8002376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	d10e      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b20      	cmp	r3, #32
 8002320:	d107      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0220 	mvn.w	r2, #32
 800232a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8c7 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d00f      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00b      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <TIM_Base_SetConfig+0x120>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d108      	bne.n	80023de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d01b      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d017      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <TIM_Base_SetConfig+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00f      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00b      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <TIM_Base_SetConfig+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <TIM_Base_SetConfig+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d003      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a26      	ldr	r2, [pc, #152]	; (80024bc <TIM_Base_SetConfig+0x130>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00f      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00b      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <TIM_Base_SetConfig+0x128>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <TIM_Base_SetConfig+0x12c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <TIM_Base_SetConfig+0x130>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d103      	bne.n	800248c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	60bb      	str	r3, [r7, #8]
  return(result);
 8002518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8310 	mrs	r3, PRIMASK
 8002522:	607b      	str	r3, [r7, #4]
  return(result);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800252a:	f3ef 8311 	mrs	r3, BASEPRI
 800252e:	603b      	str	r3, [r7, #0]
  return(result);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <osKernelInitialize+0x3a>
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <osKernelInitialize+0x64>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800253e:	f06f 0305 	mvn.w	r3, #5
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e00c      	b.n	8002560 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <osKernelInitialize+0x64>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <osKernelInitialize+0x64>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e002      	b.n	8002560 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002560:	68fb      	ldr	r3, [r7, #12]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000030 	.word	0x20000030

08002574 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800257a:	f3ef 8305 	mrs	r3, IPSR
 800257e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8310 	mrs	r3, PRIMASK
 800258a:	607b      	str	r3, [r7, #4]
  return(result);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002592:	f3ef 8311 	mrs	r3, BASEPRI
 8002596:	603b      	str	r3, [r7, #0]
  return(result);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <osKernelStart+0x3a>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <osKernelStart+0x68>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80025a6:	f06f 0305 	mvn.w	r3, #5
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e010      	b.n	80025d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <osKernelStart+0x68>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d109      	bne.n	80025ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025b6:	f7ff ffa1 	bl	80024fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <osKernelStart+0x68>)
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025c0:	f001 fcfe 	bl	8003fc0 <vTaskStartScheduler>
      stat = osOK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e002      	b.n	80025d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000030 	.word	0x20000030

080025e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b090      	sub	sp, #64	; 0x40
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f0:	f3ef 8305 	mrs	r3, IPSR
 80025f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80025f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 808f 	bne.w	800271c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002602:	61bb      	str	r3, [r7, #24]
  return(result);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800260a:	f3ef 8311 	mrs	r3, BASEPRI
 800260e:	617b      	str	r3, [r7, #20]
  return(result);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <osThreadNew+0x3e>
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <osThreadNew+0x148>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d07e      	beq.n	800271c <osThreadNew+0x13c>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07b      	beq.n	800271c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002628:	2318      	movs	r3, #24
 800262a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002634:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d045      	beq.n	80026c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <osThreadNew+0x6a>
        name = attr->name;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <osThreadNew+0x90>
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b38      	cmp	r3, #56	; 0x38
 8002662:	d805      	bhi.n	8002670 <osThreadNew+0x90>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <osThreadNew+0x94>
        return (NULL);
 8002670:	2300      	movs	r3, #0
 8002672:	e054      	b.n	800271e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <osThreadNew+0xca>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b5b      	cmp	r3, #91	; 0x5b
 8002692:	d90a      	bls.n	80026aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <osThreadNew+0xca>
        mem = 1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	e010      	b.n	80026cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <osThreadNew+0xec>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <osThreadNew+0xec>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <osThreadNew+0xec>
          mem = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	e001      	b.n	80026cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d110      	bne.n	80026f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026da:	9202      	str	r2, [sp, #8]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f001 fa25 	bl	8003b38 <xTaskCreateStatic>
 80026ee:	4603      	mov	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	e013      	b.n	800271c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d110      	bne.n	800271c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f001 fa6d 	bl	8003bec <xTaskCreate>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d001      	beq.n	800271c <osThreadNew+0x13c>
          hTask = NULL;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800271c:	693b      	ldr	r3, [r7, #16]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3730      	adds	r7, #48	; 0x30
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000030 	.word	0x20000030

0800272c <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8002730:	2000      	movs	r0, #0
 8002732:	f001 fb9f 	bl	8003e74 <vTaskDelete>
#endif
  for (;;);
 8002736:	e7fe      	b.n	8002736 <osThreadExit+0xa>

08002738 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002740:	f3ef 8305 	mrs	r3, IPSR
 8002744:	613b      	str	r3, [r7, #16]
  return(result);
 8002746:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274c:	f3ef 8310 	mrs	r3, PRIMASK
 8002750:	60fb      	str	r3, [r7, #12]
  return(result);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002758:	f3ef 8311 	mrs	r3, BASEPRI
 800275c:	60bb      	str	r3, [r7, #8]
  return(result);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <osDelay+0x3c>
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <osDelay+0x58>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d103      	bne.n	8002774 <osDelay+0x3c>
    stat = osErrorISR;
 800276c:	f06f 0305 	mvn.w	r3, #5
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e007      	b.n	8002784 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <osDelay+0x4c>
      vTaskDelay(ticks);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f001 fbea 	bl	8003f58 <vTaskDelay>
    }
  }

  return (stat);
 8002784:	697b      	ldr	r3, [r7, #20]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000030 	.word	0x20000030

08002794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80027a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <vApplicationGetIdleTaskMemory+0x30>)
 80027aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000034 	.word	0x20000034
 80027c4:	20000090 	.word	0x20000090

080027c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <vApplicationGetTimerTaskMemory+0x30>)
 80027de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000290 	.word	0x20000290
 80027f8:	200002ec 	.word	0x200002ec

080027fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002808:	f001 fc3e 	bl	8004088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <pvPortMalloc+0x170>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002814:	f000 f90c 	bl	8002a30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <pvPortMalloc+0x174>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 808c 	bne.w	800293e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800282c:	2208      	movs	r2, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	3308      	adds	r3, #8
 8002846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e7fe      	b.n	8002864 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d068      	beq.n	800293e <pvPortMalloc+0x142>
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <pvPortMalloc+0x178>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	d863      	bhi.n	800293e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <pvPortMalloc+0x17c>)
 8002878:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <pvPortMalloc+0x17c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002880:	e004      	b.n	800288c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d903      	bls.n	800289e <pvPortMalloc+0xa2>
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f1      	bne.n	8002882 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800289e:	4b33      	ldr	r3, [pc, #204]	; (800296c <pvPortMalloc+0x170>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d04a      	beq.n	800293e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	1ad2      	subs	r2, r2, r3
 80028c2:	2308      	movs	r3, #8
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d91e      	bls.n	8002908 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <pvPortMalloc+0xf4>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e7fe      	b.n	80028ee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002902:	69b8      	ldr	r0, [r7, #24]
 8002904:	f000 f8f6 	bl	8002af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <pvPortMalloc+0x178>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <pvPortMalloc+0x178>)
 8002914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <pvPortMalloc+0x178>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <pvPortMalloc+0x180>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d203      	bcs.n	800292a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <pvPortMalloc+0x178>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <pvPortMalloc+0x180>)
 8002928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <pvPortMalloc+0x174>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800293e:	f001 fbb1 	bl	80040a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <pvPortMalloc+0x164>
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e7fe      	b.n	800295e <pvPortMalloc+0x162>
	return pvReturn;
 8002960:	69fb      	ldr	r3, [r7, #28]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200042f4 	.word	0x200042f4
 8002970:	20004300 	.word	0x20004300
 8002974:	200042f8 	.word	0x200042f8
 8002978:	200042ec 	.word	0x200042ec
 800297c:	200042fc 	.word	0x200042fc

08002980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d046      	beq.n	8002a20 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002992:	2308      	movs	r3, #8
 8002994:	425b      	negs	r3, r3
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4413      	add	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <vPortFree+0xa8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <vPortFree+0x42>
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e7fe      	b.n	80029c0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <vPortFree+0x5e>
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	e7fe      	b.n	80029dc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <vPortFree+0xa8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d019      	beq.n	8002a20 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d115      	bne.n	8002a20 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <vPortFree+0xa8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a04:	f001 fb40 	bl	8004088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <vPortFree+0xac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <vPortFree+0xac>)
 8002a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a16:	6938      	ldr	r0, [r7, #16]
 8002a18:	f000 f86c 	bl	8002af4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002a1c:	f001 fb42 	bl	80040a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20004300 	.word	0x20004300
 8002a2c:	200042f8 	.word	0x200042f8

08002a30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <prvHeapInit+0xac>)
 8002a3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <prvHeapInit+0xac>)
 8002a60:	4413      	add	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a68:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <prvHeapInit+0xb0>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <prvHeapInit+0xb0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <prvHeapInit+0xb4>)
 8002a90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <prvHeapInit+0xb4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <prvHeapInit+0xb4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <prvHeapInit+0xb4>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <prvHeapInit+0xb8>)
 8002abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <prvHeapInit+0xbc>)
 8002ac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <prvHeapInit+0xc0>)
 8002aca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	200006ec 	.word	0x200006ec
 8002ae0:	200042ec 	.word	0x200042ec
 8002ae4:	200042f4 	.word	0x200042f4
 8002ae8:	200042fc 	.word	0x200042fc
 8002aec:	200042f8 	.word	0x200042f8
 8002af0:	20004300 	.word	0x20004300

08002af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <prvInsertBlockIntoFreeList+0xac>)
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e002      	b.n	8002b08 <prvInsertBlockIntoFreeList+0x14>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d8f7      	bhi.n	8002b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d108      	bne.n	8002b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d118      	bne.n	8002b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d00d      	beq.n	8002b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e008      	b.n	8002b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e003      	b.n	8002b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d002      	beq.n	8002b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200042ec 	.word	0x200042ec
 8002ba4:	200042f4 	.word	0x200042f4

08002ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f103 0208 	add.w	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0208 	add.w	r2, r3, #8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f103 0208 	add.w	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d103      	bne.n	8002c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e00c      	b.n	8002c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e002      	b.n	8002c78 <vListInsert+0x2e>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d2f6      	bcs.n	8002c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d103      	bne.n	8002cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b04      	subs	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <pxPortInitialiseStack+0x64>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b14      	subs	r3, #20
 8002d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b04      	subs	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f06f 0202 	mvn.w	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b20      	subs	r3, #32
 8002d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	08002d79 	.word	0x08002d79

08002d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <prvTaskExitError+0x50>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d8a:	d009      	beq.n	8002da0 <prvTaskExitError+0x28>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e7fe      	b.n	8002d9e <prvTaskExitError+0x26>
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002db2:	bf00      	nop
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0fc      	beq.n	8002db4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dda:	f380 8809 	msr	PSP, r0
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8811 	msr	BASEPRI, r0
 8002dea:	4770      	bx	lr
 8002dec:	f3af 8000 	nop.w

08002df0 <pxCurrentTCBConst2>:
 8002df0:	2000430c 	.word	0x2000430c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <prvPortStartFirstTask+0x24>)
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f380 8808 	msr	MSP, r0
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8814 	msr	CONTROL, r0
 8002e0a:	b662      	cpsie	i
 8002e0c:	b661      	cpsie	f
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	df00      	svc	0
 8002e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed08 	.word	0xe000ed08

08002e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e26:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <xPortStartScheduler+0x118>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a44      	ldr	r2, [pc, #272]	; (8002f3c <xPortStartScheduler+0x11c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d109      	bne.n	8002e44 <xPortStartScheduler+0x24>
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e7fe      	b.n	8002e42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e44:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <xPortStartScheduler+0x118>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <xPortStartScheduler+0x120>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d109      	bne.n	8002e62 <xPortStartScheduler+0x42>
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e7fe      	b.n	8002e60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <xPortStartScheduler+0x124>)
 8002e64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	22ff      	movs	r2, #255	; 0xff
 8002e72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <xPortStartScheduler+0x128>)
 8002e88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e90:	e009      	b.n	8002ea6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002e9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d0ef      	beq.n	8002e92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d009      	beq.n	8002ed2 <xPortStartScheduler+0xb2>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e7fe      	b.n	8002ed0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002eda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002ee6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <xPortStartScheduler+0x130>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <xPortStartScheduler+0x130>)
 8002ef6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002efa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <xPortStartScheduler+0x130>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <xPortStartScheduler+0x130>)
 8002f02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f08:	f000 f8d6 	bl	80030b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <xPortStartScheduler+0x134>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f12:	f000 f8f5 	bl	8003100 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f22:	f7ff ff69 	bl	8002df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f26:	f001 fa21 	bl	800436c <vTaskSwitchContext>
	prvTaskExitError();
 8002f2a:	f7ff ff25 	bl	8002d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	410fc271 	.word	0x410fc271
 8002f40:	410fc270 	.word	0x410fc270
 8002f44:	e000e400 	.word	0xe000e400
 8002f48:	20004304 	.word	0x20004304
 8002f4c:	20004308 	.word	0x20004308
 8002f50:	e000ed20 	.word	0xe000ed20
 8002f54:	20000010 	.word	0x20000010
 8002f58:	e000ef34 	.word	0xe000ef34

08002f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <vPortEnterCritical+0x54>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <vPortEnterCritical+0x54>)
 8002f7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <vPortEnterCritical+0x54>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10e      	bne.n	8002fa4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <vPortEnterCritical+0x58>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <vPortEnterCritical+0x48>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	e7fe      	b.n	8002fa2 <vPortEnterCritical+0x46>
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <vPortExitCritical+0x4c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <vPortExitCritical+0x22>
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e7fe      	b.n	8002fd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <vPortExitCritical+0x4c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a08      	ldr	r2, [pc, #32]	; (8003004 <vPortExitCritical+0x4c>)
 8002fe2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <vPortExitCritical+0x4c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <vPortExitCritical+0x3e>
 8002fec:	2300      	movs	r3, #0
 8002fee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010
	...

08003010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003010:	f3ef 8009 	mrs	r0, PSP
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <pxCurrentTCBConst>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f01e 0f10 	tst.w	lr, #16
 8003020:	bf08      	it	eq
 8003022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	6010      	str	r0, [r2, #0]
 800302c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003034:	f380 8811 	msr	BASEPRI, r0
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f001 f994 	bl	800436c <vTaskSwitchContext>
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f380 8811 	msr	BASEPRI, r0
 800304c:	bc09      	pop	{r0, r3}
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003056:	f01e 0f10 	tst.w	lr, #16
 800305a:	bf08      	it	eq
 800305c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003060:	f380 8809 	msr	PSP, r0
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst>:
 8003070:	2000430c 	.word	0x2000430c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003090:	f001 f8b4 	bl	80041fc <xTaskIncrementTick>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <SysTick_Handler+0x3c>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	e000ed04 	.word	0xe000ed04

080030b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <vPortSetupTimerInterrupt+0x34>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <vPortSetupTimerInterrupt+0x38>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <vPortSetupTimerInterrupt+0x3c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <vPortSetupTimerInterrupt+0x40>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <vPortSetupTimerInterrupt+0x44>)
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <vPortSetupTimerInterrupt+0x34>)
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e010 	.word	0xe000e010
 80030f0:	e000e018 	.word	0xe000e018
 80030f4:	20000000 	.word	0x20000000
 80030f8:	10624dd3 	.word	0x10624dd3
 80030fc:	e000e014 	.word	0xe000e014

08003100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003100:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003110 <vPortEnableVFP+0x10>
 8003104:	6801      	ldr	r1, [r0, #0]
 8003106:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800310a:	6001      	str	r1, [r0, #0]
 800310c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800310e:	bf00      	nop
 8003110:	e000ed88 	.word	0xe000ed88

08003114 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800311a:	f3ef 8305 	mrs	r3, IPSR
 800311e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d913      	bls.n	800314e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <vPortValidateInterruptPriority+0x6c>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <vPortValidateInterruptPriority+0x70>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	7afa      	ldrb	r2, [r7, #11]
 8003136:	429a      	cmp	r2, r3
 8003138:	d209      	bcs.n	800314e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	e7fe      	b.n	800314c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <vPortValidateInterruptPriority+0x74>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <vPortValidateInterruptPriority+0x78>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d909      	bls.n	8003172 <vPortValidateInterruptPriority+0x5e>
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	e7fe      	b.n	8003170 <vPortValidateInterruptPriority+0x5c>
	}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e3f0 	.word	0xe000e3f0
 8003184:	20004304 	.word	0x20004304
 8003188:	e000ed0c 	.word	0xe000ed0c
 800318c:	20004308 	.word	0x20004308

08003190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <xQueueGenericReset+0x28>
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	e7fe      	b.n	80031b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031b8:	f7ff fed0 	bl	8002f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	3b01      	subs	r3, #1
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	441a      	add	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	22ff      	movs	r2, #255	; 0xff
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d114      	bne.n	8003238 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01a      	beq.n	800324c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f950 	bl	80044c0 <xTaskRemoveFromEventList>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <xQueueGenericReset+0xcc>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	e009      	b.n	800324c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3310      	adds	r3, #16
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fcb3 	bl	8002ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fcae 	bl	8002ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800324c:	f7ff feb4 	bl	8002fb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003250:	2301      	movs	r3, #1
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08e      	sub	sp, #56	; 0x38
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <xQueueGenericCreateStatic+0x28>
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	e7fe      	b.n	8003286 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <xQueueGenericCreateStatic+0x42>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <xQueueGenericCreateStatic+0x4e>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <xQueueGenericCreateStatic+0x52>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueGenericCreateStatic+0x54>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <xQueueGenericCreateStatic+0x6c>
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	e7fe      	b.n	80032ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <xQueueGenericCreateStatic+0x78>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <xQueueGenericCreateStatic+0x7c>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <xQueueGenericCreateStatic+0x7e>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <xQueueGenericCreateStatic+0x96>
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032f6:	2350      	movs	r3, #80	; 0x50
 80032f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d009      	beq.n	8003314 <xQueueGenericCreateStatic+0xb4>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e7fe      	b.n	8003312 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003314:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003328:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f805 	bl	8003346 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800333e:	4618      	mov	r0, r3
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e002      	b.n	8003368 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003374:	2101      	movs	r1, #1
 8003376:	69b8      	ldr	r0, [r7, #24]
 8003378:	f7ff ff0a 	bl	8003190 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <xQueueGenericSend+0x30>
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	e7fe      	b.n	80033ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueGenericSend+0x3e>
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueGenericSend+0x42>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueGenericSend+0x44>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <xQueueGenericSend+0x5c>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSend+0x6a>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSend+0x6e>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSend+0x70>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <xQueueGenericSend+0x88>
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	e7fe      	b.n	8003412 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003414:	f001 fa0a 	bl	800482c <xTaskGetSchedulerState>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <xQueueGenericSend+0x98>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <xQueueGenericSend+0x9c>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <xQueueGenericSend+0x9e>
 8003428:	2300      	movs	r3, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <xQueueGenericSend+0xb6>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	e7fe      	b.n	8003440 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003442:	f7ff fd8b 	bl	8002f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <xQueueGenericSend+0xcc>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d129      	bne.n	80034ac <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800345e:	f000 f9ff 	bl	8003860 <prvCopyDataToQueue>
 8003462:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f825 	bl	80044c0 <xTaskRemoveFromEventList>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <xQueueGenericSend+0x1f0>)
 800347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	e00a      	b.n	80034a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <xQueueGenericSend+0x1f0>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034a4:	f7ff fd88 	bl	8002fb8 <vPortExitCritical>
				return pdPASS;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e063      	b.n	8003574 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034b2:	f7ff fd81 	bl	8002fb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e05c      	b.n	8003574 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f85d 	bl	8004584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ce:	f7ff fd73 	bl	8002fb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034d2:	f000 fdd9 	bl	8004088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034d6:	f7ff fd41 	bl	8002f5c <vPortEnterCritical>
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e6:	d103      	bne.n	80034f0 <xQueueGenericSend+0x164>
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fc:	d103      	bne.n	8003506 <xQueueGenericSend+0x17a>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003506:	f7ff fd57 	bl	8002fb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800350a:	1d3a      	adds	r2, r7, #4
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f84c 	bl	80045b0 <xTaskCheckForTimeOut>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d124      	bne.n	8003568 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800351e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003520:	f000 fa96 	bl	8003a50 <prvIsQueueFull>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d018      	beq.n	800355c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3310      	adds	r3, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 ff76 	bl	8004424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fa21 	bl	8003980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800353e:	f000 fdb1 	bl	80040a4 <xTaskResumeAll>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af7c 	bne.w	8003442 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <xQueueGenericSend+0x1f0>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	e772      	b.n	8003442 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800355c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355e:	f000 fa0f 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003562:	f000 fd9f 	bl	80040a4 <xTaskResumeAll>
 8003566:	e76c      	b.n	8003442 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800356a:	f000 fa09 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800356e:	f000 fd99 	bl	80040a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003574:	4618      	mov	r0, r3
 8003576:	3738      	adds	r7, #56	; 0x38
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08e      	sub	sp, #56	; 0x38
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <xQueueGenericSendFromISR+0x2c>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	e7fe      	b.n	80035aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <xQueueGenericSendFromISR+0x3a>
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <xQueueGenericSendFromISR+0x3e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <xQueueGenericSendFromISR+0x40>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <xQueueGenericSendFromISR+0x58>
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	e7fe      	b.n	80035d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d103      	bne.n	80035e6 <xQueueGenericSendFromISR+0x66>
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <xQueueGenericSendFromISR+0x6a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xQueueGenericSendFromISR+0x6c>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <xQueueGenericSendFromISR+0x84>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e7fe      	b.n	8003602 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003604:	f7ff fd86 	bl	8003114 <vPortValidateInterruptPriority>
	__asm volatile
 8003608:	f3ef 8211 	mrs	r2, BASEPRI
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61ba      	str	r2, [r7, #24]
 800361e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003620:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <xQueueGenericSendFromISR+0xb6>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d12c      	bne.n	8003690 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003646:	f000 f90b 	bl	8003860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800364a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003652:	d112      	bne.n	800367a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d016      	beq.n	800368a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	4618      	mov	r0, r3
 8003662:	f000 ff2d 	bl	80044c0 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e007      	b.n	800368a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800367a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800367e:	3301      	adds	r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	b25a      	sxtb	r2, r3
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800368a:	2301      	movs	r3, #1
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800368e:	e001      	b.n	8003694 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003690:	2300      	movs	r3, #0
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3738      	adds	r7, #56	; 0x38
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <xQueueReceive+0x2e>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	e7fe      	b.n	80036d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <xQueueReceive+0x3c>
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueReceive+0x40>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueReceive+0x42>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <xQueueReceive+0x5a>
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e7fe      	b.n	8003700 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003702:	f001 f893 	bl	800482c <xTaskGetSchedulerState>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <xQueueReceive+0x6a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <xQueueReceive+0x6e>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueReceive+0x70>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <xQueueReceive+0x88>
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e7fe      	b.n	800372e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003730:	f7ff fc14 	bl	8002f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01f      	beq.n	8003780 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003744:	f000 f8f6 	bl	8003934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f000 feaf 	bl	80044c0 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b3c      	ldr	r3, [pc, #240]	; (800385c <xQueueReceive+0x1b4>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003778:	f7ff fc1e 	bl	8002fb8 <vPortExitCritical>
				return pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	e069      	b.n	8003854 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003786:	f7ff fc17 	bl	8002fb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800378a:	2300      	movs	r3, #0
 800378c:	e062      	b.n	8003854 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fef3 	bl	8004584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037a2:	f7ff fc09 	bl	8002fb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037a6:	f000 fc6f 	bl	8004088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037aa:	f7ff fbd7 	bl	8002f5c <vPortEnterCritical>
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0x11c>
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x132>
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037da:	f7ff fbed 	bl	8002fb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037de:	1d3a      	adds	r2, r7, #4
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fee2 	bl	80045b0 <xTaskCheckForTimeOut>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d123      	bne.n	800383a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f4:	f000 f916 	bl	8003a24 <prvIsQueueEmpty>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d017      	beq.n	800382e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe0c 	bl	8004424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f8b7 	bl	8003980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003812:	f000 fc47 	bl	80040a4 <xTaskResumeAll>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d189      	bne.n	8003730 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <xQueueReceive+0x1b4>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	e780      	b.n	8003730 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800382e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003830:	f000 f8a6 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003834:	f000 fc36 	bl	80040a4 <xTaskResumeAll>
 8003838:	e77a      	b.n	8003730 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800383a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800383c:	f000 f8a0 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003840:	f000 fc30 	bl	80040a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f8ed 	bl	8003a24 <prvIsQueueEmpty>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f43f af6f 	beq.w	8003730 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14d      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 ffec 	bl	8004868 <xTaskPriorityDisinherit>
 8003890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e043      	b.n	8003922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6858      	ldr	r0, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	461a      	mov	r2, r3
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	f001 fc06 	bl	80050bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	441a      	add	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d32b      	bcc.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	e026      	b.n	8003922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68d8      	ldr	r0, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	461a      	mov	r2, r3
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	f001 fbec 	bl	80050bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	425b      	negs	r3, r3
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d207      	bcs.n	8003910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	425b      	negs	r3, r3
 800390a:	441a      	add	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d105      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	3b01      	subs	r3, #1
 8003920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800392a:	697b      	ldr	r3, [r7, #20]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d303      	bcc.n	8003968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	461a      	mov	r2, r3
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f001 fba2 	bl	80050bc <memcpy>
	}
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003988:	f7ff fae8 	bl	8002f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003994:	e011      	b.n	80039ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	; 0x24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd8c 	bl	80044c0 <xTaskRemoveFromEventList>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ae:	f000 fe5f 	bl	8004670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dce9      	bgt.n	8003996 <prvUnlockQueue+0x16>
 80039c2:	e000      	b.n	80039c6 <prvUnlockQueue+0x46>
					break;
 80039c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039ce:	f7ff faf3 	bl	8002fb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d2:	f7ff fac3 	bl	8002f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039de:	e011      	b.n	8003a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3310      	adds	r3, #16
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd67 	bl	80044c0 <xTaskRemoveFromEventList>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039f8:	f000 fe3a 	bl	8004670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dce9      	bgt.n	80039e0 <prvUnlockQueue+0x60>
 8003a0c:	e000      	b.n	8003a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a18:	f7ff face 	bl	8002fb8 <vPortExitCritical>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a2c:	f7ff fa96 	bl	8002f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e001      	b.n	8003a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f7ff fab9 	bl	8002fb8 <vPortExitCritical>

	return xReturn;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a58:	f7ff fa80 	bl	8002f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d102      	bne.n	8003a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f7ff faa1 	bl	8002fb8 <vPortExitCritical>

	return xReturn;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e014      	b.n	8003aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <vQueueAddToRegistry+0x4c>)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a9c:	490b      	ldr	r1, [pc, #44]	; (8003acc <vQueueAddToRegistry+0x4c>)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <vQueueAddToRegistry+0x4c>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ab2:	e005      	b.n	8003ac0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d9e7      	bls.n	8003a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20004990 	.word	0x20004990

08003ad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ae0:	f7ff fa3c 	bl	8002f5c <vPortEnterCritical>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aea:	b25b      	sxtb	r3, r3
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af0:	d103      	bne.n	8003afa <vQueueWaitForMessageRestricted+0x2a>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b00:	b25b      	sxtb	r3, r3
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b06:	d103      	bne.n	8003b10 <vQueueWaitForMessageRestricted+0x40>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b10:	f7ff fa52 	bl	8002fb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3324      	adds	r3, #36	; 0x24
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fca1 	bl	800446c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff28 	bl	8003980 <prvUnlockQueue>
	}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af04      	add	r7, sp, #16
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xTaskCreateStatic+0x28>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	e7fe      	b.n	8003b5e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <xTaskCreateStatic+0x42>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e7fe      	b.n	8003b78 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b7a:	235c      	movs	r3, #92	; 0x5c
 8003b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b5c      	cmp	r3, #92	; 0x5c
 8003b82:	d009      	beq.n	8003b98 <xTaskCreateStatic+0x60>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e7fe      	b.n	8003b96 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01e      	beq.n	8003bde <xTaskCreateStatic+0xa6>
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01b      	beq.n	8003bde <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	9302      	str	r3, [sp, #8]
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f850 	bl	8003c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bd8:	f000 f8dc 	bl	8003d94 <prvAddNewTaskToReadyList>
 8003bdc:	e001      	b.n	8003be2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003be2:	697b      	ldr	r3, [r7, #20]
	}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3728      	adds	r7, #40	; 0x28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fdfb 	bl	80027fc <pvPortMalloc>
 8003c06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c0e:	205c      	movs	r0, #92	; 0x5c
 8003c10:	f7fe fdf4 	bl	80027fc <pvPortMalloc>
 8003c14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
 8003c22:	e005      	b.n	8003c30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f7fe feab 	bl	8002980 <vPortFree>
 8003c2a:	e001      	b.n	8003c30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d017      	beq.n	8003c66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9303      	str	r3, [sp, #12]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f80e 	bl	8003c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c5a:	69f8      	ldr	r0, [r7, #28]
 8003c5c:	f000 f89a 	bl	8003d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e002      	b.n	8003c6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
	}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b088      	sub	sp, #32
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	21a5      	movs	r1, #165	; 0xa5
 8003c90:	f001 fa1f 	bl	80050d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003c9e:	440b      	add	r3, r1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <prvInitialiseNewTask+0x56>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e7fe      	b.n	8003cca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01f      	beq.n	8003d12 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e012      	b.n	8003cfe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	7819      	ldrb	r1, [r3, #0]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3334      	adds	r3, #52	; 0x34
 8003ce8:	460a      	mov	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d9e9      	bls.n	8003cd8 <prvInitialiseNewTask+0x62>
 8003d04:	e000      	b.n	8003d08 <prvInitialiseNewTask+0x92>
			{
				break;
 8003d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d10:	e003      	b.n	8003d1a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2b37      	cmp	r3, #55	; 0x37
 8003d1e:	d901      	bls.n	8003d24 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d20:	2337      	movs	r3, #55	; 0x37
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2200      	movs	r2, #0
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe ff54 	bl	8002be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	3318      	adds	r3, #24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe ff4f 	bl	8002be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2200      	movs	r2, #0
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	69b8      	ldr	r0, [r7, #24]
 8003d74:	f7fe ffcc 	bl	8002d10 <pxPortInitialiseStack>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d9c:	f7ff f8de 	bl	8002f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003db2:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d110      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dc0:	f000 fc7a 	bl	80046b8 <prvInitialiseTaskLists>
 8003dc4:	e00d      	b.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <prvAddNewTaskToReadyList+0xcc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d802      	bhi.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <prvAddNewTaskToReadyList+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d903      	bls.n	8003e08 <prvAddNewTaskToReadyList+0x74>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <prvAddNewTaskToReadyList+0xd4>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <prvAddNewTaskToReadyList+0xd8>)
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe feef 	bl	8002c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e24:	f7ff f8c8 	bl	8002fb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <prvAddNewTaskToReadyList+0xcc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d207      	bcs.n	8003e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <prvAddNewTaskToReadyList+0xdc>)
 8003e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200047e0 	.word	0x200047e0
 8003e5c:	2000430c 	.word	0x2000430c
 8003e60:	200047ec 	.word	0x200047ec
 8003e64:	200047fc 	.word	0x200047fc
 8003e68:	200047e8 	.word	0x200047e8
 8003e6c:	20004310 	.word	0x20004310
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003e7c:	f7ff f86e 	bl	8002f5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <vTaskDelete+0x18>
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <vTaskDelete+0xc4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	e000      	b.n	8003e8e <vTaskDelete+0x1a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe ff11 	bl	8002cbc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe ff08 	bl	8002cbc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <vTaskDelete+0xc8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <vTaskDelete+0xc8>)
 8003eb4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <vTaskDelete+0xc4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d10b      	bne.n	8003ed8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	481e      	ldr	r0, [pc, #120]	; (8003f40 <vTaskDelete+0xcc>)
 8003ec8:	f7fe fe9b 	bl	8002c02 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <vTaskDelete+0xd0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <vTaskDelete+0xd0>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e009      	b.n	8003eec <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <vTaskDelete+0xd4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <vTaskDelete+0xd4>)
 8003ee0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fc54 	bl	8004790 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003ee8:	f000 fc80 	bl	80047ec <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003eec:	f7ff f864 	bl	8002fb8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <vTaskDelete+0xd8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <vTaskDelete+0xc4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d115      	bne.n	8003f2e <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <vTaskDelete+0xdc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <vTaskDelete+0xaa>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	e7fe      	b.n	8003f1c <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <vTaskDelete+0xe0>)
 8003f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	2000430c 	.word	0x2000430c
 8003f3c:	200047fc 	.word	0x200047fc
 8003f40:	200047b4 	.word	0x200047b4
 8003f44:	200047c8 	.word	0x200047c8
 8003f48:	200047e0 	.word	0x200047e0
 8003f4c:	200047ec 	.word	0x200047ec
 8003f50:	20004808 	.word	0x20004808
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <vTaskDelay+0x60>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <vTaskDelay+0x2e>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	e7fe      	b.n	8003f84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f86:	f000 f87f 	bl	8004088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fcd7 	bl	8004940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f92:	f000 f887 	bl	80040a4 <xTaskResumeAll>
 8003f96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <vTaskDelay+0x64>)
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20004808 	.word	0x20004808
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fce:	463a      	mov	r2, r7
 8003fd0:	1d39      	adds	r1, r7, #4
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fbdc 	bl	8002794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	460a      	mov	r2, r1
 8003fee:	4920      	ldr	r1, [pc, #128]	; (8004070 <vTaskStartScheduler+0xb0>)
 8003ff0:	4820      	ldr	r0, [pc, #128]	; (8004074 <vTaskStartScheduler+0xb4>)
 8003ff2:	f7ff fda1 	bl	8003b38 <xTaskCreateStatic>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <vTaskStartScheduler+0xb8>)
 8003ffa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <vTaskStartScheduler+0xb8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e001      	b.n	800400e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004014:	f000 fce8 	bl	80049e8 <xTimerCreateTimerTask>
 8004018:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d115      	bne.n	800404c <vTaskStartScheduler+0x8c>
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <vTaskStartScheduler+0xbc>)
 8004034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <vTaskStartScheduler+0xc0>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <vTaskStartScheduler+0xc4>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004046:	f7fe feeb 	bl	8002e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800404a:	e00d      	b.n	8004068 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004052:	d109      	bne.n	8004068 <vTaskStartScheduler+0xa8>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e7fe      	b.n	8004066 <vTaskStartScheduler+0xa6>
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08005118 	.word	0x08005118
 8004074:	08004689 	.word	0x08004689
 8004078:	20004804 	.word	0x20004804
 800407c:	20004800 	.word	0x20004800
 8004080:	200047ec 	.word	0x200047ec
 8004084:	200047e4 	.word	0x200047e4

08004088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vTaskSuspendAll+0x18>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <vTaskSuspendAll+0x18>)
 8004094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20004808 	.word	0x20004808

080040a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <xTaskResumeAll+0x114>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <xTaskResumeAll+0x2a>
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	e7fe      	b.n	80040cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040ce:	f7fe ff45 	bl	8002f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <xTaskResumeAll+0x114>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <xTaskResumeAll+0x114>)
 80040da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <xTaskResumeAll+0x114>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d162      	bne.n	80041aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040e4:	4b35      	ldr	r3, [pc, #212]	; (80041bc <xTaskResumeAll+0x118>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05e      	beq.n	80041aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ec:	e02f      	b.n	800414e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <xTaskResumeAll+0x11c>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fdde 	bl	8002cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fdd9 	bl	8002cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <xTaskResumeAll+0x120>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d903      	bls.n	800411e <xTaskResumeAll+0x7a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <xTaskResumeAll+0x120>)
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <xTaskResumeAll+0x124>)
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7fe fd64 	bl	8002c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <xTaskResumeAll+0x128>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <xTaskResumeAll+0x12c>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <xTaskResumeAll+0x11c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cb      	bne.n	80040ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800415c:	f000 fb46 	bl	80047ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <xTaskResumeAll+0x130>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800416c:	f000 f846 	bl	80041fc <xTaskIncrementTick>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <xTaskResumeAll+0x12c>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f1      	bne.n	800416c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <xTaskResumeAll+0x130>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <xTaskResumeAll+0x12c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <xTaskResumeAll+0x134>)
 800419c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041aa:	f7fe ff05 	bl	8002fb8 <vPortExitCritical>

	return xAlreadyYielded;
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20004808 	.word	0x20004808
 80041bc:	200047e0 	.word	0x200047e0
 80041c0:	200047a0 	.word	0x200047a0
 80041c4:	200047e8 	.word	0x200047e8
 80041c8:	20004310 	.word	0x20004310
 80041cc:	2000430c 	.word	0x2000430c
 80041d0:	200047f4 	.word	0x200047f4
 80041d4:	200047f0 	.word	0x200047f0
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <xTaskGetTickCount+0x1c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041e8:	687b      	ldr	r3, [r7, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	200047e4 	.word	0x200047e4

080041fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <xTaskIncrementTick+0x144>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8088 	bne.w	8004320 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004210:	4b4c      	ldr	r3, [pc, #304]	; (8004344 <xTaskIncrementTick+0x148>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <xTaskIncrementTick+0x148>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11f      	bne.n	8004264 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <xTaskIncrementTick+0x46>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	e7fe      	b.n	8004240 <xTaskIncrementTick+0x44>
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <xTaskIncrementTick+0x14c>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4a3e      	ldr	r2, [pc, #248]	; (800434c <xTaskIncrementTick+0x150>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <xTaskIncrementTick+0x154>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <xTaskIncrementTick+0x154>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	f000 fac4 	bl	80047ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <xTaskIncrementTick+0x158>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d349      	bcc.n	8004302 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004278:	4b36      	ldr	r3, [pc, #216]	; (8004354 <xTaskIncrementTick+0x158>)
 800427a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427e:	601a      	str	r2, [r3, #0]
					break;
 8004280:	e03f      	b.n	8004302 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d203      	bcs.n	80042a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800429a:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <xTaskIncrementTick+0x158>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042a0:	e02f      	b.n	8004302 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fd08 	bl	8002cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3318      	adds	r3, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fcff 	bl	8002cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	4b25      	ldr	r3, [pc, #148]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d903      	bls.n	80042d2 <xTaskIncrementTick+0xd6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <xTaskIncrementTick+0x160>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe fc8a 	bl	8002c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <xTaskIncrementTick+0x164>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3b8      	bcc.n	800426e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004300:	e7b5      	b.n	800426e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskIncrementTick+0x164>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <xTaskIncrementTick+0x160>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d907      	bls.n	800432a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e004      	b.n	800432a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <xTaskIncrementTick+0x168>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <xTaskIncrementTick+0x168>)
 8004328:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <xTaskIncrementTick+0x16c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20004808 	.word	0x20004808
 8004344:	200047e4 	.word	0x200047e4
 8004348:	20004798 	.word	0x20004798
 800434c:	2000479c 	.word	0x2000479c
 8004350:	200047f8 	.word	0x200047f8
 8004354:	20004800 	.word	0x20004800
 8004358:	200047e8 	.word	0x200047e8
 800435c:	20004310 	.word	0x20004310
 8004360:	2000430c 	.word	0x2000430c
 8004364:	200047f0 	.word	0x200047f0
 8004368:	200047f4 	.word	0x200047f4

0800436c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <vTaskSwitchContext+0xa4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <vTaskSwitchContext+0xa8>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004380:	e040      	b.n	8004404 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <vTaskSwitchContext+0xa8>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <vTaskSwitchContext+0xac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e00f      	b.n	80043b0 <vTaskSwitchContext+0x44>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <vTaskSwitchContext+0x3e>
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e7fe      	b.n	80043a8 <vTaskSwitchContext+0x3c>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	491a      	ldr	r1, [pc, #104]	; (800441c <vTaskSwitchContext+0xb0>)
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0e5      	beq.n	8004390 <vTaskSwitchContext+0x24>
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <vTaskSwitchContext+0xb0>)
 80043d0:	4413      	add	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3308      	adds	r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d104      	bne.n	80043f4 <vTaskSwitchContext+0x88>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <vTaskSwitchContext+0xb4>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4a06      	ldr	r2, [pc, #24]	; (8004418 <vTaskSwitchContext+0xac>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20004808 	.word	0x20004808
 8004414:	200047f4 	.word	0x200047f4
 8004418:	200047e8 	.word	0x200047e8
 800441c:	20004310 	.word	0x20004310
 8004420:	2000430c 	.word	0x2000430c

08004424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <vTaskPlaceOnEventList+0x24>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e7fe      	b.n	8004446 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <vTaskPlaceOnEventList+0x44>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3318      	adds	r3, #24
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fe fbfa 	bl	8002c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004456:	2101      	movs	r1, #1
 8004458:	6838      	ldr	r0, [r7, #0]
 800445a:	f000 fa71 	bl	8004940 <prvAddCurrentTaskToDelayedList>
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000430c 	.word	0x2000430c

0800446c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <vTaskPlaceOnEventListRestricted+0x26>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e7fe      	b.n	8004490 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <vTaskPlaceOnEventListRestricted+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3318      	adds	r3, #24
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7fe fbb1 	bl	8002c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	68b8      	ldr	r0, [r7, #8]
 80044b0:	f000 fa46 	bl	8004940 <prvAddCurrentTaskToDelayedList>
	}
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	2000430c 	.word	0x2000430c

080044c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <xTaskRemoveFromEventList+0x2a>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e7fe      	b.n	80044e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3318      	adds	r3, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fbe4 	bl	8002cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <xTaskRemoveFromEventList+0xac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fbdb 	bl	8002cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <xTaskRemoveFromEventList+0xb0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <xTaskRemoveFromEventList+0x5a>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <xTaskRemoveFromEventList+0xb0>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a13      	ldr	r2, [pc, #76]	; (8004574 <xTaskRemoveFromEventList+0xb4>)
 8004528:	441a      	add	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe fb66 	bl	8002c02 <vListInsertEnd>
 8004536:	e005      	b.n	8004544 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3318      	adds	r3, #24
 800453c:	4619      	mov	r1, r3
 800453e:	480e      	ldr	r0, [pc, #56]	; (8004578 <xTaskRemoveFromEventList+0xb8>)
 8004540:	f7fe fb5f 	bl	8002c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <xTaskRemoveFromEventList+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	d905      	bls.n	800455e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <xTaskRemoveFromEventList+0xc0>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e001      	b.n	8004562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20004808 	.word	0x20004808
 8004570:	200047e8 	.word	0x200047e8
 8004574:	20004310 	.word	0x20004310
 8004578:	200047a0 	.word	0x200047a0
 800457c:	2000430c 	.word	0x2000430c
 8004580:	200047f4 	.word	0x200047f4

08004584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <vTaskInternalSetTimeOutState+0x24>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <vTaskInternalSetTimeOutState+0x28>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	200047f8 	.word	0x200047f8
 80045ac:	200047e4 	.word	0x200047e4

080045b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <xTaskCheckForTimeOut+0x24>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e7fe      	b.n	80045d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <xTaskCheckForTimeOut+0x3e>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e7fe      	b.n	80045ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80045ee:	f7fe fcb5 	bl	8002f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <xTaskCheckForTimeOut+0xb8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460a:	d102      	bne.n	8004612 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e023      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <xTaskCheckForTimeOut+0xbc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d007      	beq.n	800462e <xTaskCheckForTimeOut+0x7e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e015      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d20b      	bcs.n	8004650 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff9d 	bl	8004584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e004      	b.n	800465a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800465a:	f7fe fcad 	bl	8002fb8 <vPortExitCritical>

	return xReturn;
 800465e:	69fb      	ldr	r3, [r7, #28]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200047e4 	.word	0x200047e4
 800466c:	200047f8 	.word	0x200047f8

08004670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <vTaskMissedYield+0x14>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	200047f4 	.word	0x200047f4

08004688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004690:	f000 f852 	bl	8004738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <prvIdleTask+0x28>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d9f9      	bls.n	8004690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <prvIdleTask+0x2c>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046ac:	e7f0      	b.n	8004690 <prvIdleTask+0x8>
 80046ae:	bf00      	nop
 80046b0:	20004310 	.word	0x20004310
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e00c      	b.n	80046de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <prvInitialiseTaskLists+0x60>)
 80046d0:	4413      	add	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fa68 	bl	8002ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b37      	cmp	r3, #55	; 0x37
 80046e2:	d9ef      	bls.n	80046c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <prvInitialiseTaskLists+0x64>)
 80046e6:	f7fe fa5f 	bl	8002ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <prvInitialiseTaskLists+0x68>)
 80046ec:	f7fe fa5c 	bl	8002ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <prvInitialiseTaskLists+0x6c>)
 80046f2:	f7fe fa59 	bl	8002ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <prvInitialiseTaskLists+0x70>)
 80046f8:	f7fe fa56 	bl	8002ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <prvInitialiseTaskLists+0x74>)
 80046fe:	f7fe fa53 	bl	8002ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <prvInitialiseTaskLists+0x78>)
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <prvInitialiseTaskLists+0x64>)
 8004706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvInitialiseTaskLists+0x7c>)
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <prvInitialiseTaskLists+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20004310 	.word	0x20004310
 800471c:	20004770 	.word	0x20004770
 8004720:	20004784 	.word	0x20004784
 8004724:	200047a0 	.word	0x200047a0
 8004728:	200047b4 	.word	0x200047b4
 800472c:	200047cc 	.word	0x200047cc
 8004730:	20004798 	.word	0x20004798
 8004734:	2000479c 	.word	0x2000479c

08004738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473e:	e019      	b.n	8004774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004740:	f7fe fc0c 	bl	8002f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <prvCheckTasksWaitingTermination+0x4c>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fab3 	bl	8002cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <prvCheckTasksWaitingTermination+0x50>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3b01      	subs	r3, #1
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <prvCheckTasksWaitingTermination+0x50>)
 800475e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800476a:	f7fe fc25 	bl	8002fb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f80e 	bl	8004790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e1      	bne.n	8004740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200047b4 	.word	0x200047b4
 8004788:	200047e0 	.word	0x200047e0
 800478c:	200047c8 	.word	0x200047c8

08004790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f8ea 	bl	8002980 <vPortFree>
				vPortFree( pxTCB );
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe f8e7 	bl	8002980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b2:	e017      	b.n	80047e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d103      	bne.n	80047c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe f8de 	bl	8002980 <vPortFree>
	}
 80047c4:	e00e      	b.n	80047e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d009      	beq.n	80047e4 <prvDeleteTCB+0x54>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e7fe      	b.n	80047e2 <prvDeleteTCB+0x52>
	}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <prvResetNextTaskUnblockTime+0x38>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvResetNextTaskUnblockTime+0x3c>)
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004804:	e008      	b.n	8004818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <prvResetNextTaskUnblockTime+0x38>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a04      	ldr	r2, [pc, #16]	; (8004828 <prvResetNextTaskUnblockTime+0x3c>)
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20004798 	.word	0x20004798
 8004828:	20004800 	.word	0x20004800

0800482c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <xTaskGetSchedulerState+0x34>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800483a:	2301      	movs	r3, #1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e008      	b.n	8004852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <xTaskGetSchedulerState+0x38>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004848:	2302      	movs	r3, #2
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	e001      	b.n	8004852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004852:	687b      	ldr	r3, [r7, #4]
	}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	200047ec 	.word	0x200047ec
 8004864:	20004808 	.word	0x20004808

08004868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d054      	beq.n	8004928 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <xTaskPriorityDisinherit+0xcc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d009      	beq.n	800489c <xTaskPriorityDisinherit+0x34>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e7fe      	b.n	800489a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <xTaskPriorityDisinherit+0x50>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	e7fe      	b.n	80048b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d02c      	beq.n	8004928 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d128      	bne.n	8004928 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe f9ee 	bl	8002cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <xTaskPriorityDisinherit+0xd0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <xTaskPriorityDisinherit+0xa0>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <xTaskPriorityDisinherit+0xd0>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <xTaskPriorityDisinherit+0xd4>)
 8004916:	441a      	add	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fe f96f 	bl	8002c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	2000430c 	.word	0x2000430c
 8004938:	200047e8 	.word	0x200047e8
 800493c:	20004310 	.word	0x20004310

08004940 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe f9b0 	bl	8002cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004962:	d10a      	bne.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4819      	ldr	r0, [pc, #100]	; (80049d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004974:	f7fe f945 	bl	8002c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004978:	e026      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	429a      	cmp	r2, r3
 8004990:	d209      	bcs.n	80049a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe f953 	bl	8002c4a <vListInsert>
}
 80049a4:	e010      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe f949 	bl	8002c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d202      	bcs.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200047e4 	.word	0x200047e4
 80049d4:	2000430c 	.word	0x2000430c
 80049d8:	200047cc 	.word	0x200047cc
 80049dc:	2000479c 	.word	0x2000479c
 80049e0:	20004798 	.word	0x20004798
 80049e4:	20004800 	.word	0x20004800

080049e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f2:	f000 faff 	bl	8004ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <xTimerCreateTimerTask+0x80>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d021      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a06:	1d3a      	adds	r2, r7, #4
 8004a08:	f107 0108 	add.w	r1, r7, #8
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd fed9 	bl	80027c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2302      	movs	r3, #2
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	460a      	mov	r2, r1
 8004a28:	4910      	ldr	r1, [pc, #64]	; (8004a6c <xTimerCreateTimerTask+0x84>)
 8004a2a:	4811      	ldr	r0, [pc, #68]	; (8004a70 <xTimerCreateTimerTask+0x88>)
 8004a2c:	f7ff f884 	bl	8003b38 <xTaskCreateStatic>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <xTimerCreateTimerTask+0x74>
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e7fe      	b.n	8004a5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000483c 	.word	0x2000483c
 8004a6c:	08005120 	.word	0x08005120
 8004a70:	08004ba9 	.word	0x08004ba9
 8004a74:	20004840 	.word	0x20004840

08004a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <xTimerGenericCommand+0x2c>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	e7fe      	b.n	8004aa2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02a      	beq.n	8004b02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	dc18      	bgt.n	8004af0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004abe:	f7ff feb5 	bl	800482c <xTaskGetSchedulerState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d109      	bne.n	8004adc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f107 0110 	add.w	r1, r7, #16
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	f7fe fc5a 	bl	800338c <xQueueGenericSend>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8004ada:	e012      	b.n	8004b02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	f107 0110 	add.w	r1, r7, #16
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f7fe fc50 	bl	800338c <xQueueGenericSend>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24
 8004aee:	e008      	b.n	8004b02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <xTimerGenericCommand+0x94>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	f107 0110 	add.w	r1, r7, #16
 8004af8:	2300      	movs	r3, #0
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	f7fe fd40 	bl	8003580 <xQueueGenericSendFromISR>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000483c 	.word	0x2000483c

08004b10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1a:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <prvProcessExpiredTimer+0x94>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe f8c7 	bl	8002cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d021      	beq.n	8004b80 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	18d1      	adds	r1, r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	6978      	ldr	r0, [r7, #20]
 8004b4a:	f000 f8d1 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01e      	beq.n	8004b92 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff8a 	bl	8004a78 <xTimerGenericCommand>
 8004b64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d112      	bne.n	8004b92 <prvProcessExpiredTimer+0x82>
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e7fe      	b.n	8004b7e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	6978      	ldr	r0, [r7, #20]
 8004b98:	4798      	blx	r3
}
 8004b9a:	bf00      	nop
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20004834 	.word	0x20004834

08004ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 f857 	bl	8004c68 <prvGetNextExpireTime>
 8004bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f803 	bl	8004bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bc6:	f000 f8d5 	bl	8004d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bca:	e7f1      	b.n	8004bb0 <prvTimerTask+0x8>

08004bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bd6:	f7ff fa57 	bl	8004088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f866 	bl	8004cb0 <prvSampleTimeNow>
 8004be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d130      	bne.n	8004c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d806      	bhi.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bfa:	f7ff fa53 	bl	80040a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff85 	bl	8004b10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c06:	e024      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <prvProcessTimerOrBlockTask+0x90>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <prvProcessTimerOrBlockTask+0x50>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <prvProcessTimerOrBlockTask+0x52>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <prvProcessTimerOrBlockTask+0x94>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fe ff4f 	bl	8003ad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f7ff fa37 	bl	80040a4 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvProcessTimerOrBlockTask+0x98>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
}
 8004c4c:	e001      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c4e:	f7ff fa29 	bl	80040a4 <xTaskResumeAll>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20004838 	.word	0x20004838
 8004c60:	2000483c 	.word	0x2000483c
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <prvGetNextExpireTime+0x16>
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	e000      	b.n	8004c80 <prvGetNextExpireTime+0x18>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e001      	b.n	8004c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20004834 	.word	0x20004834

08004cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cb8:	f7ff fa90 	bl	80041dc <xTaskGetTickCount>
 8004cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d205      	bcs.n	8004cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cc8:	f000 f930 	bl	8004f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20004844 	.word	0x20004844

08004cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d812      	bhi.n	8004d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e01b      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <prvInsertTimerInActiveList+0x7c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fd ff88 	bl	8002c4a <vListInsert>
 8004d3a:	e012      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d206      	bcs.n	8004d52 <prvInsertTimerInActiveList+0x62>
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e007      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <prvInsertTimerInActiveList+0x80>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fd ff74 	bl	8002c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d62:	697b      	ldr	r3, [r7, #20]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20004838 	.word	0x20004838
 8004d70:	20004834 	.word	0x20004834

08004d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	; 0x38
 8004d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7a:	e0c6      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da17      	bge.n	8004db2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	3304      	adds	r3, #4
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <prvProcessReceivedCommands+0x2e>
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e7fe      	b.n	8004da0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da8:	6850      	ldr	r0, [r2, #4]
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f2c0 80a7 	blt.w	8004f08 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd ff76 	bl	8002cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff6c 	bl	8004cb0 <prvSampleTimeNow>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	f200 8094 	bhi.w	8004f0a <prvProcessReceivedCommands+0x196>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <prvProcessReceivedCommands+0x74>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e11 	.word	0x08004e11
 8004df4:	08004e83 	.word	0x08004e83
 8004df8:	08004e97 	.word	0x08004e97
 8004dfc:	08004edf 	.word	0x08004edf
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e11 	.word	0x08004e11
 8004e08:	08004e83 	.word	0x08004e83
 8004e0c:	08004e97 	.word	0x08004e97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	18d1      	adds	r1, r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e30:	f7ff ff5e 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d067      	beq.n	8004f0a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05c      	beq.n	8004f0a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	441a      	add	r2, r3
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e62:	f7ff fe09 	bl	8004a78 <xTimerGenericCommand>
 8004e66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d14d      	bne.n	8004f0a <prvProcessReceivedCommands+0x196>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e7fe      	b.n	8004e80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e94:	e039      	b.n	8004f0a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <prvProcessReceivedCommands+0x156>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e7fe      	b.n	8004ec8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	18d1      	adds	r1, r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed8:	f7ff ff0a 	bl	8004cf0 <prvInsertTimerInActiveList>
					break;
 8004edc:	e015      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f7fd fd47 	bl	8002980 <vPortFree>
 8004ef2:	e00a      	b.n	8004f0a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f06:	e000      	b.n	8004f0a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <prvProcessReceivedCommands+0x1b4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	1d39      	adds	r1, r7, #4
 8004f10:	2200      	movs	r2, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fbc8 	bl	80036a8 <xQueueReceive>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f47f af2e 	bne.w	8004d7c <prvProcessReceivedCommands+0x8>
	}
}
 8004f20:	bf00      	nop
 8004f22:	3730      	adds	r7, #48	; 0x30
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	2000483c 	.word	0x2000483c

08004f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f32:	e047      	b.n	8004fc4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd feb5 	bl	8002cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90e      	bls.n	8004f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fd fe5a 	bl	8002c4a <vListInsert>
 8004f96:	e015      	b.n	8004fc4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fd68 	bl	8004a78 <xTimerGenericCommand>
 8004fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <prvSwitchTimerLists+0x98>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	e7fe      	b.n	8004fc2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1b2      	bne.n	8004f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <prvSwitchTimerLists+0xc4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <prvSwitchTimerLists+0xc0>)
 8004fda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <prvSwitchTimerLists+0xc4>)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6013      	str	r3, [r2, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20004834 	.word	0x20004834
 8004ff0:	20004838 	.word	0x20004838

08004ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ffa:	f7fd ffaf 	bl	8002f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d120      	bne.n	8005048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005006:	4814      	ldr	r0, [pc, #80]	; (8005058 <prvCheckForValidListAndQueue+0x64>)
 8005008:	f7fd fdce 	bl	8002ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800500c:	4813      	ldr	r0, [pc, #76]	; (800505c <prvCheckForValidListAndQueue+0x68>)
 800500e:	f7fd fdcb 	bl	8002ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <prvCheckForValidListAndQueue+0x6c>)
 8005014:	4a10      	ldr	r2, [pc, #64]	; (8005058 <prvCheckForValidListAndQueue+0x64>)
 8005016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <prvCheckForValidListAndQueue+0x70>)
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <prvCheckForValidListAndQueue+0x68>)
 800501c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <prvCheckForValidListAndQueue+0x74>)
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <prvCheckForValidListAndQueue+0x78>)
 8005026:	2110      	movs	r1, #16
 8005028:	200a      	movs	r0, #10
 800502a:	f7fe f919 	bl	8003260 <xQueueGenericCreateStatic>
 800502e:	4602      	mov	r2, r0
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <prvCheckForValidListAndQueue+0x60>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	490b      	ldr	r1, [pc, #44]	; (8005070 <prvCheckForValidListAndQueue+0x7c>)
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fd1c 	bl	8003a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005048:	f7fd ffb6 	bl	8002fb8 <vPortExitCritical>
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000483c 	.word	0x2000483c
 8005058:	2000480c 	.word	0x2000480c
 800505c:	20004820 	.word	0x20004820
 8005060:	20004834 	.word	0x20004834
 8005064:	20004838 	.word	0x20004838
 8005068:	200048e8 	.word	0x200048e8
 800506c:	20004848 	.word	0x20004848
 8005070:	08005128 	.word	0x08005128

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4e0d      	ldr	r6, [pc, #52]	; (80050ac <__libc_init_array+0x38>)
 8005078:	4c0d      	ldr	r4, [pc, #52]	; (80050b0 <__libc_init_array+0x3c>)
 800507a:	1ba4      	subs	r4, r4, r6
 800507c:	10a4      	asrs	r4, r4, #2
 800507e:	2500      	movs	r5, #0
 8005080:	42a5      	cmp	r5, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4e0b      	ldr	r6, [pc, #44]	; (80050b4 <__libc_init_array+0x40>)
 8005086:	4c0c      	ldr	r4, [pc, #48]	; (80050b8 <__libc_init_array+0x44>)
 8005088:	f000 f82c 	bl	80050e4 <_init>
 800508c:	1ba4      	subs	r4, r4, r6
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	2500      	movs	r5, #0
 8005092:	42a5      	cmp	r5, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800509c:	4798      	blx	r3
 800509e:	3501      	adds	r5, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050a6:	4798      	blx	r3
 80050a8:	3501      	adds	r5, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	08005188 	.word	0x08005188
 80050b0:	08005188 	.word	0x08005188
 80050b4:	08005188 	.word	0x08005188
 80050b8:	0800518c 	.word	0x0800518c

080050bc <memcpy>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	1e43      	subs	r3, r0, #1
 80050c0:	440a      	add	r2, r1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	d100      	bne.n	80050c8 <memcpy+0xc>
 80050c6:	bd10      	pop	{r4, pc}
 80050c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d0:	e7f7      	b.n	80050c2 <memcpy+0x6>

080050d2 <memset>:
 80050d2:	4402      	add	r2, r0
 80050d4:	4603      	mov	r3, r0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d100      	bne.n	80050dc <memset+0xa>
 80050da:	4770      	bx	lr
 80050dc:	f803 1b01 	strb.w	r1, [r3], #1
 80050e0:	e7f9      	b.n	80050d6 <memset+0x4>
	...

080050e4 <_init>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr

080050f0 <_fini>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr
