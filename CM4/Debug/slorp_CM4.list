
slorp_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004394  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08104634  08104634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081046e0  081046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081046e4  081046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  081046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049c4  10000014  081046fc  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100049d8  081046fc  000249d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020f49  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003621  00000000  00000000  00040f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001410  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012c8  00000000  00000000  000459c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039592  00000000  00000000  00046c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011676  00000000  00000000  0008021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00182479  00000000  00000000  00091890  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00213d09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000053d4  00000000  00000000  00213d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000014 	.word	0x10000014
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810461c 	.word	0x0810461c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000018 	.word	0x10000018
 81002dc:	0810461c 	.word	0x0810461c

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100318:	b580      	push	{r7, lr}
 810031a:	b082      	sub	sp, #8
 810031c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810031e:	4b29      	ldr	r3, [pc, #164]	; (81003c4 <main+0xac>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	4a27      	ldr	r2, [pc, #156]	; (81003c4 <main+0xac>)
 8100326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810032a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810032e:	4b25      	ldr	r3, [pc, #148]	; (81003c4 <main+0xac>)
 8100330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100338:	607b      	str	r3, [r7, #4]
 810033a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810033c:	2001      	movs	r0, #1
 810033e:	f000 fd11 	bl	8100d64 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100342:	f000 fd97 	bl	8100e74 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100346:	2201      	movs	r2, #1
 8100348:	2102      	movs	r1, #2
 810034a:	2000      	movs	r0, #0
 810034c:	f000 fd1c 	bl	8100d88 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100350:	4b1d      	ldr	r3, [pc, #116]	; (81003c8 <main+0xb0>)
 8100352:	681b      	ldr	r3, [r3, #0]
 8100354:	091b      	lsrs	r3, r3, #4
 8100356:	f003 030f 	and.w	r3, r3, #15
 810035a:	2b07      	cmp	r3, #7
 810035c:	d108      	bne.n	8100370 <main+0x58>
 810035e:	4b1b      	ldr	r3, [pc, #108]	; (81003cc <main+0xb4>)
 8100360:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100364:	4a19      	ldr	r2, [pc, #100]	; (81003cc <main+0xb4>)
 8100366:	f043 0301 	orr.w	r3, r3, #1
 810036a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810036e:	e007      	b.n	8100380 <main+0x68>
 8100370:	4b16      	ldr	r3, [pc, #88]	; (81003cc <main+0xb4>)
 8100372:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100376:	4a15      	ldr	r2, [pc, #84]	; (81003cc <main+0xb4>)
 8100378:	f043 0301 	orr.w	r3, r3, #1
 810037c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100380:	f000 f9a6 	bl	81006d0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100384:	f000 f834 	bl	81003f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100388:	f001 fa1e 	bl	81017c8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of periodReceive */
  periodReceiveHandle = osMessageQueueNew (1, sizeof(uint16_t), &periodReceive_attributes);
 810038c:	4a10      	ldr	r2, [pc, #64]	; (81003d0 <main+0xb8>)
 810038e:	2102      	movs	r1, #2
 8100390:	2001      	movs	r0, #1
 8100392:	f001 fb57 	bl	8101a44 <osMessageQueueNew>
 8100396:	4602      	mov	r2, r0
 8100398:	4b0e      	ldr	r3, [pc, #56]	; (81003d4 <main+0xbc>)
 810039a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810039c:	4a0e      	ldr	r2, [pc, #56]	; (81003d8 <main+0xc0>)
 810039e:	2100      	movs	r1, #0
 81003a0:	480e      	ldr	r0, [pc, #56]	; (81003dc <main+0xc4>)
 81003a2:	f001 fa7b 	bl	810189c <osThreadNew>
 81003a6:	4602      	mov	r2, r0
 81003a8:	4b0d      	ldr	r3, [pc, #52]	; (81003e0 <main+0xc8>)
 81003aa:	601a      	str	r2, [r3, #0]

  /* creation of blink */
  blinkHandle = osThreadNew(doBlink, NULL, &blink_attributes);
 81003ac:	4a0d      	ldr	r2, [pc, #52]	; (81003e4 <main+0xcc>)
 81003ae:	2100      	movs	r1, #0
 81003b0:	480d      	ldr	r0, [pc, #52]	; (81003e8 <main+0xd0>)
 81003b2:	f001 fa73 	bl	810189c <osThreadNew>
 81003b6:	4602      	mov	r2, r0
 81003b8:	4b0c      	ldr	r3, [pc, #48]	; (81003ec <main+0xd4>)
 81003ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81003bc:	f001 fa38 	bl	8101830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003c0:	e7fe      	b.n	81003c0 <main+0xa8>
 81003c2:	bf00      	nop
 81003c4:	58024400 	.word	0x58024400
 81003c8:	e000ed00 	.word	0xe000ed00
 81003cc:	58026400 	.word	0x58026400
 81003d0:	081046c8 	.word	0x081046c8
 81003d4:	10004940 	.word	0x10004940
 81003d8:	08104680 	.word	0x08104680
 81003dc:	081004a5 	.word	0x081004a5
 81003e0:	1000493c 	.word	0x1000493c
 81003e4:	081046a4 	.word	0x081046a4
 81003e8:	081004cd 	.word	0x081004cd
 81003ec:	10004944 	.word	0x10004944

081003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b088      	sub	sp, #32
 81003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003f6:	f107 030c 	add.w	r3, r7, #12
 81003fa:	2200      	movs	r2, #0
 81003fc:	601a      	str	r2, [r3, #0]
 81003fe:	605a      	str	r2, [r3, #4]
 8100400:	609a      	str	r2, [r3, #8]
 8100402:	60da      	str	r2, [r3, #12]
 8100404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100406:	4b24      	ldr	r3, [pc, #144]	; (8100498 <MX_GPIO_Init+0xa8>)
 8100408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810040c:	4a22      	ldr	r2, [pc, #136]	; (8100498 <MX_GPIO_Init+0xa8>)
 810040e:	f043 0302 	orr.w	r3, r3, #2
 8100412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100416:	4b20      	ldr	r3, [pc, #128]	; (8100498 <MX_GPIO_Init+0xa8>)
 8100418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810041c:	f003 0302 	and.w	r3, r3, #2
 8100420:	60bb      	str	r3, [r7, #8]
 8100422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100424:	4b1c      	ldr	r3, [pc, #112]	; (8100498 <MX_GPIO_Init+0xa8>)
 8100426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810042a:	4a1b      	ldr	r2, [pc, #108]	; (8100498 <MX_GPIO_Init+0xa8>)
 810042c:	f043 0310 	orr.w	r3, r3, #16
 8100430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100434:	4b18      	ldr	r3, [pc, #96]	; (8100498 <MX_GPIO_Init+0xa8>)
 8100436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810043a:	f003 0310 	and.w	r3, r3, #16
 810043e:	607b      	str	r3, [r7, #4]
 8100440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100442:	2200      	movs	r2, #0
 8100444:	2101      	movs	r1, #1
 8100446:	4815      	ldr	r0, [pc, #84]	; (810049c <MX_GPIO_Init+0xac>)
 8100448:	f000 fc58 	bl	8100cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810044c:	2200      	movs	r2, #0
 810044e:	2102      	movs	r1, #2
 8100450:	4813      	ldr	r0, [pc, #76]	; (81004a0 <MX_GPIO_Init+0xb0>)
 8100452:	f000 fc53 	bl	8100cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8100456:	2301      	movs	r3, #1
 8100458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810045a:	2301      	movs	r3, #1
 810045c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 810045e:	2302      	movs	r3, #2
 8100460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100462:	2300      	movs	r3, #0
 8100464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8100466:	f107 030c 	add.w	r3, r7, #12
 810046a:	4619      	mov	r1, r3
 810046c:	480b      	ldr	r0, [pc, #44]	; (810049c <MX_GPIO_Init+0xac>)
 810046e:	f000 fa95 	bl	810099c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100472:	2302      	movs	r3, #2
 8100474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100476:	2301      	movs	r3, #1
 8100478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 810047a:	2302      	movs	r3, #2
 810047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810047e:	2300      	movs	r3, #0
 8100480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100482:	f107 030c 	add.w	r3, r7, #12
 8100486:	4619      	mov	r1, r3
 8100488:	4805      	ldr	r0, [pc, #20]	; (81004a0 <MX_GPIO_Init+0xb0>)
 810048a:	f000 fa87 	bl	810099c <HAL_GPIO_Init>

}
 810048e:	bf00      	nop
 8100490:	3720      	adds	r7, #32
 8100492:	46bd      	mov	sp, r7
 8100494:	bd80      	pop	{r7, pc}
 8100496:	bf00      	nop
 8100498:	58024400 	.word	0x58024400
 810049c:	58020400 	.word	0x58020400
 81004a0:	58021000 	.word	0x58021000

081004a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81004a4:	b580      	push	{r7, lr}
 81004a6:	b082      	sub	sp, #8
 81004a8:	af00      	add	r7, sp, #0
 81004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 81004ac:	2001      	movs	r0, #1
 81004ae:	f001 fa9b 	bl	81019e8 <osDelay>
    osMessageQueueGet(periodReceiveHandle, &period, 0, 5000);
 81004b2:	4b04      	ldr	r3, [pc, #16]	; (81004c4 <StartDefaultTask+0x20>)
 81004b4:	6818      	ldr	r0, [r3, #0]
 81004b6:	f241 3388 	movw	r3, #5000	; 0x1388
 81004ba:	2200      	movs	r2, #0
 81004bc:	4902      	ldr	r1, [pc, #8]	; (81004c8 <StartDefaultTask+0x24>)
 81004be:	f001 fb47 	bl	8101b50 <osMessageQueueGet>
    osDelay(1);
 81004c2:	e7f3      	b.n	81004ac <StartDefaultTask+0x8>
 81004c4:	10004940 	.word	0x10004940
 81004c8:	10000030 	.word	0x10000030

081004cc <doBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_doBlink */
void doBlink(void *argument)
{
 81004cc:	b580      	push	{r7, lr}
 81004ce:	b082      	sub	sp, #8
 81004d0:	af00      	add	r7, sp, #0
 81004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN doBlink */
  /* Infinite loop */
  for(;;)
  {
	  if (period != 0) {
 81004d4:	4b0a      	ldr	r3, [pc, #40]	; (8100500 <doBlink+0x34>)
 81004d6:	881b      	ldrh	r3, [r3, #0]
 81004d8:	2b00      	cmp	r3, #0
 81004da:	d009      	beq.n	81004f0 <doBlink+0x24>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 81004dc:	2101      	movs	r1, #1
 81004de:	4809      	ldr	r0, [pc, #36]	; (8100504 <doBlink+0x38>)
 81004e0:	f000 fc25 	bl	8100d2e <HAL_GPIO_TogglePin>
		  osDelay(period);
 81004e4:	4b06      	ldr	r3, [pc, #24]	; (8100500 <doBlink+0x34>)
 81004e6:	881b      	ldrh	r3, [r3, #0]
 81004e8:	4618      	mov	r0, r3
 81004ea:	f001 fa7d 	bl	81019e8 <osDelay>
 81004ee:	e7f1      	b.n	81004d4 <doBlink+0x8>
	  } else {
          HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 81004f0:	2102      	movs	r1, #2
 81004f2:	4805      	ldr	r0, [pc, #20]	; (8100508 <doBlink+0x3c>)
 81004f4:	f000 fc1b 	bl	8100d2e <HAL_GPIO_TogglePin>
		  osDelay(100);
 81004f8:	2064      	movs	r0, #100	; 0x64
 81004fa:	f001 fa75 	bl	81019e8 <osDelay>
	  if (period != 0) {
 81004fe:	e7e9      	b.n	81004d4 <doBlink+0x8>
 8100500:	10000030 	.word	0x10000030
 8100504:	58020400 	.word	0x58020400
 8100508:	58021000 	.word	0x58021000

0810050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810050c:	b580      	push	{r7, lr}
 810050e:	b082      	sub	sp, #8
 8100510:	af00      	add	r7, sp, #0
 8100512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8100514:	687b      	ldr	r3, [r7, #4]
 8100516:	681b      	ldr	r3, [r3, #0]
 8100518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810051c:	d101      	bne.n	8100522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810051e:	f000 f935 	bl	810078c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100522:	bf00      	nop
 8100524:	3708      	adds	r7, #8
 8100526:	46bd      	mov	sp, r7
 8100528:	bd80      	pop	{r7, pc}
	...

0810052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810052c:	b580      	push	{r7, lr}
 810052e:	b082      	sub	sp, #8
 8100530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100532:	4b0c      	ldr	r3, [pc, #48]	; (8100564 <HAL_MspInit+0x38>)
 8100534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100538:	4a0a      	ldr	r2, [pc, #40]	; (8100564 <HAL_MspInit+0x38>)
 810053a:	f043 0302 	orr.w	r3, r3, #2
 810053e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100542:	4b08      	ldr	r3, [pc, #32]	; (8100564 <HAL_MspInit+0x38>)
 8100544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100548:	f003 0302 	and.w	r3, r3, #2
 810054c:	607b      	str	r3, [r7, #4]
 810054e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100550:	2200      	movs	r2, #0
 8100552:	210f      	movs	r1, #15
 8100554:	f06f 0001 	mvn.w	r0, #1
 8100558:	f000 f9e4 	bl	8100924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810055c:	bf00      	nop
 810055e:	3708      	adds	r7, #8
 8100560:	46bd      	mov	sp, r7
 8100562:	bd80      	pop	{r7, pc}
 8100564:	58024400 	.word	0x58024400

08100568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100568:	b580      	push	{r7, lr}
 810056a:	b090      	sub	sp, #64	; 0x40
 810056c:	af00      	add	r7, sp, #0
 810056e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100570:	687b      	ldr	r3, [r7, #4]
 8100572:	2b0f      	cmp	r3, #15
 8100574:	d827      	bhi.n	81005c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8100576:	2200      	movs	r2, #0
 8100578:	6879      	ldr	r1, [r7, #4]
 810057a:	201c      	movs	r0, #28
 810057c:	f000 f9d2 	bl	8100924 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8100580:	201c      	movs	r0, #28
 8100582:	f000 f9e9 	bl	8100958 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100586:	4a29      	ldr	r2, [pc, #164]	; (810062c <HAL_InitTick+0xc4>)
 8100588:	687b      	ldr	r3, [r7, #4]
 810058a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 810058c:	4b28      	ldr	r3, [pc, #160]	; (8100630 <HAL_InitTick+0xc8>)
 810058e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100592:	4a27      	ldr	r2, [pc, #156]	; (8100630 <HAL_InitTick+0xc8>)
 8100594:	f043 0301 	orr.w	r3, r3, #1
 8100598:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810059c:	4b24      	ldr	r3, [pc, #144]	; (8100630 <HAL_InitTick+0xc8>)
 810059e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81005a2:	f003 0301 	and.w	r3, r3, #1
 81005a6:	60fb      	str	r3, [r7, #12]
 81005a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81005aa:	f107 0210 	add.w	r2, r7, #16
 81005ae:	f107 0314 	add.w	r3, r7, #20
 81005b2:	4611      	mov	r1, r2
 81005b4:	4618      	mov	r0, r3
 81005b6:	f000 fe25 	bl	8101204 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81005ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81005be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81005c0:	2b00      	cmp	r3, #0
 81005c2:	d106      	bne.n	81005d2 <HAL_InitTick+0x6a>
 81005c4:	e001      	b.n	81005ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 81005c6:	2301      	movs	r3, #1
 81005c8:	e02c      	b.n	8100624 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81005ca:	f000 fe05 	bl	81011d8 <HAL_RCC_GetPCLK1Freq>
 81005ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 81005d0:	e004      	b.n	81005dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81005d2:	f000 fe01 	bl	81011d8 <HAL_RCC_GetPCLK1Freq>
 81005d6:	4603      	mov	r3, r0
 81005d8:	005b      	lsls	r3, r3, #1
 81005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81005de:	4a15      	ldr	r2, [pc, #84]	; (8100634 <HAL_InitTick+0xcc>)
 81005e0:	fba2 2303 	umull	r2, r3, r2, r3
 81005e4:	0c9b      	lsrs	r3, r3, #18
 81005e6:	3b01      	subs	r3, #1
 81005e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 81005ea:	4b13      	ldr	r3, [pc, #76]	; (8100638 <HAL_InitTick+0xd0>)
 81005ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81005f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 81005f2:	4b11      	ldr	r3, [pc, #68]	; (8100638 <HAL_InitTick+0xd0>)
 81005f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 81005f8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 81005fa:	4a0f      	ldr	r2, [pc, #60]	; (8100638 <HAL_InitTick+0xd0>)
 81005fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81005fe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8100600:	4b0d      	ldr	r3, [pc, #52]	; (8100638 <HAL_InitTick+0xd0>)
 8100602:	2200      	movs	r2, #0
 8100604:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100606:	4b0c      	ldr	r3, [pc, #48]	; (8100638 <HAL_InitTick+0xd0>)
 8100608:	2200      	movs	r2, #0
 810060a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 810060c:	480a      	ldr	r0, [pc, #40]	; (8100638 <HAL_InitTick+0xd0>)
 810060e:	f000 fe3b 	bl	8101288 <HAL_TIM_Base_Init>
 8100612:	4603      	mov	r3, r0
 8100614:	2b00      	cmp	r3, #0
 8100616:	d104      	bne.n	8100622 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8100618:	4807      	ldr	r0, [pc, #28]	; (8100638 <HAL_InitTick+0xd0>)
 810061a:	f000 fe97 	bl	810134c <HAL_TIM_Base_Start_IT>
 810061e:	4603      	mov	r3, r0
 8100620:	e000      	b.n	8100624 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8100622:	2301      	movs	r3, #1
}
 8100624:	4618      	mov	r0, r3
 8100626:	3740      	adds	r7, #64	; 0x40
 8100628:	46bd      	mov	sp, r7
 810062a:	bd80      	pop	{r7, pc}
 810062c:	10000008 	.word	0x10000008
 8100630:	58024400 	.word	0x58024400
 8100634:	431bde83 	.word	0x431bde83
 8100638:	10004948 	.word	0x10004948

0810063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810063c:	b480      	push	{r7}
 810063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100640:	e7fe      	b.n	8100640 <NMI_Handler+0x4>

08100642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100642:	b480      	push	{r7}
 8100644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100646:	e7fe      	b.n	8100646 <HardFault_Handler+0x4>

08100648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100648:	b480      	push	{r7}
 810064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810064c:	e7fe      	b.n	810064c <MemManage_Handler+0x4>

0810064e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810064e:	b480      	push	{r7}
 8100650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100652:	e7fe      	b.n	8100652 <BusFault_Handler+0x4>

08100654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100654:	b480      	push	{r7}
 8100656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100658:	e7fe      	b.n	8100658 <UsageFault_Handler+0x4>

0810065a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810065a:	b480      	push	{r7}
 810065c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810065e:	bf00      	nop
 8100660:	46bd      	mov	sp, r7
 8100662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100666:	4770      	bx	lr

08100668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8100668:	b580      	push	{r7, lr}
 810066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810066c:	4802      	ldr	r0, [pc, #8]	; (8100678 <TIM2_IRQHandler+0x10>)
 810066e:	f000 fea3 	bl	81013b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8100672:	bf00      	nop
 8100674:	bd80      	pop	{r7, pc}
 8100676:	bf00      	nop
 8100678:	10004948 	.word	0x10004948

0810067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 810067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81006b4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8100680:	f7ff fe2e 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100684:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100686:	e003      	b.n	8100690 <LoopCopyDataInit>

08100688 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100688:	4b0b      	ldr	r3, [pc, #44]	; (81006b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 810068a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 810068c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810068e:	3104      	adds	r1, #4

08100690 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100690:	480a      	ldr	r0, [pc, #40]	; (81006bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8100692:	4b0b      	ldr	r3, [pc, #44]	; (81006c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8100694:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100696:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100698:	d3f6      	bcc.n	8100688 <CopyDataInit>
  ldr  r2, =_sbss
 810069a:	4a0a      	ldr	r2, [pc, #40]	; (81006c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 810069c:	e002      	b.n	81006a4 <LoopFillZerobss>

0810069e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810069e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81006a0:	f842 3b04 	str.w	r3, [r2], #4

081006a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81006a4:	4b08      	ldr	r3, [pc, #32]	; (81006c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 81006a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81006a8:	d3f9      	bcc.n	810069e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 81006aa:	f003 ff7f 	bl	81045ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81006ae:	f7ff fe33 	bl	8100318 <main>
  bx  lr    
 81006b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81006b4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81006b8:	081046e8 	.word	0x081046e8
  ldr  r0, =_sdata
 81006bc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81006c0:	10000014 	.word	0x10000014
  ldr  r2, =_sbss
 81006c4:	10000014 	.word	0x10000014
  ldr  r3, = _ebss
 81006c8:	100049d8 	.word	0x100049d8

081006cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81006cc:	e7fe      	b.n	81006cc <ADC3_IRQHandler>
	...

081006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b082      	sub	sp, #8
 81006d4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81006d6:	4b28      	ldr	r3, [pc, #160]	; (8100778 <HAL_Init+0xa8>)
 81006d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81006dc:	4a26      	ldr	r2, [pc, #152]	; (8100778 <HAL_Init+0xa8>)
 81006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81006e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81006e6:	4b24      	ldr	r3, [pc, #144]	; (8100778 <HAL_Init+0xa8>)
 81006e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81006f0:	603b      	str	r3, [r7, #0]
 81006f2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81006f4:	4b21      	ldr	r3, [pc, #132]	; (810077c <HAL_Init+0xac>)
 81006f6:	681b      	ldr	r3, [r3, #0]
 81006f8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81006fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100700:	4a1e      	ldr	r2, [pc, #120]	; (810077c <HAL_Init+0xac>)
 8100702:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100706:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100708:	4b1c      	ldr	r3, [pc, #112]	; (810077c <HAL_Init+0xac>)
 810070a:	681b      	ldr	r3, [r3, #0]
 810070c:	4a1b      	ldr	r2, [pc, #108]	; (810077c <HAL_Init+0xac>)
 810070e:	f043 0301 	orr.w	r3, r3, #1
 8100712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100714:	2003      	movs	r0, #3
 8100716:	f000 f8fa 	bl	810090e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810071a:	f000 fbb9 	bl	8100e90 <HAL_RCC_GetSysClockFreq>
 810071e:	4601      	mov	r1, r0
 8100720:	4b15      	ldr	r3, [pc, #84]	; (8100778 <HAL_Init+0xa8>)
 8100722:	699b      	ldr	r3, [r3, #24]
 8100724:	0a1b      	lsrs	r3, r3, #8
 8100726:	f003 030f 	and.w	r3, r3, #15
 810072a:	4a15      	ldr	r2, [pc, #84]	; (8100780 <HAL_Init+0xb0>)
 810072c:	5cd3      	ldrb	r3, [r2, r3]
 810072e:	f003 031f 	and.w	r3, r3, #31
 8100732:	fa21 f303 	lsr.w	r3, r1, r3
 8100736:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100738:	4b0f      	ldr	r3, [pc, #60]	; (8100778 <HAL_Init+0xa8>)
 810073a:	699b      	ldr	r3, [r3, #24]
 810073c:	f003 030f 	and.w	r3, r3, #15
 8100740:	4a0f      	ldr	r2, [pc, #60]	; (8100780 <HAL_Init+0xb0>)
 8100742:	5cd3      	ldrb	r3, [r2, r3]
 8100744:	f003 031f 	and.w	r3, r3, #31
 8100748:	687a      	ldr	r2, [r7, #4]
 810074a:	fa22 f303 	lsr.w	r3, r2, r3
 810074e:	4a0d      	ldr	r2, [pc, #52]	; (8100784 <HAL_Init+0xb4>)
 8100750:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100752:	4b0c      	ldr	r3, [pc, #48]	; (8100784 <HAL_Init+0xb4>)
 8100754:	681b      	ldr	r3, [r3, #0]
 8100756:	4a0c      	ldr	r2, [pc, #48]	; (8100788 <HAL_Init+0xb8>)
 8100758:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810075a:	2000      	movs	r0, #0
 810075c:	f7ff ff04 	bl	8100568 <HAL_InitTick>
 8100760:	4603      	mov	r3, r0
 8100762:	2b00      	cmp	r3, #0
 8100764:	d001      	beq.n	810076a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100766:	2301      	movs	r3, #1
 8100768:	e002      	b.n	8100770 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810076a:	f7ff fedf 	bl	810052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810076e:	2300      	movs	r3, #0
}
 8100770:	4618      	mov	r0, r3
 8100772:	3708      	adds	r7, #8
 8100774:	46bd      	mov	sp, r7
 8100776:	bd80      	pop	{r7, pc}
 8100778:	58024400 	.word	0x58024400
 810077c:	40024400 	.word	0x40024400
 8100780:	08104670 	.word	0x08104670
 8100784:	10000004 	.word	0x10000004
 8100788:	10000000 	.word	0x10000000

0810078c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100790:	4b06      	ldr	r3, [pc, #24]	; (81007ac <HAL_IncTick+0x20>)
 8100792:	781b      	ldrb	r3, [r3, #0]
 8100794:	461a      	mov	r2, r3
 8100796:	4b06      	ldr	r3, [pc, #24]	; (81007b0 <HAL_IncTick+0x24>)
 8100798:	681b      	ldr	r3, [r3, #0]
 810079a:	4413      	add	r3, r2
 810079c:	4a04      	ldr	r2, [pc, #16]	; (81007b0 <HAL_IncTick+0x24>)
 810079e:	6013      	str	r3, [r2, #0]
}
 81007a0:	bf00      	nop
 81007a2:	46bd      	mov	sp, r7
 81007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a8:	4770      	bx	lr
 81007aa:	bf00      	nop
 81007ac:	1000000c 	.word	0x1000000c
 81007b0:	10004994 	.word	0x10004994

081007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007b4:	b480      	push	{r7}
 81007b6:	b085      	sub	sp, #20
 81007b8:	af00      	add	r7, sp, #0
 81007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81007bc:	687b      	ldr	r3, [r7, #4]
 81007be:	f003 0307 	and.w	r3, r3, #7
 81007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81007c4:	4b0c      	ldr	r3, [pc, #48]	; (81007f8 <__NVIC_SetPriorityGrouping+0x44>)
 81007c6:	68db      	ldr	r3, [r3, #12]
 81007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81007ca:	68ba      	ldr	r2, [r7, #8]
 81007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81007d0:	4013      	ands	r3, r2
 81007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81007d4:	68fb      	ldr	r3, [r7, #12]
 81007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81007d8:	68bb      	ldr	r3, [r7, #8]
 81007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81007e6:	4a04      	ldr	r2, [pc, #16]	; (81007f8 <__NVIC_SetPriorityGrouping+0x44>)
 81007e8:	68bb      	ldr	r3, [r7, #8]
 81007ea:	60d3      	str	r3, [r2, #12]
}
 81007ec:	bf00      	nop
 81007ee:	3714      	adds	r7, #20
 81007f0:	46bd      	mov	sp, r7
 81007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f6:	4770      	bx	lr
 81007f8:	e000ed00 	.word	0xe000ed00

081007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81007fc:	b480      	push	{r7}
 81007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100800:	4b04      	ldr	r3, [pc, #16]	; (8100814 <__NVIC_GetPriorityGrouping+0x18>)
 8100802:	68db      	ldr	r3, [r3, #12]
 8100804:	0a1b      	lsrs	r3, r3, #8
 8100806:	f003 0307 	and.w	r3, r3, #7
}
 810080a:	4618      	mov	r0, r3
 810080c:	46bd      	mov	sp, r7
 810080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100812:	4770      	bx	lr
 8100814:	e000ed00 	.word	0xe000ed00

08100818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100818:	b480      	push	{r7}
 810081a:	b083      	sub	sp, #12
 810081c:	af00      	add	r7, sp, #0
 810081e:	4603      	mov	r3, r0
 8100820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100826:	2b00      	cmp	r3, #0
 8100828:	db0b      	blt.n	8100842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810082a:	88fb      	ldrh	r3, [r7, #6]
 810082c:	f003 021f 	and.w	r2, r3, #31
 8100830:	4907      	ldr	r1, [pc, #28]	; (8100850 <__NVIC_EnableIRQ+0x38>)
 8100832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100836:	095b      	lsrs	r3, r3, #5
 8100838:	2001      	movs	r0, #1
 810083a:	fa00 f202 	lsl.w	r2, r0, r2
 810083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8100842:	bf00      	nop
 8100844:	370c      	adds	r7, #12
 8100846:	46bd      	mov	sp, r7
 8100848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810084c:	4770      	bx	lr
 810084e:	bf00      	nop
 8100850:	e000e100 	.word	0xe000e100

08100854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100854:	b480      	push	{r7}
 8100856:	b083      	sub	sp, #12
 8100858:	af00      	add	r7, sp, #0
 810085a:	4603      	mov	r3, r0
 810085c:	6039      	str	r1, [r7, #0]
 810085e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100864:	2b00      	cmp	r3, #0
 8100866:	db0a      	blt.n	810087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100868:	683b      	ldr	r3, [r7, #0]
 810086a:	b2da      	uxtb	r2, r3
 810086c:	490c      	ldr	r1, [pc, #48]	; (81008a0 <__NVIC_SetPriority+0x4c>)
 810086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100872:	0112      	lsls	r2, r2, #4
 8100874:	b2d2      	uxtb	r2, r2
 8100876:	440b      	add	r3, r1
 8100878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810087c:	e00a      	b.n	8100894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810087e:	683b      	ldr	r3, [r7, #0]
 8100880:	b2da      	uxtb	r2, r3
 8100882:	4908      	ldr	r1, [pc, #32]	; (81008a4 <__NVIC_SetPriority+0x50>)
 8100884:	88fb      	ldrh	r3, [r7, #6]
 8100886:	f003 030f 	and.w	r3, r3, #15
 810088a:	3b04      	subs	r3, #4
 810088c:	0112      	lsls	r2, r2, #4
 810088e:	b2d2      	uxtb	r2, r2
 8100890:	440b      	add	r3, r1
 8100892:	761a      	strb	r2, [r3, #24]
}
 8100894:	bf00      	nop
 8100896:	370c      	adds	r7, #12
 8100898:	46bd      	mov	sp, r7
 810089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810089e:	4770      	bx	lr
 81008a0:	e000e100 	.word	0xe000e100
 81008a4:	e000ed00 	.word	0xe000ed00

081008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008a8:	b480      	push	{r7}
 81008aa:	b089      	sub	sp, #36	; 0x24
 81008ac:	af00      	add	r7, sp, #0
 81008ae:	60f8      	str	r0, [r7, #12]
 81008b0:	60b9      	str	r1, [r7, #8]
 81008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81008b4:	68fb      	ldr	r3, [r7, #12]
 81008b6:	f003 0307 	and.w	r3, r3, #7
 81008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81008bc:	69fb      	ldr	r3, [r7, #28]
 81008be:	f1c3 0307 	rsb	r3, r3, #7
 81008c2:	2b04      	cmp	r3, #4
 81008c4:	bf28      	it	cs
 81008c6:	2304      	movcs	r3, #4
 81008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81008ca:	69fb      	ldr	r3, [r7, #28]
 81008cc:	3304      	adds	r3, #4
 81008ce:	2b06      	cmp	r3, #6
 81008d0:	d902      	bls.n	81008d8 <NVIC_EncodePriority+0x30>
 81008d2:	69fb      	ldr	r3, [r7, #28]
 81008d4:	3b03      	subs	r3, #3
 81008d6:	e000      	b.n	81008da <NVIC_EncodePriority+0x32>
 81008d8:	2300      	movs	r3, #0
 81008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81008e0:	69bb      	ldr	r3, [r7, #24]
 81008e2:	fa02 f303 	lsl.w	r3, r2, r3
 81008e6:	43da      	mvns	r2, r3
 81008e8:	68bb      	ldr	r3, [r7, #8]
 81008ea:	401a      	ands	r2, r3
 81008ec:	697b      	ldr	r3, [r7, #20]
 81008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81008f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81008f4:	697b      	ldr	r3, [r7, #20]
 81008f6:	fa01 f303 	lsl.w	r3, r1, r3
 81008fa:	43d9      	mvns	r1, r3
 81008fc:	687b      	ldr	r3, [r7, #4]
 81008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100900:	4313      	orrs	r3, r2
         );
}
 8100902:	4618      	mov	r0, r3
 8100904:	3724      	adds	r7, #36	; 0x24
 8100906:	46bd      	mov	sp, r7
 8100908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810090c:	4770      	bx	lr

0810090e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810090e:	b580      	push	{r7, lr}
 8100910:	b082      	sub	sp, #8
 8100912:	af00      	add	r7, sp, #0
 8100914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100916:	6878      	ldr	r0, [r7, #4]
 8100918:	f7ff ff4c 	bl	81007b4 <__NVIC_SetPriorityGrouping>
}
 810091c:	bf00      	nop
 810091e:	3708      	adds	r7, #8
 8100920:	46bd      	mov	sp, r7
 8100922:	bd80      	pop	{r7, pc}

08100924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100924:	b580      	push	{r7, lr}
 8100926:	b086      	sub	sp, #24
 8100928:	af00      	add	r7, sp, #0
 810092a:	4603      	mov	r3, r0
 810092c:	60b9      	str	r1, [r7, #8]
 810092e:	607a      	str	r2, [r7, #4]
 8100930:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100932:	f7ff ff63 	bl	81007fc <__NVIC_GetPriorityGrouping>
 8100936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100938:	687a      	ldr	r2, [r7, #4]
 810093a:	68b9      	ldr	r1, [r7, #8]
 810093c:	6978      	ldr	r0, [r7, #20]
 810093e:	f7ff ffb3 	bl	81008a8 <NVIC_EncodePriority>
 8100942:	4602      	mov	r2, r0
 8100944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100948:	4611      	mov	r1, r2
 810094a:	4618      	mov	r0, r3
 810094c:	f7ff ff82 	bl	8100854 <__NVIC_SetPriority>
}
 8100950:	bf00      	nop
 8100952:	3718      	adds	r7, #24
 8100954:	46bd      	mov	sp, r7
 8100956:	bd80      	pop	{r7, pc}

08100958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100958:	b580      	push	{r7, lr}
 810095a:	b082      	sub	sp, #8
 810095c:	af00      	add	r7, sp, #0
 810095e:	4603      	mov	r3, r0
 8100960:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100966:	4618      	mov	r0, r3
 8100968:	f7ff ff56 	bl	8100818 <__NVIC_EnableIRQ>
}
 810096c:	bf00      	nop
 810096e:	3708      	adds	r7, #8
 8100970:	46bd      	mov	sp, r7
 8100972:	bd80      	pop	{r7, pc}

08100974 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100974:	b480      	push	{r7}
 8100976:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100978:	4b07      	ldr	r3, [pc, #28]	; (8100998 <HAL_GetCurrentCPUID+0x24>)
 810097a:	681b      	ldr	r3, [r3, #0]
 810097c:	091b      	lsrs	r3, r3, #4
 810097e:	f003 030f 	and.w	r3, r3, #15
 8100982:	2b07      	cmp	r3, #7
 8100984:	d101      	bne.n	810098a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100986:	2303      	movs	r3, #3
 8100988:	e000      	b.n	810098c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810098a:	2301      	movs	r3, #1
  }
}
 810098c:	4618      	mov	r0, r3
 810098e:	46bd      	mov	sp, r7
 8100990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100994:	4770      	bx	lr
 8100996:	bf00      	nop
 8100998:	e000ed00 	.word	0xe000ed00

0810099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810099c:	b480      	push	{r7}
 810099e:	b089      	sub	sp, #36	; 0x24
 81009a0:	af00      	add	r7, sp, #0
 81009a2:	6078      	str	r0, [r7, #4]
 81009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81009a6:	2300      	movs	r3, #0
 81009a8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81009aa:	4b89      	ldr	r3, [pc, #548]	; (8100bd0 <HAL_GPIO_Init+0x234>)
 81009ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81009ae:	e194      	b.n	8100cda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81009b0:	683b      	ldr	r3, [r7, #0]
 81009b2:	681a      	ldr	r2, [r3, #0]
 81009b4:	2101      	movs	r1, #1
 81009b6:	69fb      	ldr	r3, [r7, #28]
 81009b8:	fa01 f303 	lsl.w	r3, r1, r3
 81009bc:	4013      	ands	r3, r2
 81009be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81009c0:	693b      	ldr	r3, [r7, #16]
 81009c2:	2b00      	cmp	r3, #0
 81009c4:	f000 8186 	beq.w	8100cd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81009c8:	683b      	ldr	r3, [r7, #0]
 81009ca:	685b      	ldr	r3, [r3, #4]
 81009cc:	2b01      	cmp	r3, #1
 81009ce:	d00b      	beq.n	81009e8 <HAL_GPIO_Init+0x4c>
 81009d0:	683b      	ldr	r3, [r7, #0]
 81009d2:	685b      	ldr	r3, [r3, #4]
 81009d4:	2b02      	cmp	r3, #2
 81009d6:	d007      	beq.n	81009e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81009d8:	683b      	ldr	r3, [r7, #0]
 81009da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81009dc:	2b11      	cmp	r3, #17
 81009de:	d003      	beq.n	81009e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81009e0:	683b      	ldr	r3, [r7, #0]
 81009e2:	685b      	ldr	r3, [r3, #4]
 81009e4:	2b12      	cmp	r3, #18
 81009e6:	d130      	bne.n	8100a4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81009e8:	687b      	ldr	r3, [r7, #4]
 81009ea:	689b      	ldr	r3, [r3, #8]
 81009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81009ee:	69fb      	ldr	r3, [r7, #28]
 81009f0:	005b      	lsls	r3, r3, #1
 81009f2:	2203      	movs	r2, #3
 81009f4:	fa02 f303 	lsl.w	r3, r2, r3
 81009f8:	43db      	mvns	r3, r3
 81009fa:	69ba      	ldr	r2, [r7, #24]
 81009fc:	4013      	ands	r3, r2
 81009fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100a00:	683b      	ldr	r3, [r7, #0]
 8100a02:	68da      	ldr	r2, [r3, #12]
 8100a04:	69fb      	ldr	r3, [r7, #28]
 8100a06:	005b      	lsls	r3, r3, #1
 8100a08:	fa02 f303 	lsl.w	r3, r2, r3
 8100a0c:	69ba      	ldr	r2, [r7, #24]
 8100a0e:	4313      	orrs	r3, r2
 8100a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100a12:	687b      	ldr	r3, [r7, #4]
 8100a14:	69ba      	ldr	r2, [r7, #24]
 8100a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100a18:	687b      	ldr	r3, [r7, #4]
 8100a1a:	685b      	ldr	r3, [r3, #4]
 8100a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100a1e:	2201      	movs	r2, #1
 8100a20:	69fb      	ldr	r3, [r7, #28]
 8100a22:	fa02 f303 	lsl.w	r3, r2, r3
 8100a26:	43db      	mvns	r3, r3
 8100a28:	69ba      	ldr	r2, [r7, #24]
 8100a2a:	4013      	ands	r3, r2
 8100a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8100a2e:	683b      	ldr	r3, [r7, #0]
 8100a30:	685b      	ldr	r3, [r3, #4]
 8100a32:	091b      	lsrs	r3, r3, #4
 8100a34:	f003 0201 	and.w	r2, r3, #1
 8100a38:	69fb      	ldr	r3, [r7, #28]
 8100a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a3e:	69ba      	ldr	r2, [r7, #24]
 8100a40:	4313      	orrs	r3, r2
 8100a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	69ba      	ldr	r2, [r7, #24]
 8100a48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100a4a:	687b      	ldr	r3, [r7, #4]
 8100a4c:	68db      	ldr	r3, [r3, #12]
 8100a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100a50:	69fb      	ldr	r3, [r7, #28]
 8100a52:	005b      	lsls	r3, r3, #1
 8100a54:	2203      	movs	r2, #3
 8100a56:	fa02 f303 	lsl.w	r3, r2, r3
 8100a5a:	43db      	mvns	r3, r3
 8100a5c:	69ba      	ldr	r2, [r7, #24]
 8100a5e:	4013      	ands	r3, r2
 8100a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100a62:	683b      	ldr	r3, [r7, #0]
 8100a64:	689a      	ldr	r2, [r3, #8]
 8100a66:	69fb      	ldr	r3, [r7, #28]
 8100a68:	005b      	lsls	r3, r3, #1
 8100a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a6e:	69ba      	ldr	r2, [r7, #24]
 8100a70:	4313      	orrs	r3, r2
 8100a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100a74:	687b      	ldr	r3, [r7, #4]
 8100a76:	69ba      	ldr	r2, [r7, #24]
 8100a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100a7a:	683b      	ldr	r3, [r7, #0]
 8100a7c:	685b      	ldr	r3, [r3, #4]
 8100a7e:	2b02      	cmp	r3, #2
 8100a80:	d003      	beq.n	8100a8a <HAL_GPIO_Init+0xee>
 8100a82:	683b      	ldr	r3, [r7, #0]
 8100a84:	685b      	ldr	r3, [r3, #4]
 8100a86:	2b12      	cmp	r3, #18
 8100a88:	d123      	bne.n	8100ad2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100a8a:	69fb      	ldr	r3, [r7, #28]
 8100a8c:	08da      	lsrs	r2, r3, #3
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	3208      	adds	r2, #8
 8100a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100a98:	69fb      	ldr	r3, [r7, #28]
 8100a9a:	f003 0307 	and.w	r3, r3, #7
 8100a9e:	009b      	lsls	r3, r3, #2
 8100aa0:	220f      	movs	r2, #15
 8100aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8100aa6:	43db      	mvns	r3, r3
 8100aa8:	69ba      	ldr	r2, [r7, #24]
 8100aaa:	4013      	ands	r3, r2
 8100aac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100aae:	683b      	ldr	r3, [r7, #0]
 8100ab0:	691a      	ldr	r2, [r3, #16]
 8100ab2:	69fb      	ldr	r3, [r7, #28]
 8100ab4:	f003 0307 	and.w	r3, r3, #7
 8100ab8:	009b      	lsls	r3, r3, #2
 8100aba:	fa02 f303 	lsl.w	r3, r2, r3
 8100abe:	69ba      	ldr	r2, [r7, #24]
 8100ac0:	4313      	orrs	r3, r2
 8100ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100ac4:	69fb      	ldr	r3, [r7, #28]
 8100ac6:	08da      	lsrs	r2, r3, #3
 8100ac8:	687b      	ldr	r3, [r7, #4]
 8100aca:	3208      	adds	r2, #8
 8100acc:	69b9      	ldr	r1, [r7, #24]
 8100ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100ad2:	687b      	ldr	r3, [r7, #4]
 8100ad4:	681b      	ldr	r3, [r3, #0]
 8100ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ad8:	69fb      	ldr	r3, [r7, #28]
 8100ada:	005b      	lsls	r3, r3, #1
 8100adc:	2203      	movs	r2, #3
 8100ade:	fa02 f303 	lsl.w	r3, r2, r3
 8100ae2:	43db      	mvns	r3, r3
 8100ae4:	69ba      	ldr	r2, [r7, #24]
 8100ae6:	4013      	ands	r3, r2
 8100ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100aea:	683b      	ldr	r3, [r7, #0]
 8100aec:	685b      	ldr	r3, [r3, #4]
 8100aee:	f003 0203 	and.w	r2, r3, #3
 8100af2:	69fb      	ldr	r3, [r7, #28]
 8100af4:	005b      	lsls	r3, r3, #1
 8100af6:	fa02 f303 	lsl.w	r3, r2, r3
 8100afa:	69ba      	ldr	r2, [r7, #24]
 8100afc:	4313      	orrs	r3, r2
 8100afe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100b00:	687b      	ldr	r3, [r7, #4]
 8100b02:	69ba      	ldr	r2, [r7, #24]
 8100b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8100b06:	683b      	ldr	r3, [r7, #0]
 8100b08:	685b      	ldr	r3, [r3, #4]
 8100b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8100b0e:	2b00      	cmp	r3, #0
 8100b10:	f000 80e0 	beq.w	8100cd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b14:	4b2f      	ldr	r3, [pc, #188]	; (8100bd4 <HAL_GPIO_Init+0x238>)
 8100b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b1a:	4a2e      	ldr	r2, [pc, #184]	; (8100bd4 <HAL_GPIO_Init+0x238>)
 8100b1c:	f043 0302 	orr.w	r3, r3, #2
 8100b20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b24:	4b2b      	ldr	r3, [pc, #172]	; (8100bd4 <HAL_GPIO_Init+0x238>)
 8100b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b2a:	f003 0302 	and.w	r3, r3, #2
 8100b2e:	60fb      	str	r3, [r7, #12]
 8100b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100b32:	4a29      	ldr	r2, [pc, #164]	; (8100bd8 <HAL_GPIO_Init+0x23c>)
 8100b34:	69fb      	ldr	r3, [r7, #28]
 8100b36:	089b      	lsrs	r3, r3, #2
 8100b38:	3302      	adds	r3, #2
 8100b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100b40:	69fb      	ldr	r3, [r7, #28]
 8100b42:	f003 0303 	and.w	r3, r3, #3
 8100b46:	009b      	lsls	r3, r3, #2
 8100b48:	220f      	movs	r2, #15
 8100b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b4e:	43db      	mvns	r3, r3
 8100b50:	69ba      	ldr	r2, [r7, #24]
 8100b52:	4013      	ands	r3, r2
 8100b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	4a20      	ldr	r2, [pc, #128]	; (8100bdc <HAL_GPIO_Init+0x240>)
 8100b5a:	4293      	cmp	r3, r2
 8100b5c:	d052      	beq.n	8100c04 <HAL_GPIO_Init+0x268>
 8100b5e:	687b      	ldr	r3, [r7, #4]
 8100b60:	4a1f      	ldr	r2, [pc, #124]	; (8100be0 <HAL_GPIO_Init+0x244>)
 8100b62:	4293      	cmp	r3, r2
 8100b64:	d031      	beq.n	8100bca <HAL_GPIO_Init+0x22e>
 8100b66:	687b      	ldr	r3, [r7, #4]
 8100b68:	4a1e      	ldr	r2, [pc, #120]	; (8100be4 <HAL_GPIO_Init+0x248>)
 8100b6a:	4293      	cmp	r3, r2
 8100b6c:	d02b      	beq.n	8100bc6 <HAL_GPIO_Init+0x22a>
 8100b6e:	687b      	ldr	r3, [r7, #4]
 8100b70:	4a1d      	ldr	r2, [pc, #116]	; (8100be8 <HAL_GPIO_Init+0x24c>)
 8100b72:	4293      	cmp	r3, r2
 8100b74:	d025      	beq.n	8100bc2 <HAL_GPIO_Init+0x226>
 8100b76:	687b      	ldr	r3, [r7, #4]
 8100b78:	4a1c      	ldr	r2, [pc, #112]	; (8100bec <HAL_GPIO_Init+0x250>)
 8100b7a:	4293      	cmp	r3, r2
 8100b7c:	d01f      	beq.n	8100bbe <HAL_GPIO_Init+0x222>
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	4a1b      	ldr	r2, [pc, #108]	; (8100bf0 <HAL_GPIO_Init+0x254>)
 8100b82:	4293      	cmp	r3, r2
 8100b84:	d019      	beq.n	8100bba <HAL_GPIO_Init+0x21e>
 8100b86:	687b      	ldr	r3, [r7, #4]
 8100b88:	4a1a      	ldr	r2, [pc, #104]	; (8100bf4 <HAL_GPIO_Init+0x258>)
 8100b8a:	4293      	cmp	r3, r2
 8100b8c:	d013      	beq.n	8100bb6 <HAL_GPIO_Init+0x21a>
 8100b8e:	687b      	ldr	r3, [r7, #4]
 8100b90:	4a19      	ldr	r2, [pc, #100]	; (8100bf8 <HAL_GPIO_Init+0x25c>)
 8100b92:	4293      	cmp	r3, r2
 8100b94:	d00d      	beq.n	8100bb2 <HAL_GPIO_Init+0x216>
 8100b96:	687b      	ldr	r3, [r7, #4]
 8100b98:	4a18      	ldr	r2, [pc, #96]	; (8100bfc <HAL_GPIO_Init+0x260>)
 8100b9a:	4293      	cmp	r3, r2
 8100b9c:	d007      	beq.n	8100bae <HAL_GPIO_Init+0x212>
 8100b9e:	687b      	ldr	r3, [r7, #4]
 8100ba0:	4a17      	ldr	r2, [pc, #92]	; (8100c00 <HAL_GPIO_Init+0x264>)
 8100ba2:	4293      	cmp	r3, r2
 8100ba4:	d101      	bne.n	8100baa <HAL_GPIO_Init+0x20e>
 8100ba6:	2309      	movs	r3, #9
 8100ba8:	e02d      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100baa:	230a      	movs	r3, #10
 8100bac:	e02b      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bae:	2308      	movs	r3, #8
 8100bb0:	e029      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bb2:	2307      	movs	r3, #7
 8100bb4:	e027      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bb6:	2306      	movs	r3, #6
 8100bb8:	e025      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bba:	2305      	movs	r3, #5
 8100bbc:	e023      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bbe:	2304      	movs	r3, #4
 8100bc0:	e021      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bc2:	2303      	movs	r3, #3
 8100bc4:	e01f      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bc6:	2302      	movs	r3, #2
 8100bc8:	e01d      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bca:	2301      	movs	r3, #1
 8100bcc:	e01b      	b.n	8100c06 <HAL_GPIO_Init+0x26a>
 8100bce:	bf00      	nop
 8100bd0:	580000c0 	.word	0x580000c0
 8100bd4:	58024400 	.word	0x58024400
 8100bd8:	58000400 	.word	0x58000400
 8100bdc:	58020000 	.word	0x58020000
 8100be0:	58020400 	.word	0x58020400
 8100be4:	58020800 	.word	0x58020800
 8100be8:	58020c00 	.word	0x58020c00
 8100bec:	58021000 	.word	0x58021000
 8100bf0:	58021400 	.word	0x58021400
 8100bf4:	58021800 	.word	0x58021800
 8100bf8:	58021c00 	.word	0x58021c00
 8100bfc:	58022000 	.word	0x58022000
 8100c00:	58022400 	.word	0x58022400
 8100c04:	2300      	movs	r3, #0
 8100c06:	69fa      	ldr	r2, [r7, #28]
 8100c08:	f002 0203 	and.w	r2, r2, #3
 8100c0c:	0092      	lsls	r2, r2, #2
 8100c0e:	4093      	lsls	r3, r2
 8100c10:	69ba      	ldr	r2, [r7, #24]
 8100c12:	4313      	orrs	r3, r2
 8100c14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100c16:	4938      	ldr	r1, [pc, #224]	; (8100cf8 <HAL_GPIO_Init+0x35c>)
 8100c18:	69fb      	ldr	r3, [r7, #28]
 8100c1a:	089b      	lsrs	r3, r3, #2
 8100c1c:	3302      	adds	r3, #2
 8100c1e:	69ba      	ldr	r2, [r7, #24]
 8100c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100c24:	697b      	ldr	r3, [r7, #20]
 8100c26:	681b      	ldr	r3, [r3, #0]
 8100c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c2a:	693b      	ldr	r3, [r7, #16]
 8100c2c:	43db      	mvns	r3, r3
 8100c2e:	69ba      	ldr	r2, [r7, #24]
 8100c30:	4013      	ands	r3, r2
 8100c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8100c34:	683b      	ldr	r3, [r7, #0]
 8100c36:	685b      	ldr	r3, [r3, #4]
 8100c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100c3c:	2b00      	cmp	r3, #0
 8100c3e:	d003      	beq.n	8100c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	693b      	ldr	r3, [r7, #16]
 8100c44:	4313      	orrs	r3, r2
 8100c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100c48:	697b      	ldr	r3, [r7, #20]
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8100c4e:	697b      	ldr	r3, [r7, #20]
 8100c50:	685b      	ldr	r3, [r3, #4]
 8100c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c54:	693b      	ldr	r3, [r7, #16]
 8100c56:	43db      	mvns	r3, r3
 8100c58:	69ba      	ldr	r2, [r7, #24]
 8100c5a:	4013      	ands	r3, r2
 8100c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8100c5e:	683b      	ldr	r3, [r7, #0]
 8100c60:	685b      	ldr	r3, [r3, #4]
 8100c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100c66:	2b00      	cmp	r3, #0
 8100c68:	d003      	beq.n	8100c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8100c6a:	69ba      	ldr	r2, [r7, #24]
 8100c6c:	693b      	ldr	r3, [r7, #16]
 8100c6e:	4313      	orrs	r3, r2
 8100c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100c72:	697b      	ldr	r3, [r7, #20]
 8100c74:	69ba      	ldr	r2, [r7, #24]
 8100c76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100c7c:	681b      	ldr	r3, [r3, #0]
 8100c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c80:	693b      	ldr	r3, [r7, #16]
 8100c82:	43db      	mvns	r3, r3
 8100c84:	69ba      	ldr	r2, [r7, #24]
 8100c86:	4013      	ands	r3, r2
 8100c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8100c8a:	683b      	ldr	r3, [r7, #0]
 8100c8c:	685b      	ldr	r3, [r3, #4]
 8100c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100c92:	2b00      	cmp	r3, #0
 8100c94:	d003      	beq.n	8100c9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8100c96:	69ba      	ldr	r2, [r7, #24]
 8100c98:	693b      	ldr	r3, [r7, #16]
 8100c9a:	4313      	orrs	r3, r2
 8100c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ca2:	69bb      	ldr	r3, [r7, #24]
 8100ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100caa:	685b      	ldr	r3, [r3, #4]
 8100cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100cae:	693b      	ldr	r3, [r7, #16]
 8100cb0:	43db      	mvns	r3, r3
 8100cb2:	69ba      	ldr	r2, [r7, #24]
 8100cb4:	4013      	ands	r3, r2
 8100cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8100cb8:	683b      	ldr	r3, [r7, #0]
 8100cba:	685b      	ldr	r3, [r3, #4]
 8100cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100cc0:	2b00      	cmp	r3, #0
 8100cc2:	d003      	beq.n	8100ccc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8100cc4:	69ba      	ldr	r2, [r7, #24]
 8100cc6:	693b      	ldr	r3, [r7, #16]
 8100cc8:	4313      	orrs	r3, r2
 8100cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100cd0:	69bb      	ldr	r3, [r7, #24]
 8100cd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8100cd4:	69fb      	ldr	r3, [r7, #28]
 8100cd6:	3301      	adds	r3, #1
 8100cd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100cda:	683b      	ldr	r3, [r7, #0]
 8100cdc:	681a      	ldr	r2, [r3, #0]
 8100cde:	69fb      	ldr	r3, [r7, #28]
 8100ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8100ce4:	2b00      	cmp	r3, #0
 8100ce6:	f47f ae63 	bne.w	81009b0 <HAL_GPIO_Init+0x14>
  }
}
 8100cea:	bf00      	nop
 8100cec:	3724      	adds	r7, #36	; 0x24
 8100cee:	46bd      	mov	sp, r7
 8100cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cf4:	4770      	bx	lr
 8100cf6:	bf00      	nop
 8100cf8:	58000400 	.word	0x58000400

08100cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100cfc:	b480      	push	{r7}
 8100cfe:	b083      	sub	sp, #12
 8100d00:	af00      	add	r7, sp, #0
 8100d02:	6078      	str	r0, [r7, #4]
 8100d04:	460b      	mov	r3, r1
 8100d06:	807b      	strh	r3, [r7, #2]
 8100d08:	4613      	mov	r3, r2
 8100d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100d0c:	787b      	ldrb	r3, [r7, #1]
 8100d0e:	2b00      	cmp	r3, #0
 8100d10:	d003      	beq.n	8100d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100d12:	887a      	ldrh	r2, [r7, #2]
 8100d14:	687b      	ldr	r3, [r7, #4]
 8100d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100d18:	e003      	b.n	8100d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100d1a:	887b      	ldrh	r3, [r7, #2]
 8100d1c:	041a      	lsls	r2, r3, #16
 8100d1e:	687b      	ldr	r3, [r7, #4]
 8100d20:	619a      	str	r2, [r3, #24]
}
 8100d22:	bf00      	nop
 8100d24:	370c      	adds	r7, #12
 8100d26:	46bd      	mov	sp, r7
 8100d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d2c:	4770      	bx	lr

08100d2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100d2e:	b480      	push	{r7}
 8100d30:	b083      	sub	sp, #12
 8100d32:	af00      	add	r7, sp, #0
 8100d34:	6078      	str	r0, [r7, #4]
 8100d36:	460b      	mov	r3, r1
 8100d38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	695a      	ldr	r2, [r3, #20]
 8100d3e:	887b      	ldrh	r3, [r7, #2]
 8100d40:	401a      	ands	r2, r3
 8100d42:	887b      	ldrh	r3, [r7, #2]
 8100d44:	429a      	cmp	r2, r3
 8100d46:	d104      	bne.n	8100d52 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100d48:	887b      	ldrh	r3, [r7, #2]
 8100d4a:	041a      	lsls	r2, r3, #16
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8100d50:	e002      	b.n	8100d58 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8100d52:	887a      	ldrh	r2, [r7, #2]
 8100d54:	687b      	ldr	r3, [r7, #4]
 8100d56:	619a      	str	r2, [r3, #24]
}
 8100d58:	bf00      	nop
 8100d5a:	370c      	adds	r7, #12
 8100d5c:	46bd      	mov	sp, r7
 8100d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d62:	4770      	bx	lr

08100d64 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100d64:	b480      	push	{r7}
 8100d66:	b083      	sub	sp, #12
 8100d68:	af00      	add	r7, sp, #0
 8100d6a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100d6c:	4b05      	ldr	r3, [pc, #20]	; (8100d84 <HAL_HSEM_ActivateNotification+0x20>)
 8100d6e:	681a      	ldr	r2, [r3, #0]
 8100d70:	4904      	ldr	r1, [pc, #16]	; (8100d84 <HAL_HSEM_ActivateNotification+0x20>)
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	4313      	orrs	r3, r2
 8100d76:	600b      	str	r3, [r1, #0]
#endif
}
 8100d78:	bf00      	nop
 8100d7a:	370c      	adds	r7, #12
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d82:	4770      	bx	lr
 8100d84:	58026510 	.word	0x58026510

08100d88 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100d88:	b580      	push	{r7, lr}
 8100d8a:	b084      	sub	sp, #16
 8100d8c:	af00      	add	r7, sp, #0
 8100d8e:	60f8      	str	r0, [r7, #12]
 8100d90:	460b      	mov	r3, r1
 8100d92:	607a      	str	r2, [r7, #4]
 8100d94:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100d96:	4b35      	ldr	r3, [pc, #212]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100d98:	681b      	ldr	r3, [r3, #0]
 8100d9a:	f023 0201 	bic.w	r2, r3, #1
 8100d9e:	4933      	ldr	r1, [pc, #204]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100da0:	68fb      	ldr	r3, [r7, #12]
 8100da2:	4313      	orrs	r3, r2
 8100da4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100da6:	687b      	ldr	r3, [r7, #4]
 8100da8:	2b00      	cmp	r3, #0
 8100daa:	d121      	bne.n	8100df0 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100dac:	f7ff fde2 	bl	8100974 <HAL_GetCurrentCPUID>
 8100db0:	4603      	mov	r3, r0
 8100db2:	2b03      	cmp	r3, #3
 8100db4:	d154      	bne.n	8100e60 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100db6:	4b2d      	ldr	r3, [pc, #180]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100db8:	691b      	ldr	r3, [r3, #16]
 8100dba:	4a2c      	ldr	r2, [pc, #176]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100dbc:	f023 0301 	bic.w	r3, r3, #1
 8100dc0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100dc2:	4b2b      	ldr	r3, [pc, #172]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100dc4:	691b      	ldr	r3, [r3, #16]
 8100dc6:	4a2a      	ldr	r2, [pc, #168]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100dc8:	f043 0304 	orr.w	r3, r3, #4
 8100dcc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100dce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8100dd2:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100dd6:	7afb      	ldrb	r3, [r7, #11]
 8100dd8:	2b01      	cmp	r3, #1
 8100dda:	d101      	bne.n	8100de0 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100ddc:	bf30      	wfi
 8100dde:	e000      	b.n	8100de2 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100de0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100de2:	4b23      	ldr	r3, [pc, #140]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100de4:	691b      	ldr	r3, [r3, #16]
 8100de6:	4a22      	ldr	r2, [pc, #136]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100de8:	f023 0304 	bic.w	r3, r3, #4
 8100dec:	6113      	str	r3, [r2, #16]
 8100dee:	e03a      	b.n	8100e66 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100df0:	687b      	ldr	r3, [r7, #4]
 8100df2:	2b01      	cmp	r3, #1
 8100df4:	d121      	bne.n	8100e3a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100df6:	f7ff fdbd 	bl	8100974 <HAL_GetCurrentCPUID>
 8100dfa:	4603      	mov	r3, r0
 8100dfc:	2b01      	cmp	r3, #1
 8100dfe:	d131      	bne.n	8100e64 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100e00:	4b1a      	ldr	r3, [pc, #104]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e02:	695b      	ldr	r3, [r3, #20]
 8100e04:	4a19      	ldr	r2, [pc, #100]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e06:	f023 0302 	bic.w	r3, r3, #2
 8100e0a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e0c:	4b18      	ldr	r3, [pc, #96]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100e0e:	691b      	ldr	r3, [r3, #16]
 8100e10:	4a17      	ldr	r2, [pc, #92]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100e12:	f043 0304 	orr.w	r3, r3, #4
 8100e16:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8100e1c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e20:	7afb      	ldrb	r3, [r7, #11]
 8100e22:	2b01      	cmp	r3, #1
 8100e24:	d101      	bne.n	8100e2a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e26:	bf30      	wfi
 8100e28:	e000      	b.n	8100e2c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e2a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e2c:	4b10      	ldr	r3, [pc, #64]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100e2e:	691b      	ldr	r3, [r3, #16]
 8100e30:	4a0f      	ldr	r2, [pc, #60]	; (8100e70 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100e32:	f023 0304 	bic.w	r3, r3, #4
 8100e36:	6113      	str	r3, [r2, #16]
 8100e38:	e015      	b.n	8100e66 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e3a:	f7ff fd9b 	bl	8100974 <HAL_GetCurrentCPUID>
 8100e3e:	4603      	mov	r3, r0
 8100e40:	2b03      	cmp	r3, #3
 8100e42:	d106      	bne.n	8100e52 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100e44:	4b09      	ldr	r3, [pc, #36]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e46:	691b      	ldr	r3, [r3, #16]
 8100e48:	4a08      	ldr	r2, [pc, #32]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e4a:	f023 0304 	bic.w	r3, r3, #4
 8100e4e:	6113      	str	r3, [r2, #16]
 8100e50:	e009      	b.n	8100e66 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100e52:	4b06      	ldr	r3, [pc, #24]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e54:	695b      	ldr	r3, [r3, #20]
 8100e56:	4a05      	ldr	r2, [pc, #20]	; (8100e6c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100e58:	f023 0304 	bic.w	r3, r3, #4
 8100e5c:	6153      	str	r3, [r2, #20]
 8100e5e:	e002      	b.n	8100e66 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8100e60:	bf00      	nop
 8100e62:	e000      	b.n	8100e66 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8100e64:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100e66:	3710      	adds	r7, #16
 8100e68:	46bd      	mov	sp, r7
 8100e6a:	bd80      	pop	{r7, pc}
 8100e6c:	58024800 	.word	0x58024800
 8100e70:	e000ed00 	.word	0xe000ed00

08100e74 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100e74:	b580      	push	{r7, lr}
 8100e76:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e78:	f7ff fd7c 	bl	8100974 <HAL_GetCurrentCPUID>
 8100e7c:	4603      	mov	r3, r0
 8100e7e:	2b03      	cmp	r3, #3
 8100e80:	d101      	bne.n	8100e86 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100e82:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100e84:	e001      	b.n	8100e8a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100e86:	bf40      	sev
    __WFE ();
 8100e88:	bf20      	wfe
}
 8100e8a:	bf00      	nop
 8100e8c:	bd80      	pop	{r7, pc}
	...

08100e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100e90:	b480      	push	{r7}
 8100e92:	b089      	sub	sp, #36	; 0x24
 8100e94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100e96:	4baf      	ldr	r3, [pc, #700]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100e98:	691b      	ldr	r3, [r3, #16]
 8100e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100e9e:	2b18      	cmp	r3, #24
 8100ea0:	f200 814e 	bhi.w	8101140 <HAL_RCC_GetSysClockFreq+0x2b0>
 8100ea4:	a201      	add	r2, pc, #4	; (adr r2, 8100eac <HAL_RCC_GetSysClockFreq+0x1c>)
 8100ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100eaa:	bf00      	nop
 8100eac:	08100f11 	.word	0x08100f11
 8100eb0:	08101141 	.word	0x08101141
 8100eb4:	08101141 	.word	0x08101141
 8100eb8:	08101141 	.word	0x08101141
 8100ebc:	08101141 	.word	0x08101141
 8100ec0:	08101141 	.word	0x08101141
 8100ec4:	08101141 	.word	0x08101141
 8100ec8:	08101141 	.word	0x08101141
 8100ecc:	08100f37 	.word	0x08100f37
 8100ed0:	08101141 	.word	0x08101141
 8100ed4:	08101141 	.word	0x08101141
 8100ed8:	08101141 	.word	0x08101141
 8100edc:	08101141 	.word	0x08101141
 8100ee0:	08101141 	.word	0x08101141
 8100ee4:	08101141 	.word	0x08101141
 8100ee8:	08101141 	.word	0x08101141
 8100eec:	08100f3d 	.word	0x08100f3d
 8100ef0:	08101141 	.word	0x08101141
 8100ef4:	08101141 	.word	0x08101141
 8100ef8:	08101141 	.word	0x08101141
 8100efc:	08101141 	.word	0x08101141
 8100f00:	08101141 	.word	0x08101141
 8100f04:	08101141 	.word	0x08101141
 8100f08:	08101141 	.word	0x08101141
 8100f0c:	08100f43 	.word	0x08100f43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f10:	4b90      	ldr	r3, [pc, #576]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f12:	681b      	ldr	r3, [r3, #0]
 8100f14:	f003 0320 	and.w	r3, r3, #32
 8100f18:	2b00      	cmp	r3, #0
 8100f1a:	d009      	beq.n	8100f30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100f1c:	4b8d      	ldr	r3, [pc, #564]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	08db      	lsrs	r3, r3, #3
 8100f22:	f003 0303 	and.w	r3, r3, #3
 8100f26:	4a8c      	ldr	r2, [pc, #560]	; (8101158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100f28:	fa22 f303 	lsr.w	r3, r2, r3
 8100f2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100f2e:	e10a      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100f30:	4b89      	ldr	r3, [pc, #548]	; (8101158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100f32:	61bb      	str	r3, [r7, #24]
    break;
 8100f34:	e107      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100f36:	4b89      	ldr	r3, [pc, #548]	; (810115c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100f38:	61bb      	str	r3, [r7, #24]
    break;
 8100f3a:	e104      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100f3c:	4b88      	ldr	r3, [pc, #544]	; (8101160 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8100f3e:	61bb      	str	r3, [r7, #24]
    break;
 8100f40:	e101      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100f42:	4b84      	ldr	r3, [pc, #528]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100f46:	f003 0303 	and.w	r3, r3, #3
 8100f4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100f4c:	4b81      	ldr	r3, [pc, #516]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100f50:	091b      	lsrs	r3, r3, #4
 8100f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100f56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100f58:	4b7e      	ldr	r3, [pc, #504]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100f5c:	f003 0301 	and.w	r3, r3, #1
 8100f60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100f62:	4b7c      	ldr	r3, [pc, #496]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100f66:	08db      	lsrs	r3, r3, #3
 8100f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100f6c:	68fa      	ldr	r2, [r7, #12]
 8100f6e:	fb02 f303 	mul.w	r3, r2, r3
 8100f72:	ee07 3a90 	vmov	s15, r3
 8100f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100f7e:	693b      	ldr	r3, [r7, #16]
 8100f80:	2b00      	cmp	r3, #0
 8100f82:	f000 80da 	beq.w	810113a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8100f86:	697b      	ldr	r3, [r7, #20]
 8100f88:	2b01      	cmp	r3, #1
 8100f8a:	d05a      	beq.n	8101042 <HAL_RCC_GetSysClockFreq+0x1b2>
 8100f8c:	2b01      	cmp	r3, #1
 8100f8e:	d302      	bcc.n	8100f96 <HAL_RCC_GetSysClockFreq+0x106>
 8100f90:	2b02      	cmp	r3, #2
 8100f92:	d078      	beq.n	8101086 <HAL_RCC_GetSysClockFreq+0x1f6>
 8100f94:	e099      	b.n	81010ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f96:	4b6f      	ldr	r3, [pc, #444]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	f003 0320 	and.w	r3, r3, #32
 8100f9e:	2b00      	cmp	r3, #0
 8100fa0:	d02d      	beq.n	8100ffe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100fa2:	4b6c      	ldr	r3, [pc, #432]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	08db      	lsrs	r3, r3, #3
 8100fa8:	f003 0303 	and.w	r3, r3, #3
 8100fac:	4a6a      	ldr	r2, [pc, #424]	; (8101158 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100fae:	fa22 f303 	lsr.w	r3, r2, r3
 8100fb2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	ee07 3a90 	vmov	s15, r3
 8100fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fbe:	693b      	ldr	r3, [r7, #16]
 8100fc0:	ee07 3a90 	vmov	s15, r3
 8100fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fcc:	4b61      	ldr	r3, [pc, #388]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fd4:	ee07 3a90 	vmov	s15, r3
 8100fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fe0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101164 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100ffc:	e087      	b.n	810110e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ffe:	693b      	ldr	r3, [r7, #16]
 8101000:	ee07 3a90 	vmov	s15, r3
 8101004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101008:	eddf 6a57 	vldr	s13, [pc, #348]	; 8101168 <HAL_RCC_GetSysClockFreq+0x2d8>
 810100c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101010:	4b50      	ldr	r3, [pc, #320]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101018:	ee07 3a90 	vmov	s15, r3
 810101c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101020:	ed97 6a02 	vldr	s12, [r7, #8]
 8101024:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8101164 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810102c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101038:	ee67 7a27 	vmul.f32	s15, s14, s15
 810103c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101040:	e065      	b.n	810110e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101042:	693b      	ldr	r3, [r7, #16]
 8101044:	ee07 3a90 	vmov	s15, r3
 8101048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810104c:	eddf 6a47 	vldr	s13, [pc, #284]	; 810116c <HAL_RCC_GetSysClockFreq+0x2dc>
 8101050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101054:	4b3f      	ldr	r3, [pc, #252]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810105c:	ee07 3a90 	vmov	s15, r3
 8101060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101064:	ed97 6a02 	vldr	s12, [r7, #8]
 8101068:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8101164 <HAL_RCC_GetSysClockFreq+0x2d4>
 810106c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101084:	e043      	b.n	810110e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101086:	693b      	ldr	r3, [r7, #16]
 8101088:	ee07 3a90 	vmov	s15, r3
 810108c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101090:	eddf 6a37 	vldr	s13, [pc, #220]	; 8101170 <HAL_RCC_GetSysClockFreq+0x2e0>
 8101094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101098:	4b2e      	ldr	r3, [pc, #184]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810109c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010a0:	ee07 3a90 	vmov	s15, r3
 81010a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010a8:	ed97 6a02 	vldr	s12, [r7, #8]
 81010ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8101164 <HAL_RCC_GetSysClockFreq+0x2d4>
 81010b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81010bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81010c8:	e021      	b.n	810110e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81010ca:	693b      	ldr	r3, [r7, #16]
 81010cc:	ee07 3a90 	vmov	s15, r3
 81010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 810116c <HAL_RCC_GetSysClockFreq+0x2dc>
 81010d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010dc:	4b1d      	ldr	r3, [pc, #116]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010e4:	ee07 3a90 	vmov	s15, r3
 81010e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010ec:	ed97 6a02 	vldr	s12, [r7, #8]
 81010f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8101164 <HAL_RCC_GetSysClockFreq+0x2d4>
 81010f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810110c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810110e:	4b11      	ldr	r3, [pc, #68]	; (8101154 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101112:	0a5b      	lsrs	r3, r3, #9
 8101114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101118:	3301      	adds	r3, #1
 810111a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810111c:	683b      	ldr	r3, [r7, #0]
 810111e:	ee07 3a90 	vmov	s15, r3
 8101122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101126:	edd7 6a07 	vldr	s13, [r7, #28]
 810112a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810112e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101132:	ee17 3a90 	vmov	r3, s15
 8101136:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101138:	e005      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 810113a:	2300      	movs	r3, #0
 810113c:	61bb      	str	r3, [r7, #24]
    break;
 810113e:	e002      	b.n	8101146 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8101140:	4b06      	ldr	r3, [pc, #24]	; (810115c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101142:	61bb      	str	r3, [r7, #24]
    break;
 8101144:	bf00      	nop
  }

  return sysclockfreq;
 8101146:	69bb      	ldr	r3, [r7, #24]
}
 8101148:	4618      	mov	r0, r3
 810114a:	3724      	adds	r7, #36	; 0x24
 810114c:	46bd      	mov	sp, r7
 810114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101152:	4770      	bx	lr
 8101154:	58024400 	.word	0x58024400
 8101158:	03d09000 	.word	0x03d09000
 810115c:	003d0900 	.word	0x003d0900
 8101160:	007a1200 	.word	0x007a1200
 8101164:	46000000 	.word	0x46000000
 8101168:	4c742400 	.word	0x4c742400
 810116c:	4a742400 	.word	0x4a742400
 8101170:	4af42400 	.word	0x4af42400

08101174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101174:	b580      	push	{r7, lr}
 8101176:	b082      	sub	sp, #8
 8101178:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810117a:	f7ff fe89 	bl	8100e90 <HAL_RCC_GetSysClockFreq>
 810117e:	4601      	mov	r1, r0
 8101180:	4b11      	ldr	r3, [pc, #68]	; (81011c8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101182:	699b      	ldr	r3, [r3, #24]
 8101184:	0a1b      	lsrs	r3, r3, #8
 8101186:	f003 030f 	and.w	r3, r3, #15
 810118a:	4a10      	ldr	r2, [pc, #64]	; (81011cc <HAL_RCC_GetHCLKFreq+0x58>)
 810118c:	5cd3      	ldrb	r3, [r2, r3]
 810118e:	f003 031f 	and.w	r3, r3, #31
 8101192:	fa21 f303 	lsr.w	r3, r1, r3
 8101196:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101198:	4b0b      	ldr	r3, [pc, #44]	; (81011c8 <HAL_RCC_GetHCLKFreq+0x54>)
 810119a:	699b      	ldr	r3, [r3, #24]
 810119c:	f003 030f 	and.w	r3, r3, #15
 81011a0:	4a0a      	ldr	r2, [pc, #40]	; (81011cc <HAL_RCC_GetHCLKFreq+0x58>)
 81011a2:	5cd3      	ldrb	r3, [r2, r3]
 81011a4:	f003 031f 	and.w	r3, r3, #31
 81011a8:	687a      	ldr	r2, [r7, #4]
 81011aa:	fa22 f303 	lsr.w	r3, r2, r3
 81011ae:	4a08      	ldr	r2, [pc, #32]	; (81011d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81011b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81011b2:	4b07      	ldr	r3, [pc, #28]	; (81011d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81011b4:	681b      	ldr	r3, [r3, #0]
 81011b6:	4a07      	ldr	r2, [pc, #28]	; (81011d4 <HAL_RCC_GetHCLKFreq+0x60>)
 81011b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81011ba:	4b05      	ldr	r3, [pc, #20]	; (81011d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81011bc:	681b      	ldr	r3, [r3, #0]
}
 81011be:	4618      	mov	r0, r3
 81011c0:	3708      	adds	r7, #8
 81011c2:	46bd      	mov	sp, r7
 81011c4:	bd80      	pop	{r7, pc}
 81011c6:	bf00      	nop
 81011c8:	58024400 	.word	0x58024400
 81011cc:	08104670 	.word	0x08104670
 81011d0:	10000004 	.word	0x10000004
 81011d4:	10000000 	.word	0x10000000

081011d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81011d8:	b580      	push	{r7, lr}
 81011da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81011dc:	f7ff ffca 	bl	8101174 <HAL_RCC_GetHCLKFreq>
 81011e0:	4601      	mov	r1, r0
 81011e2:	4b06      	ldr	r3, [pc, #24]	; (81011fc <HAL_RCC_GetPCLK1Freq+0x24>)
 81011e4:	69db      	ldr	r3, [r3, #28]
 81011e6:	091b      	lsrs	r3, r3, #4
 81011e8:	f003 0307 	and.w	r3, r3, #7
 81011ec:	4a04      	ldr	r2, [pc, #16]	; (8101200 <HAL_RCC_GetPCLK1Freq+0x28>)
 81011ee:	5cd3      	ldrb	r3, [r2, r3]
 81011f0:	f003 031f 	and.w	r3, r3, #31
 81011f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81011f8:	4618      	mov	r0, r3
 81011fa:	bd80      	pop	{r7, pc}
 81011fc:	58024400 	.word	0x58024400
 8101200:	08104670 	.word	0x08104670

08101204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101204:	b480      	push	{r7}
 8101206:	b083      	sub	sp, #12
 8101208:	af00      	add	r7, sp, #0
 810120a:	6078      	str	r0, [r7, #4]
 810120c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	223f      	movs	r2, #63	; 0x3f
 8101212:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101214:	4b1a      	ldr	r3, [pc, #104]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 8101216:	691b      	ldr	r3, [r3, #16]
 8101218:	f003 0207 	and.w	r2, r3, #7
 810121c:	687b      	ldr	r3, [r7, #4]
 810121e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101220:	4b17      	ldr	r3, [pc, #92]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 8101222:	699b      	ldr	r3, [r3, #24]
 8101224:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810122c:	4b14      	ldr	r3, [pc, #80]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 810122e:	699b      	ldr	r3, [r3, #24]
 8101230:	f003 020f 	and.w	r2, r3, #15
 8101234:	687b      	ldr	r3, [r7, #4]
 8101236:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101238:	4b11      	ldr	r3, [pc, #68]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 810123a:	699b      	ldr	r3, [r3, #24]
 810123c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101244:	4b0e      	ldr	r3, [pc, #56]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 8101246:	69db      	ldr	r3, [r3, #28]
 8101248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101250:	4b0b      	ldr	r3, [pc, #44]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 8101252:	69db      	ldr	r3, [r3, #28]
 8101254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810125c:	4b08      	ldr	r3, [pc, #32]	; (8101280 <HAL_RCC_GetClockConfig+0x7c>)
 810125e:	6a1b      	ldr	r3, [r3, #32]
 8101260:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101268:	4b06      	ldr	r3, [pc, #24]	; (8101284 <HAL_RCC_GetClockConfig+0x80>)
 810126a:	681b      	ldr	r3, [r3, #0]
 810126c:	f003 020f 	and.w	r2, r3, #15
 8101270:	683b      	ldr	r3, [r7, #0]
 8101272:	601a      	str	r2, [r3, #0]
}
 8101274:	bf00      	nop
 8101276:	370c      	adds	r7, #12
 8101278:	46bd      	mov	sp, r7
 810127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810127e:	4770      	bx	lr
 8101280:	58024400 	.word	0x58024400
 8101284:	52002000 	.word	0x52002000

08101288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101288:	b580      	push	{r7, lr}
 810128a:	b082      	sub	sp, #8
 810128c:	af00      	add	r7, sp, #0
 810128e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101290:	687b      	ldr	r3, [r7, #4]
 8101292:	2b00      	cmp	r3, #0
 8101294:	d101      	bne.n	810129a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101296:	2301      	movs	r3, #1
 8101298:	e049      	b.n	810132e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81012a0:	b2db      	uxtb	r3, r3
 81012a2:	2b00      	cmp	r3, #0
 81012a4:	d106      	bne.n	81012b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	2200      	movs	r2, #0
 81012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81012ae:	6878      	ldr	r0, [r7, #4]
 81012b0:	f000 f841 	bl	8101336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	2202      	movs	r2, #2
 81012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681a      	ldr	r2, [r3, #0]
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	3304      	adds	r3, #4
 81012c4:	4619      	mov	r1, r3
 81012c6:	4610      	mov	r0, r2
 81012c8:	f000 f9be 	bl	8101648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	2201      	movs	r2, #1
 81012d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	2201      	movs	r2, #1
 81012d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	2201      	movs	r2, #1
 81012e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	2201      	movs	r2, #1
 81012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	2201      	movs	r2, #1
 81012f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	2201      	movs	r2, #1
 81012f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	2201      	movs	r2, #1
 8101300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	2201      	movs	r2, #1
 8101308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810130c:	687b      	ldr	r3, [r7, #4]
 810130e:	2201      	movs	r2, #1
 8101310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	2201      	movs	r2, #1
 8101318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	2201      	movs	r2, #1
 8101320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	2201      	movs	r2, #1
 8101328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810132c:	2300      	movs	r3, #0
}
 810132e:	4618      	mov	r0, r3
 8101330:	3708      	adds	r7, #8
 8101332:	46bd      	mov	sp, r7
 8101334:	bd80      	pop	{r7, pc}

08101336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8101336:	b480      	push	{r7}
 8101338:	b083      	sub	sp, #12
 810133a:	af00      	add	r7, sp, #0
 810133c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810133e:	bf00      	nop
 8101340:	370c      	adds	r7, #12
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr
	...

0810134c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810134c:	b480      	push	{r7}
 810134e:	b085      	sub	sp, #20
 8101350:	af00      	add	r7, sp, #0
 8101352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810135a:	b2db      	uxtb	r3, r3
 810135c:	2b01      	cmp	r3, #1
 810135e:	d001      	beq.n	8101364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101360:	2301      	movs	r3, #1
 8101362:	e021      	b.n	81013a8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	2202      	movs	r2, #2
 8101368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	68da      	ldr	r2, [r3, #12]
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	681b      	ldr	r3, [r3, #0]
 8101376:	f042 0201 	orr.w	r2, r2, #1
 810137a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	689a      	ldr	r2, [r3, #8]
 8101382:	4b0c      	ldr	r3, [pc, #48]	; (81013b4 <HAL_TIM_Base_Start_IT+0x68>)
 8101384:	4013      	ands	r3, r2
 8101386:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101388:	68fb      	ldr	r3, [r7, #12]
 810138a:	2b06      	cmp	r3, #6
 810138c:	d00b      	beq.n	81013a6 <HAL_TIM_Base_Start_IT+0x5a>
 810138e:	68fb      	ldr	r3, [r7, #12]
 8101390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101394:	d007      	beq.n	81013a6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	681b      	ldr	r3, [r3, #0]
 810139a:	681a      	ldr	r2, [r3, #0]
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	f042 0201 	orr.w	r2, r2, #1
 81013a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81013a6:	2300      	movs	r3, #0
}
 81013a8:	4618      	mov	r0, r3
 81013aa:	3714      	adds	r7, #20
 81013ac:	46bd      	mov	sp, r7
 81013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013b2:	4770      	bx	lr
 81013b4:	00010007 	.word	0x00010007

081013b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81013b8:	b580      	push	{r7, lr}
 81013ba:	b082      	sub	sp, #8
 81013bc:	af00      	add	r7, sp, #0
 81013be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81013c0:	687b      	ldr	r3, [r7, #4]
 81013c2:	681b      	ldr	r3, [r3, #0]
 81013c4:	691b      	ldr	r3, [r3, #16]
 81013c6:	f003 0302 	and.w	r3, r3, #2
 81013ca:	2b02      	cmp	r3, #2
 81013cc:	d122      	bne.n	8101414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	681b      	ldr	r3, [r3, #0]
 81013d2:	68db      	ldr	r3, [r3, #12]
 81013d4:	f003 0302 	and.w	r3, r3, #2
 81013d8:	2b02      	cmp	r3, #2
 81013da:	d11b      	bne.n	8101414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	681b      	ldr	r3, [r3, #0]
 81013e0:	f06f 0202 	mvn.w	r2, #2
 81013e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	2201      	movs	r2, #1
 81013ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	681b      	ldr	r3, [r3, #0]
 81013f0:	699b      	ldr	r3, [r3, #24]
 81013f2:	f003 0303 	and.w	r3, r3, #3
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d003      	beq.n	8101402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81013fa:	6878      	ldr	r0, [r7, #4]
 81013fc:	f000 f905 	bl	810160a <HAL_TIM_IC_CaptureCallback>
 8101400:	e005      	b.n	810140e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101402:	6878      	ldr	r0, [r7, #4]
 8101404:	f000 f8f7 	bl	81015f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101408:	6878      	ldr	r0, [r7, #4]
 810140a:	f000 f908 	bl	810161e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	2200      	movs	r2, #0
 8101412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	691b      	ldr	r3, [r3, #16]
 810141a:	f003 0304 	and.w	r3, r3, #4
 810141e:	2b04      	cmp	r3, #4
 8101420:	d122      	bne.n	8101468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	681b      	ldr	r3, [r3, #0]
 8101426:	68db      	ldr	r3, [r3, #12]
 8101428:	f003 0304 	and.w	r3, r3, #4
 810142c:	2b04      	cmp	r3, #4
 810142e:	d11b      	bne.n	8101468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	681b      	ldr	r3, [r3, #0]
 8101434:	f06f 0204 	mvn.w	r2, #4
 8101438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	2202      	movs	r2, #2
 810143e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	681b      	ldr	r3, [r3, #0]
 8101444:	699b      	ldr	r3, [r3, #24]
 8101446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810144a:	2b00      	cmp	r3, #0
 810144c:	d003      	beq.n	8101456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810144e:	6878      	ldr	r0, [r7, #4]
 8101450:	f000 f8db 	bl	810160a <HAL_TIM_IC_CaptureCallback>
 8101454:	e005      	b.n	8101462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101456:	6878      	ldr	r0, [r7, #4]
 8101458:	f000 f8cd 	bl	81015f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810145c:	6878      	ldr	r0, [r7, #4]
 810145e:	f000 f8de 	bl	810161e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	2200      	movs	r2, #0
 8101466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	691b      	ldr	r3, [r3, #16]
 810146e:	f003 0308 	and.w	r3, r3, #8
 8101472:	2b08      	cmp	r3, #8
 8101474:	d122      	bne.n	81014bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	68db      	ldr	r3, [r3, #12]
 810147c:	f003 0308 	and.w	r3, r3, #8
 8101480:	2b08      	cmp	r3, #8
 8101482:	d11b      	bne.n	81014bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	f06f 0208 	mvn.w	r2, #8
 810148c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	2204      	movs	r2, #4
 8101492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	681b      	ldr	r3, [r3, #0]
 8101498:	69db      	ldr	r3, [r3, #28]
 810149a:	f003 0303 	and.w	r3, r3, #3
 810149e:	2b00      	cmp	r3, #0
 81014a0:	d003      	beq.n	81014aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014a2:	6878      	ldr	r0, [r7, #4]
 81014a4:	f000 f8b1 	bl	810160a <HAL_TIM_IC_CaptureCallback>
 81014a8:	e005      	b.n	81014b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014aa:	6878      	ldr	r0, [r7, #4]
 81014ac:	f000 f8a3 	bl	81015f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81014b0:	6878      	ldr	r0, [r7, #4]
 81014b2:	f000 f8b4 	bl	810161e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	2200      	movs	r2, #0
 81014ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	691b      	ldr	r3, [r3, #16]
 81014c2:	f003 0310 	and.w	r3, r3, #16
 81014c6:	2b10      	cmp	r3, #16
 81014c8:	d122      	bne.n	8101510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	681b      	ldr	r3, [r3, #0]
 81014ce:	68db      	ldr	r3, [r3, #12]
 81014d0:	f003 0310 	and.w	r3, r3, #16
 81014d4:	2b10      	cmp	r3, #16
 81014d6:	d11b      	bne.n	8101510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81014d8:	687b      	ldr	r3, [r7, #4]
 81014da:	681b      	ldr	r3, [r3, #0]
 81014dc:	f06f 0210 	mvn.w	r2, #16
 81014e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	2208      	movs	r2, #8
 81014e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81014e8:	687b      	ldr	r3, [r7, #4]
 81014ea:	681b      	ldr	r3, [r3, #0]
 81014ec:	69db      	ldr	r3, [r3, #28]
 81014ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81014f2:	2b00      	cmp	r3, #0
 81014f4:	d003      	beq.n	81014fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014f6:	6878      	ldr	r0, [r7, #4]
 81014f8:	f000 f887 	bl	810160a <HAL_TIM_IC_CaptureCallback>
 81014fc:	e005      	b.n	810150a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014fe:	6878      	ldr	r0, [r7, #4]
 8101500:	f000 f879 	bl	81015f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101504:	6878      	ldr	r0, [r7, #4]
 8101506:	f000 f88a 	bl	810161e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	2200      	movs	r2, #0
 810150e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	691b      	ldr	r3, [r3, #16]
 8101516:	f003 0301 	and.w	r3, r3, #1
 810151a:	2b01      	cmp	r3, #1
 810151c:	d10e      	bne.n	810153c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	681b      	ldr	r3, [r3, #0]
 8101522:	68db      	ldr	r3, [r3, #12]
 8101524:	f003 0301 	and.w	r3, r3, #1
 8101528:	2b01      	cmp	r3, #1
 810152a:	d107      	bne.n	810153c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	f06f 0201 	mvn.w	r2, #1
 8101534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8101536:	6878      	ldr	r0, [r7, #4]
 8101538:	f7fe ffe8 	bl	810050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	691b      	ldr	r3, [r3, #16]
 8101542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101546:	2b80      	cmp	r3, #128	; 0x80
 8101548:	d10e      	bne.n	8101568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	68db      	ldr	r3, [r3, #12]
 8101550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101554:	2b80      	cmp	r3, #128	; 0x80
 8101556:	d107      	bne.n	8101568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	681b      	ldr	r3, [r3, #0]
 810155c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101562:	6878      	ldr	r0, [r7, #4]
 8101564:	f000 f914 	bl	8101790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101568:	687b      	ldr	r3, [r7, #4]
 810156a:	681b      	ldr	r3, [r3, #0]
 810156c:	691b      	ldr	r3, [r3, #16]
 810156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101576:	d10e      	bne.n	8101596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	68db      	ldr	r3, [r3, #12]
 810157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101582:	2b80      	cmp	r3, #128	; 0x80
 8101584:	d107      	bne.n	8101596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101586:	687b      	ldr	r3, [r7, #4]
 8101588:	681b      	ldr	r3, [r3, #0]
 810158a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810158e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101590:	6878      	ldr	r0, [r7, #4]
 8101592:	f000 f907 	bl	81017a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	691b      	ldr	r3, [r3, #16]
 810159c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015a0:	2b40      	cmp	r3, #64	; 0x40
 81015a2:	d10e      	bne.n	81015c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81015a4:	687b      	ldr	r3, [r7, #4]
 81015a6:	681b      	ldr	r3, [r3, #0]
 81015a8:	68db      	ldr	r3, [r3, #12]
 81015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015ae:	2b40      	cmp	r3, #64	; 0x40
 81015b0:	d107      	bne.n	81015c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81015ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81015bc:	6878      	ldr	r0, [r7, #4]
 81015be:	f000 f838 	bl	8101632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81015c2:	687b      	ldr	r3, [r7, #4]
 81015c4:	681b      	ldr	r3, [r3, #0]
 81015c6:	691b      	ldr	r3, [r3, #16]
 81015c8:	f003 0320 	and.w	r3, r3, #32
 81015cc:	2b20      	cmp	r3, #32
 81015ce:	d10e      	bne.n	81015ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81015d0:	687b      	ldr	r3, [r7, #4]
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	68db      	ldr	r3, [r3, #12]
 81015d6:	f003 0320 	and.w	r3, r3, #32
 81015da:	2b20      	cmp	r3, #32
 81015dc:	d107      	bne.n	81015ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	681b      	ldr	r3, [r3, #0]
 81015e2:	f06f 0220 	mvn.w	r2, #32
 81015e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81015e8:	6878      	ldr	r0, [r7, #4]
 81015ea:	f000 f8c7 	bl	810177c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81015ee:	bf00      	nop
 81015f0:	3708      	adds	r7, #8
 81015f2:	46bd      	mov	sp, r7
 81015f4:	bd80      	pop	{r7, pc}

081015f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015f6:	b480      	push	{r7}
 81015f8:	b083      	sub	sp, #12
 81015fa:	af00      	add	r7, sp, #0
 81015fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81015fe:	bf00      	nop
 8101600:	370c      	adds	r7, #12
 8101602:	46bd      	mov	sp, r7
 8101604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101608:	4770      	bx	lr

0810160a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810160a:	b480      	push	{r7}
 810160c:	b083      	sub	sp, #12
 810160e:	af00      	add	r7, sp, #0
 8101610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8101612:	bf00      	nop
 8101614:	370c      	adds	r7, #12
 8101616:	46bd      	mov	sp, r7
 8101618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810161c:	4770      	bx	lr

0810161e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810161e:	b480      	push	{r7}
 8101620:	b083      	sub	sp, #12
 8101622:	af00      	add	r7, sp, #0
 8101624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8101626:	bf00      	nop
 8101628:	370c      	adds	r7, #12
 810162a:	46bd      	mov	sp, r7
 810162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101630:	4770      	bx	lr

08101632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101632:	b480      	push	{r7}
 8101634:	b083      	sub	sp, #12
 8101636:	af00      	add	r7, sp, #0
 8101638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810163a:	bf00      	nop
 810163c:	370c      	adds	r7, #12
 810163e:	46bd      	mov	sp, r7
 8101640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101644:	4770      	bx	lr
	...

08101648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8101648:	b480      	push	{r7}
 810164a:	b085      	sub	sp, #20
 810164c:	af00      	add	r7, sp, #0
 810164e:	6078      	str	r0, [r7, #4]
 8101650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	681b      	ldr	r3, [r3, #0]
 8101656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	4a40      	ldr	r2, [pc, #256]	; (810175c <TIM_Base_SetConfig+0x114>)
 810165c:	4293      	cmp	r3, r2
 810165e:	d013      	beq.n	8101688 <TIM_Base_SetConfig+0x40>
 8101660:	687b      	ldr	r3, [r7, #4]
 8101662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101666:	d00f      	beq.n	8101688 <TIM_Base_SetConfig+0x40>
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	4a3d      	ldr	r2, [pc, #244]	; (8101760 <TIM_Base_SetConfig+0x118>)
 810166c:	4293      	cmp	r3, r2
 810166e:	d00b      	beq.n	8101688 <TIM_Base_SetConfig+0x40>
 8101670:	687b      	ldr	r3, [r7, #4]
 8101672:	4a3c      	ldr	r2, [pc, #240]	; (8101764 <TIM_Base_SetConfig+0x11c>)
 8101674:	4293      	cmp	r3, r2
 8101676:	d007      	beq.n	8101688 <TIM_Base_SetConfig+0x40>
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	4a3b      	ldr	r2, [pc, #236]	; (8101768 <TIM_Base_SetConfig+0x120>)
 810167c:	4293      	cmp	r3, r2
 810167e:	d003      	beq.n	8101688 <TIM_Base_SetConfig+0x40>
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	4a3a      	ldr	r2, [pc, #232]	; (810176c <TIM_Base_SetConfig+0x124>)
 8101684:	4293      	cmp	r3, r2
 8101686:	d108      	bne.n	810169a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101688:	68fb      	ldr	r3, [r7, #12]
 810168a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810168e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101690:	683b      	ldr	r3, [r7, #0]
 8101692:	685b      	ldr	r3, [r3, #4]
 8101694:	68fa      	ldr	r2, [r7, #12]
 8101696:	4313      	orrs	r3, r2
 8101698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	4a2f      	ldr	r2, [pc, #188]	; (810175c <TIM_Base_SetConfig+0x114>)
 810169e:	4293      	cmp	r3, r2
 81016a0:	d01f      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016a8:	d01b      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016aa:	687b      	ldr	r3, [r7, #4]
 81016ac:	4a2c      	ldr	r2, [pc, #176]	; (8101760 <TIM_Base_SetConfig+0x118>)
 81016ae:	4293      	cmp	r3, r2
 81016b0:	d017      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	4a2b      	ldr	r2, [pc, #172]	; (8101764 <TIM_Base_SetConfig+0x11c>)
 81016b6:	4293      	cmp	r3, r2
 81016b8:	d013      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	4a2a      	ldr	r2, [pc, #168]	; (8101768 <TIM_Base_SetConfig+0x120>)
 81016be:	4293      	cmp	r3, r2
 81016c0:	d00f      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	4a29      	ldr	r2, [pc, #164]	; (810176c <TIM_Base_SetConfig+0x124>)
 81016c6:	4293      	cmp	r3, r2
 81016c8:	d00b      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	4a28      	ldr	r2, [pc, #160]	; (8101770 <TIM_Base_SetConfig+0x128>)
 81016ce:	4293      	cmp	r3, r2
 81016d0:	d007      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	4a27      	ldr	r2, [pc, #156]	; (8101774 <TIM_Base_SetConfig+0x12c>)
 81016d6:	4293      	cmp	r3, r2
 81016d8:	d003      	beq.n	81016e2 <TIM_Base_SetConfig+0x9a>
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	4a26      	ldr	r2, [pc, #152]	; (8101778 <TIM_Base_SetConfig+0x130>)
 81016de:	4293      	cmp	r3, r2
 81016e0:	d108      	bne.n	81016f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81016e2:	68fb      	ldr	r3, [r7, #12]
 81016e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81016e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81016ea:	683b      	ldr	r3, [r7, #0]
 81016ec:	68db      	ldr	r3, [r3, #12]
 81016ee:	68fa      	ldr	r2, [r7, #12]
 81016f0:	4313      	orrs	r3, r2
 81016f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81016f4:	68fb      	ldr	r3, [r7, #12]
 81016f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81016fa:	683b      	ldr	r3, [r7, #0]
 81016fc:	695b      	ldr	r3, [r3, #20]
 81016fe:	4313      	orrs	r3, r2
 8101700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	68fa      	ldr	r2, [r7, #12]
 8101706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101708:	683b      	ldr	r3, [r7, #0]
 810170a:	689a      	ldr	r2, [r3, #8]
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101710:	683b      	ldr	r3, [r7, #0]
 8101712:	681a      	ldr	r2, [r3, #0]
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	4a10      	ldr	r2, [pc, #64]	; (810175c <TIM_Base_SetConfig+0x114>)
 810171c:	4293      	cmp	r3, r2
 810171e:	d00f      	beq.n	8101740 <TIM_Base_SetConfig+0xf8>
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	4a12      	ldr	r2, [pc, #72]	; (810176c <TIM_Base_SetConfig+0x124>)
 8101724:	4293      	cmp	r3, r2
 8101726:	d00b      	beq.n	8101740 <TIM_Base_SetConfig+0xf8>
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	4a11      	ldr	r2, [pc, #68]	; (8101770 <TIM_Base_SetConfig+0x128>)
 810172c:	4293      	cmp	r3, r2
 810172e:	d007      	beq.n	8101740 <TIM_Base_SetConfig+0xf8>
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	4a10      	ldr	r2, [pc, #64]	; (8101774 <TIM_Base_SetConfig+0x12c>)
 8101734:	4293      	cmp	r3, r2
 8101736:	d003      	beq.n	8101740 <TIM_Base_SetConfig+0xf8>
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	4a0f      	ldr	r2, [pc, #60]	; (8101778 <TIM_Base_SetConfig+0x130>)
 810173c:	4293      	cmp	r3, r2
 810173e:	d103      	bne.n	8101748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101740:	683b      	ldr	r3, [r7, #0]
 8101742:	691a      	ldr	r2, [r3, #16]
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	2201      	movs	r2, #1
 810174c:	615a      	str	r2, [r3, #20]
}
 810174e:	bf00      	nop
 8101750:	3714      	adds	r7, #20
 8101752:	46bd      	mov	sp, r7
 8101754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101758:	4770      	bx	lr
 810175a:	bf00      	nop
 810175c:	40010000 	.word	0x40010000
 8101760:	40000400 	.word	0x40000400
 8101764:	40000800 	.word	0x40000800
 8101768:	40000c00 	.word	0x40000c00
 810176c:	40010400 	.word	0x40010400
 8101770:	40014000 	.word	0x40014000
 8101774:	40014400 	.word	0x40014400
 8101778:	40014800 	.word	0x40014800

0810177c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810177c:	b480      	push	{r7}
 810177e:	b083      	sub	sp, #12
 8101780:	af00      	add	r7, sp, #0
 8101782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101784:	bf00      	nop
 8101786:	370c      	adds	r7, #12
 8101788:	46bd      	mov	sp, r7
 810178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178e:	4770      	bx	lr

08101790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101790:	b480      	push	{r7}
 8101792:	b083      	sub	sp, #12
 8101794:	af00      	add	r7, sp, #0
 8101796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101798:	bf00      	nop
 810179a:	370c      	adds	r7, #12
 810179c:	46bd      	mov	sp, r7
 810179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a2:	4770      	bx	lr

081017a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81017a4:	b480      	push	{r7}
 81017a6:	b083      	sub	sp, #12
 81017a8:	af00      	add	r7, sp, #0
 81017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81017ac:	bf00      	nop
 81017ae:	370c      	adds	r7, #12
 81017b0:	46bd      	mov	sp, r7
 81017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b6:	4770      	bx	lr

081017b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81017b8:	b480      	push	{r7}
 81017ba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81017bc:	bf00      	nop
 81017be:	46bd      	mov	sp, r7
 81017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c4:	4770      	bx	lr
	...

081017c8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81017c8:	b480      	push	{r7}
 81017ca:	b085      	sub	sp, #20
 81017cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81017ce:	f3ef 8305 	mrs	r3, IPSR
 81017d2:	60bb      	str	r3, [r7, #8]
  return(result);
 81017d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81017d6:	2b00      	cmp	r3, #0
 81017d8:	d10f      	bne.n	81017fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81017da:	f3ef 8310 	mrs	r3, PRIMASK
 81017de:	607b      	str	r3, [r7, #4]
  return(result);
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	2b00      	cmp	r3, #0
 81017e4:	d105      	bne.n	81017f2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81017e6:	f3ef 8311 	mrs	r3, BASEPRI
 81017ea:	603b      	str	r3, [r7, #0]
  return(result);
 81017ec:	683b      	ldr	r3, [r7, #0]
 81017ee:	2b00      	cmp	r3, #0
 81017f0:	d007      	beq.n	8101802 <osKernelInitialize+0x3a>
 81017f2:	4b0e      	ldr	r3, [pc, #56]	; (810182c <osKernelInitialize+0x64>)
 81017f4:	681b      	ldr	r3, [r3, #0]
 81017f6:	2b02      	cmp	r3, #2
 81017f8:	d103      	bne.n	8101802 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 81017fa:	f06f 0305 	mvn.w	r3, #5
 81017fe:	60fb      	str	r3, [r7, #12]
 8101800:	e00c      	b.n	810181c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8101802:	4b0a      	ldr	r3, [pc, #40]	; (810182c <osKernelInitialize+0x64>)
 8101804:	681b      	ldr	r3, [r3, #0]
 8101806:	2b00      	cmp	r3, #0
 8101808:	d105      	bne.n	8101816 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810180a:	4b08      	ldr	r3, [pc, #32]	; (810182c <osKernelInitialize+0x64>)
 810180c:	2201      	movs	r2, #1
 810180e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101810:	2300      	movs	r3, #0
 8101812:	60fb      	str	r3, [r7, #12]
 8101814:	e002      	b.n	810181c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8101816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810181a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 810181c:	68fb      	ldr	r3, [r7, #12]
}
 810181e:	4618      	mov	r0, r3
 8101820:	3714      	adds	r7, #20
 8101822:	46bd      	mov	sp, r7
 8101824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101828:	4770      	bx	lr
 810182a:	bf00      	nop
 810182c:	10000034 	.word	0x10000034

08101830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101830:	b580      	push	{r7, lr}
 8101832:	b084      	sub	sp, #16
 8101834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101836:	f3ef 8305 	mrs	r3, IPSR
 810183a:	60bb      	str	r3, [r7, #8]
  return(result);
 810183c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810183e:	2b00      	cmp	r3, #0
 8101840:	d10f      	bne.n	8101862 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8101842:	f3ef 8310 	mrs	r3, PRIMASK
 8101846:	607b      	str	r3, [r7, #4]
  return(result);
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	2b00      	cmp	r3, #0
 810184c:	d105      	bne.n	810185a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810184e:	f3ef 8311 	mrs	r3, BASEPRI
 8101852:	603b      	str	r3, [r7, #0]
  return(result);
 8101854:	683b      	ldr	r3, [r7, #0]
 8101856:	2b00      	cmp	r3, #0
 8101858:	d007      	beq.n	810186a <osKernelStart+0x3a>
 810185a:	4b0f      	ldr	r3, [pc, #60]	; (8101898 <osKernelStart+0x68>)
 810185c:	681b      	ldr	r3, [r3, #0]
 810185e:	2b02      	cmp	r3, #2
 8101860:	d103      	bne.n	810186a <osKernelStart+0x3a>
    stat = osErrorISR;
 8101862:	f06f 0305 	mvn.w	r3, #5
 8101866:	60fb      	str	r3, [r7, #12]
 8101868:	e010      	b.n	810188c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 810186a:	4b0b      	ldr	r3, [pc, #44]	; (8101898 <osKernelStart+0x68>)
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	2b01      	cmp	r3, #1
 8101870:	d109      	bne.n	8101886 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101872:	f7ff ffa1 	bl	81017b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8101876:	4b08      	ldr	r3, [pc, #32]	; (8101898 <osKernelStart+0x68>)
 8101878:	2202      	movs	r2, #2
 810187a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810187c:	f001 fe3c 	bl	81034f8 <vTaskStartScheduler>
      stat = osOK;
 8101880:	2300      	movs	r3, #0
 8101882:	60fb      	str	r3, [r7, #12]
 8101884:	e002      	b.n	810188c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8101886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810188a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 810188c:	68fb      	ldr	r3, [r7, #12]
}
 810188e:	4618      	mov	r0, r3
 8101890:	3710      	adds	r7, #16
 8101892:	46bd      	mov	sp, r7
 8101894:	bd80      	pop	{r7, pc}
 8101896:	bf00      	nop
 8101898:	10000034 	.word	0x10000034

0810189c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b090      	sub	sp, #64	; 0x40
 81018a0:	af04      	add	r7, sp, #16
 81018a2:	60f8      	str	r0, [r7, #12]
 81018a4:	60b9      	str	r1, [r7, #8]
 81018a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81018a8:	2300      	movs	r3, #0
 81018aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81018ac:	f3ef 8305 	mrs	r3, IPSR
 81018b0:	61fb      	str	r3, [r7, #28]
  return(result);
 81018b2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	f040 808f 	bne.w	81019d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81018ba:	f3ef 8310 	mrs	r3, PRIMASK
 81018be:	61bb      	str	r3, [r7, #24]
  return(result);
 81018c0:	69bb      	ldr	r3, [r7, #24]
 81018c2:	2b00      	cmp	r3, #0
 81018c4:	d105      	bne.n	81018d2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81018c6:	f3ef 8311 	mrs	r3, BASEPRI
 81018ca:	617b      	str	r3, [r7, #20]
  return(result);
 81018cc:	697b      	ldr	r3, [r7, #20]
 81018ce:	2b00      	cmp	r3, #0
 81018d0:	d003      	beq.n	81018da <osThreadNew+0x3e>
 81018d2:	4b44      	ldr	r3, [pc, #272]	; (81019e4 <osThreadNew+0x148>)
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	2b02      	cmp	r3, #2
 81018d8:	d07e      	beq.n	81019d8 <osThreadNew+0x13c>
 81018da:	68fb      	ldr	r3, [r7, #12]
 81018dc:	2b00      	cmp	r3, #0
 81018de:	d07b      	beq.n	81019d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 81018e0:	2380      	movs	r3, #128	; 0x80
 81018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 81018e4:	2318      	movs	r3, #24
 81018e6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 81018e8:	2300      	movs	r3, #0
 81018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 81018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81018f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d045      	beq.n	8101984 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	2b00      	cmp	r3, #0
 81018fe:	d002      	beq.n	8101906 <osThreadNew+0x6a>
        name = attr->name;
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	699b      	ldr	r3, [r3, #24]
 810190a:	2b00      	cmp	r3, #0
 810190c:	d002      	beq.n	8101914 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	699b      	ldr	r3, [r3, #24]
 8101912:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8101914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101916:	2b00      	cmp	r3, #0
 8101918:	d008      	beq.n	810192c <osThreadNew+0x90>
 810191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810191c:	2b38      	cmp	r3, #56	; 0x38
 810191e:	d805      	bhi.n	810192c <osThreadNew+0x90>
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	685b      	ldr	r3, [r3, #4]
 8101924:	f003 0301 	and.w	r3, r3, #1
 8101928:	2b00      	cmp	r3, #0
 810192a:	d001      	beq.n	8101930 <osThreadNew+0x94>
        return (NULL);
 810192c:	2300      	movs	r3, #0
 810192e:	e054      	b.n	81019da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	695b      	ldr	r3, [r3, #20]
 8101934:	2b00      	cmp	r3, #0
 8101936:	d003      	beq.n	8101940 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	695b      	ldr	r3, [r3, #20]
 810193c:	089b      	lsrs	r3, r3, #2
 810193e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	689b      	ldr	r3, [r3, #8]
 8101944:	2b00      	cmp	r3, #0
 8101946:	d00e      	beq.n	8101966 <osThreadNew+0xca>
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	68db      	ldr	r3, [r3, #12]
 810194c:	2b5b      	cmp	r3, #91	; 0x5b
 810194e:	d90a      	bls.n	8101966 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101954:	2b00      	cmp	r3, #0
 8101956:	d006      	beq.n	8101966 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	695b      	ldr	r3, [r3, #20]
 810195c:	2b00      	cmp	r3, #0
 810195e:	d002      	beq.n	8101966 <osThreadNew+0xca>
        mem = 1;
 8101960:	2301      	movs	r3, #1
 8101962:	623b      	str	r3, [r7, #32]
 8101964:	e010      	b.n	8101988 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	689b      	ldr	r3, [r3, #8]
 810196a:	2b00      	cmp	r3, #0
 810196c:	d10c      	bne.n	8101988 <osThreadNew+0xec>
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	68db      	ldr	r3, [r3, #12]
 8101972:	2b00      	cmp	r3, #0
 8101974:	d108      	bne.n	8101988 <osThreadNew+0xec>
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	691b      	ldr	r3, [r3, #16]
 810197a:	2b00      	cmp	r3, #0
 810197c:	d104      	bne.n	8101988 <osThreadNew+0xec>
          mem = 0;
 810197e:	2300      	movs	r3, #0
 8101980:	623b      	str	r3, [r7, #32]
 8101982:	e001      	b.n	8101988 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8101984:	2300      	movs	r3, #0
 8101986:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8101988:	6a3b      	ldr	r3, [r7, #32]
 810198a:	2b01      	cmp	r3, #1
 810198c:	d110      	bne.n	81019b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8101992:	687a      	ldr	r2, [r7, #4]
 8101994:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101996:	9202      	str	r2, [sp, #8]
 8101998:	9301      	str	r3, [sp, #4]
 810199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810199c:	9300      	str	r3, [sp, #0]
 810199e:	68bb      	ldr	r3, [r7, #8]
 81019a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81019a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81019a4:	68f8      	ldr	r0, [r7, #12]
 81019a6:	f001 fbd5 	bl	8103154 <xTaskCreateStatic>
 81019aa:	4603      	mov	r3, r0
 81019ac:	613b      	str	r3, [r7, #16]
 81019ae:	e013      	b.n	81019d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81019b0:	6a3b      	ldr	r3, [r7, #32]
 81019b2:	2b00      	cmp	r3, #0
 81019b4:	d110      	bne.n	81019d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81019b8:	b29a      	uxth	r2, r3
 81019ba:	f107 0310 	add.w	r3, r7, #16
 81019be:	9301      	str	r3, [sp, #4]
 81019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019c2:	9300      	str	r3, [sp, #0]
 81019c4:	68bb      	ldr	r3, [r7, #8]
 81019c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81019c8:	68f8      	ldr	r0, [r7, #12]
 81019ca:	f001 fc1d 	bl	8103208 <xTaskCreate>
 81019ce:	4603      	mov	r3, r0
 81019d0:	2b01      	cmp	r3, #1
 81019d2:	d001      	beq.n	81019d8 <osThreadNew+0x13c>
          hTask = NULL;
 81019d4:	2300      	movs	r3, #0
 81019d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81019d8:	693b      	ldr	r3, [r7, #16]
}
 81019da:	4618      	mov	r0, r3
 81019dc:	3730      	adds	r7, #48	; 0x30
 81019de:	46bd      	mov	sp, r7
 81019e0:	bd80      	pop	{r7, pc}
 81019e2:	bf00      	nop
 81019e4:	10000034 	.word	0x10000034

081019e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 81019e8:	b580      	push	{r7, lr}
 81019ea:	b086      	sub	sp, #24
 81019ec:	af00      	add	r7, sp, #0
 81019ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81019f0:	f3ef 8305 	mrs	r3, IPSR
 81019f4:	613b      	str	r3, [r7, #16]
  return(result);
 81019f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 81019f8:	2b00      	cmp	r3, #0
 81019fa:	d10f      	bne.n	8101a1c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81019fc:	f3ef 8310 	mrs	r3, PRIMASK
 8101a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8101a02:	68fb      	ldr	r3, [r7, #12]
 8101a04:	2b00      	cmp	r3, #0
 8101a06:	d105      	bne.n	8101a14 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8101a08:	f3ef 8311 	mrs	r3, BASEPRI
 8101a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8101a0e:	68bb      	ldr	r3, [r7, #8]
 8101a10:	2b00      	cmp	r3, #0
 8101a12:	d007      	beq.n	8101a24 <osDelay+0x3c>
 8101a14:	4b0a      	ldr	r3, [pc, #40]	; (8101a40 <osDelay+0x58>)
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	2b02      	cmp	r3, #2
 8101a1a:	d103      	bne.n	8101a24 <osDelay+0x3c>
    stat = osErrorISR;
 8101a1c:	f06f 0305 	mvn.w	r3, #5
 8101a20:	617b      	str	r3, [r7, #20]
 8101a22:	e007      	b.n	8101a34 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8101a24:	2300      	movs	r3, #0
 8101a26:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8101a28:	687b      	ldr	r3, [r7, #4]
 8101a2a:	2b00      	cmp	r3, #0
 8101a2c:	d002      	beq.n	8101a34 <osDelay+0x4c>
      vTaskDelay(ticks);
 8101a2e:	6878      	ldr	r0, [r7, #4]
 8101a30:	f001 fd2e 	bl	8103490 <vTaskDelay>
    }
  }

  return (stat);
 8101a34:	697b      	ldr	r3, [r7, #20]
}
 8101a36:	4618      	mov	r0, r3
 8101a38:	3718      	adds	r7, #24
 8101a3a:	46bd      	mov	sp, r7
 8101a3c:	bd80      	pop	{r7, pc}
 8101a3e:	bf00      	nop
 8101a40:	10000034 	.word	0x10000034

08101a44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8101a44:	b580      	push	{r7, lr}
 8101a46:	b08c      	sub	sp, #48	; 0x30
 8101a48:	af02      	add	r7, sp, #8
 8101a4a:	60f8      	str	r0, [r7, #12]
 8101a4c:	60b9      	str	r1, [r7, #8]
 8101a4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8101a50:	2300      	movs	r3, #0
 8101a52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101a54:	f3ef 8305 	mrs	r3, IPSR
 8101a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8101a5a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	d170      	bne.n	8101b42 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8101a60:	f3ef 8310 	mrs	r3, PRIMASK
 8101a64:	617b      	str	r3, [r7, #20]
  return(result);
 8101a66:	697b      	ldr	r3, [r7, #20]
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	d105      	bne.n	8101a78 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8101a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8101a70:	613b      	str	r3, [r7, #16]
  return(result);
 8101a72:	693b      	ldr	r3, [r7, #16]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d003      	beq.n	8101a80 <osMessageQueueNew+0x3c>
 8101a78:	4b34      	ldr	r3, [pc, #208]	; (8101b4c <osMessageQueueNew+0x108>)
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	2b02      	cmp	r3, #2
 8101a7e:	d060      	beq.n	8101b42 <osMessageQueueNew+0xfe>
 8101a80:	68fb      	ldr	r3, [r7, #12]
 8101a82:	2b00      	cmp	r3, #0
 8101a84:	d05d      	beq.n	8101b42 <osMessageQueueNew+0xfe>
 8101a86:	68bb      	ldr	r3, [r7, #8]
 8101a88:	2b00      	cmp	r3, #0
 8101a8a:	d05a      	beq.n	8101b42 <osMessageQueueNew+0xfe>
    mem = -1;
 8101a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101a90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	2b00      	cmp	r3, #0
 8101a96:	d029      	beq.n	8101aec <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	689b      	ldr	r3, [r3, #8]
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d012      	beq.n	8101ac6 <osMessageQueueNew+0x82>
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	68db      	ldr	r3, [r3, #12]
 8101aa4:	2b4f      	cmp	r3, #79	; 0x4f
 8101aa6:	d90e      	bls.n	8101ac6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d00a      	beq.n	8101ac6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	695a      	ldr	r2, [r3, #20]
 8101ab4:	68fb      	ldr	r3, [r7, #12]
 8101ab6:	68b9      	ldr	r1, [r7, #8]
 8101ab8:	fb01 f303 	mul.w	r3, r1, r3
 8101abc:	429a      	cmp	r2, r3
 8101abe:	d302      	bcc.n	8101ac6 <osMessageQueueNew+0x82>
        mem = 1;
 8101ac0:	2301      	movs	r3, #1
 8101ac2:	623b      	str	r3, [r7, #32]
 8101ac4:	e014      	b.n	8101af0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	689b      	ldr	r3, [r3, #8]
 8101aca:	2b00      	cmp	r3, #0
 8101acc:	d110      	bne.n	8101af0 <osMessageQueueNew+0xac>
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	68db      	ldr	r3, [r3, #12]
 8101ad2:	2b00      	cmp	r3, #0
 8101ad4:	d10c      	bne.n	8101af0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d108      	bne.n	8101af0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	695b      	ldr	r3, [r3, #20]
 8101ae2:	2b00      	cmp	r3, #0
 8101ae4:	d104      	bne.n	8101af0 <osMessageQueueNew+0xac>
          mem = 0;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	623b      	str	r3, [r7, #32]
 8101aea:	e001      	b.n	8101af0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8101aec:	2300      	movs	r3, #0
 8101aee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8101af0:	6a3b      	ldr	r3, [r7, #32]
 8101af2:	2b01      	cmp	r3, #1
 8101af4:	d10c      	bne.n	8101b10 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	691a      	ldr	r2, [r3, #16]
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	6899      	ldr	r1, [r3, #8]
 8101afe:	2300      	movs	r3, #0
 8101b00:	9300      	str	r3, [sp, #0]
 8101b02:	460b      	mov	r3, r1
 8101b04:	68b9      	ldr	r1, [r7, #8]
 8101b06:	68f8      	ldr	r0, [r7, #12]
 8101b08:	f000 fdfa 	bl	8102700 <xQueueGenericCreateStatic>
 8101b0c:	6278      	str	r0, [r7, #36]	; 0x24
 8101b0e:	e008      	b.n	8101b22 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8101b10:	6a3b      	ldr	r3, [r7, #32]
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d105      	bne.n	8101b22 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8101b16:	2200      	movs	r2, #0
 8101b18:	68b9      	ldr	r1, [r7, #8]
 8101b1a:	68f8      	ldr	r0, [r7, #12]
 8101b1c:	f000 fe63 	bl	81027e6 <xQueueGenericCreate>
 8101b20:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8101b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b24:	2b00      	cmp	r3, #0
 8101b26:	d00c      	beq.n	8101b42 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	2b00      	cmp	r3, #0
 8101b2c:	d003      	beq.n	8101b36 <osMessageQueueNew+0xf2>
        name = attr->name;
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	61fb      	str	r3, [r7, #28]
 8101b34:	e001      	b.n	8101b3a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8101b36:	2300      	movs	r3, #0
 8101b38:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8101b3a:	69f9      	ldr	r1, [r7, #28]
 8101b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101b3e:	f001 faad 	bl	810309c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8101b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8101b44:	4618      	mov	r0, r3
 8101b46:	3728      	adds	r7, #40	; 0x28
 8101b48:	46bd      	mov	sp, r7
 8101b4a:	bd80      	pop	{r7, pc}
 8101b4c:	10000034 	.word	0x10000034

08101b50 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8101b50:	b580      	push	{r7, lr}
 8101b52:	b08a      	sub	sp, #40	; 0x28
 8101b54:	af00      	add	r7, sp, #0
 8101b56:	60f8      	str	r0, [r7, #12]
 8101b58:	60b9      	str	r1, [r7, #8]
 8101b5a:	607a      	str	r2, [r7, #4]
 8101b5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8101b5e:	68fb      	ldr	r3, [r7, #12]
 8101b60:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8101b62:	2300      	movs	r3, #0
 8101b64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101b66:	f3ef 8305 	mrs	r3, IPSR
 8101b6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8101b6c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8101b6e:	2b00      	cmp	r3, #0
 8101b70:	d10f      	bne.n	8101b92 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8101b72:	f3ef 8310 	mrs	r3, PRIMASK
 8101b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8101b78:	69bb      	ldr	r3, [r7, #24]
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	d105      	bne.n	8101b8a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8101b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8101b82:	617b      	str	r3, [r7, #20]
  return(result);
 8101b84:	697b      	ldr	r3, [r7, #20]
 8101b86:	2b00      	cmp	r3, #0
 8101b88:	d02c      	beq.n	8101be4 <osMessageQueueGet+0x94>
 8101b8a:	4b28      	ldr	r3, [pc, #160]	; (8101c2c <osMessageQueueGet+0xdc>)
 8101b8c:	681b      	ldr	r3, [r3, #0]
 8101b8e:	2b02      	cmp	r3, #2
 8101b90:	d128      	bne.n	8101be4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8101b92:	6a3b      	ldr	r3, [r7, #32]
 8101b94:	2b00      	cmp	r3, #0
 8101b96:	d005      	beq.n	8101ba4 <osMessageQueueGet+0x54>
 8101b98:	68bb      	ldr	r3, [r7, #8]
 8101b9a:	2b00      	cmp	r3, #0
 8101b9c:	d002      	beq.n	8101ba4 <osMessageQueueGet+0x54>
 8101b9e:	683b      	ldr	r3, [r7, #0]
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	d003      	beq.n	8101bac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8101ba4:	f06f 0303 	mvn.w	r3, #3
 8101ba8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8101baa:	e038      	b.n	8101c1e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8101bac:	2300      	movs	r3, #0
 8101bae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8101bb0:	f107 0310 	add.w	r3, r7, #16
 8101bb4:	461a      	mov	r2, r3
 8101bb6:	68b9      	ldr	r1, [r7, #8]
 8101bb8:	6a38      	ldr	r0, [r7, #32]
 8101bba:	f001 f8e1 	bl	8102d80 <xQueueReceiveFromISR>
 8101bbe:	4603      	mov	r3, r0
 8101bc0:	2b01      	cmp	r3, #1
 8101bc2:	d003      	beq.n	8101bcc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8101bc4:	f06f 0302 	mvn.w	r3, #2
 8101bc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8101bca:	e028      	b.n	8101c1e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8101bcc:	693b      	ldr	r3, [r7, #16]
 8101bce:	2b00      	cmp	r3, #0
 8101bd0:	d025      	beq.n	8101c1e <osMessageQueueGet+0xce>
 8101bd2:	4b17      	ldr	r3, [pc, #92]	; (8101c30 <osMessageQueueGet+0xe0>)
 8101bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101bd8:	601a      	str	r2, [r3, #0]
 8101bda:	f3bf 8f4f 	dsb	sy
 8101bde:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8101be2:	e01c      	b.n	8101c1e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8101be4:	6a3b      	ldr	r3, [r7, #32]
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	d002      	beq.n	8101bf0 <osMessageQueueGet+0xa0>
 8101bea:	68bb      	ldr	r3, [r7, #8]
 8101bec:	2b00      	cmp	r3, #0
 8101bee:	d103      	bne.n	8101bf8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8101bf0:	f06f 0303 	mvn.w	r3, #3
 8101bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8101bf6:	e013      	b.n	8101c20 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8101bf8:	683a      	ldr	r2, [r7, #0]
 8101bfa:	68b9      	ldr	r1, [r7, #8]
 8101bfc:	6a38      	ldr	r0, [r7, #32]
 8101bfe:	f000 ffe3 	bl	8102bc8 <xQueueReceive>
 8101c02:	4603      	mov	r3, r0
 8101c04:	2b01      	cmp	r3, #1
 8101c06:	d00b      	beq.n	8101c20 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8101c08:	683b      	ldr	r3, [r7, #0]
 8101c0a:	2b00      	cmp	r3, #0
 8101c0c:	d003      	beq.n	8101c16 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8101c0e:	f06f 0301 	mvn.w	r3, #1
 8101c12:	627b      	str	r3, [r7, #36]	; 0x24
 8101c14:	e004      	b.n	8101c20 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8101c16:	f06f 0302 	mvn.w	r3, #2
 8101c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8101c1c:	e000      	b.n	8101c20 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8101c1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8101c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8101c22:	4618      	mov	r0, r3
 8101c24:	3728      	adds	r7, #40	; 0x28
 8101c26:	46bd      	mov	sp, r7
 8101c28:	bd80      	pop	{r7, pc}
 8101c2a:	bf00      	nop
 8101c2c:	10000034 	.word	0x10000034
 8101c30:	e000ed04 	.word	0xe000ed04

08101c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8101c34:	b480      	push	{r7}
 8101c36:	b085      	sub	sp, #20
 8101c38:	af00      	add	r7, sp, #0
 8101c3a:	60f8      	str	r0, [r7, #12]
 8101c3c:	60b9      	str	r1, [r7, #8]
 8101c3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8101c40:	68fb      	ldr	r3, [r7, #12]
 8101c42:	4a07      	ldr	r2, [pc, #28]	; (8101c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8101c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101c46:	68bb      	ldr	r3, [r7, #8]
 8101c48:	4a06      	ldr	r2, [pc, #24]	; (8101c64 <vApplicationGetIdleTaskMemory+0x30>)
 8101c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	2280      	movs	r2, #128	; 0x80
 8101c50:	601a      	str	r2, [r3, #0]
}
 8101c52:	bf00      	nop
 8101c54:	3714      	adds	r7, #20
 8101c56:	46bd      	mov	sp, r7
 8101c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c5c:	4770      	bx	lr
 8101c5e:	bf00      	nop
 8101c60:	10000038 	.word	0x10000038
 8101c64:	10000094 	.word	0x10000094

08101c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101c68:	b480      	push	{r7}
 8101c6a:	b085      	sub	sp, #20
 8101c6c:	af00      	add	r7, sp, #0
 8101c6e:	60f8      	str	r0, [r7, #12]
 8101c70:	60b9      	str	r1, [r7, #8]
 8101c72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101c74:	68fb      	ldr	r3, [r7, #12]
 8101c76:	4a07      	ldr	r2, [pc, #28]	; (8101c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8101c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101c7a:	68bb      	ldr	r3, [r7, #8]
 8101c7c:	4a06      	ldr	r2, [pc, #24]	; (8101c98 <vApplicationGetTimerTaskMemory+0x30>)
 8101c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101c86:	601a      	str	r2, [r3, #0]
}
 8101c88:	bf00      	nop
 8101c8a:	3714      	adds	r7, #20
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c92:	4770      	bx	lr
 8101c94:	10000294 	.word	0x10000294
 8101c98:	100002f0 	.word	0x100002f0

08101c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101c9c:	b580      	push	{r7, lr}
 8101c9e:	b08a      	sub	sp, #40	; 0x28
 8101ca0:	af00      	add	r7, sp, #0
 8101ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101ca4:	2300      	movs	r3, #0
 8101ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101ca8:	f001 fc8a 	bl	81035c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101cac:	4b57      	ldr	r3, [pc, #348]	; (8101e0c <pvPortMalloc+0x170>)
 8101cae:	681b      	ldr	r3, [r3, #0]
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d101      	bne.n	8101cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8101cb4:	f000 f90c 	bl	8101ed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101cb8:	4b55      	ldr	r3, [pc, #340]	; (8101e10 <pvPortMalloc+0x174>)
 8101cba:	681a      	ldr	r2, [r3, #0]
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	4013      	ands	r3, r2
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	f040 808c 	bne.w	8101dde <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	2b00      	cmp	r3, #0
 8101cca:	d01c      	beq.n	8101d06 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8101ccc:	2208      	movs	r2, #8
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	4413      	add	r3, r2
 8101cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	f003 0307 	and.w	r3, r3, #7
 8101cda:	2b00      	cmp	r3, #0
 8101cdc:	d013      	beq.n	8101d06 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	f023 0307 	bic.w	r3, r3, #7
 8101ce4:	3308      	adds	r3, #8
 8101ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	f003 0307 	and.w	r3, r3, #7
 8101cee:	2b00      	cmp	r3, #0
 8101cf0:	d009      	beq.n	8101d06 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101cf6:	f383 8811 	msr	BASEPRI, r3
 8101cfa:	f3bf 8f6f 	isb	sy
 8101cfe:	f3bf 8f4f 	dsb	sy
 8101d02:	617b      	str	r3, [r7, #20]
 8101d04:	e7fe      	b.n	8101d04 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	2b00      	cmp	r3, #0
 8101d0a:	d068      	beq.n	8101dde <pvPortMalloc+0x142>
 8101d0c:	4b41      	ldr	r3, [pc, #260]	; (8101e14 <pvPortMalloc+0x178>)
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	687a      	ldr	r2, [r7, #4]
 8101d12:	429a      	cmp	r2, r3
 8101d14:	d863      	bhi.n	8101dde <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101d16:	4b40      	ldr	r3, [pc, #256]	; (8101e18 <pvPortMalloc+0x17c>)
 8101d18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101d1a:	4b3f      	ldr	r3, [pc, #252]	; (8101e18 <pvPortMalloc+0x17c>)
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101d20:	e004      	b.n	8101d2c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8101d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d2e:	685b      	ldr	r3, [r3, #4]
 8101d30:	687a      	ldr	r2, [r7, #4]
 8101d32:	429a      	cmp	r2, r3
 8101d34:	d903      	bls.n	8101d3e <pvPortMalloc+0xa2>
 8101d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	2b00      	cmp	r3, #0
 8101d3c:	d1f1      	bne.n	8101d22 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101d3e:	4b33      	ldr	r3, [pc, #204]	; (8101e0c <pvPortMalloc+0x170>)
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101d44:	429a      	cmp	r2, r3
 8101d46:	d04a      	beq.n	8101dde <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101d48:	6a3b      	ldr	r3, [r7, #32]
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	2208      	movs	r2, #8
 8101d4e:	4413      	add	r3, r2
 8101d50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d54:	681a      	ldr	r2, [r3, #0]
 8101d56:	6a3b      	ldr	r3, [r7, #32]
 8101d58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d5c:	685a      	ldr	r2, [r3, #4]
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	1ad2      	subs	r2, r2, r3
 8101d62:	2308      	movs	r3, #8
 8101d64:	005b      	lsls	r3, r3, #1
 8101d66:	429a      	cmp	r2, r3
 8101d68:	d91e      	bls.n	8101da8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	4413      	add	r3, r2
 8101d70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101d72:	69bb      	ldr	r3, [r7, #24]
 8101d74:	f003 0307 	and.w	r3, r3, #7
 8101d78:	2b00      	cmp	r3, #0
 8101d7a:	d009      	beq.n	8101d90 <pvPortMalloc+0xf4>
 8101d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101d80:	f383 8811 	msr	BASEPRI, r3
 8101d84:	f3bf 8f6f 	isb	sy
 8101d88:	f3bf 8f4f 	dsb	sy
 8101d8c:	613b      	str	r3, [r7, #16]
 8101d8e:	e7fe      	b.n	8101d8e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d92:	685a      	ldr	r2, [r3, #4]
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	1ad2      	subs	r2, r2, r3
 8101d98:	69bb      	ldr	r3, [r7, #24]
 8101d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d9e:	687a      	ldr	r2, [r7, #4]
 8101da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101da2:	69b8      	ldr	r0, [r7, #24]
 8101da4:	f000 f8f6 	bl	8101f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101da8:	4b1a      	ldr	r3, [pc, #104]	; (8101e14 <pvPortMalloc+0x178>)
 8101daa:	681a      	ldr	r2, [r3, #0]
 8101dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dae:	685b      	ldr	r3, [r3, #4]
 8101db0:	1ad3      	subs	r3, r2, r3
 8101db2:	4a18      	ldr	r2, [pc, #96]	; (8101e14 <pvPortMalloc+0x178>)
 8101db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101db6:	4b17      	ldr	r3, [pc, #92]	; (8101e14 <pvPortMalloc+0x178>)
 8101db8:	681a      	ldr	r2, [r3, #0]
 8101dba:	4b18      	ldr	r3, [pc, #96]	; (8101e1c <pvPortMalloc+0x180>)
 8101dbc:	681b      	ldr	r3, [r3, #0]
 8101dbe:	429a      	cmp	r2, r3
 8101dc0:	d203      	bcs.n	8101dca <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101dc2:	4b14      	ldr	r3, [pc, #80]	; (8101e14 <pvPortMalloc+0x178>)
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	4a15      	ldr	r2, [pc, #84]	; (8101e1c <pvPortMalloc+0x180>)
 8101dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dcc:	685a      	ldr	r2, [r3, #4]
 8101dce:	4b10      	ldr	r3, [pc, #64]	; (8101e10 <pvPortMalloc+0x174>)
 8101dd0:	681b      	ldr	r3, [r3, #0]
 8101dd2:	431a      	orrs	r2, r3
 8101dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dda:	2200      	movs	r2, #0
 8101ddc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101dde:	f001 fbfd 	bl	81035dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101de2:	69fb      	ldr	r3, [r7, #28]
 8101de4:	f003 0307 	and.w	r3, r3, #7
 8101de8:	2b00      	cmp	r3, #0
 8101dea:	d009      	beq.n	8101e00 <pvPortMalloc+0x164>
 8101dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101df0:	f383 8811 	msr	BASEPRI, r3
 8101df4:	f3bf 8f6f 	isb	sy
 8101df8:	f3bf 8f4f 	dsb	sy
 8101dfc:	60fb      	str	r3, [r7, #12]
 8101dfe:	e7fe      	b.n	8101dfe <pvPortMalloc+0x162>
	return pvReturn;
 8101e00:	69fb      	ldr	r3, [r7, #28]
}
 8101e02:	4618      	mov	r0, r3
 8101e04:	3728      	adds	r7, #40	; 0x28
 8101e06:	46bd      	mov	sp, r7
 8101e08:	bd80      	pop	{r7, pc}
 8101e0a:	bf00      	nop
 8101e0c:	100042f8 	.word	0x100042f8
 8101e10:	10004304 	.word	0x10004304
 8101e14:	100042fc 	.word	0x100042fc
 8101e18:	100042f0 	.word	0x100042f0
 8101e1c:	10004300 	.word	0x10004300

08101e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	2b00      	cmp	r3, #0
 8101e30:	d046      	beq.n	8101ec0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101e32:	2308      	movs	r3, #8
 8101e34:	425b      	negs	r3, r3
 8101e36:	697a      	ldr	r2, [r7, #20]
 8101e38:	4413      	add	r3, r2
 8101e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101e3c:	697b      	ldr	r3, [r7, #20]
 8101e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101e40:	693b      	ldr	r3, [r7, #16]
 8101e42:	685a      	ldr	r2, [r3, #4]
 8101e44:	4b20      	ldr	r3, [pc, #128]	; (8101ec8 <vPortFree+0xa8>)
 8101e46:	681b      	ldr	r3, [r3, #0]
 8101e48:	4013      	ands	r3, r2
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d109      	bne.n	8101e62 <vPortFree+0x42>
 8101e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e52:	f383 8811 	msr	BASEPRI, r3
 8101e56:	f3bf 8f6f 	isb	sy
 8101e5a:	f3bf 8f4f 	dsb	sy
 8101e5e:	60fb      	str	r3, [r7, #12]
 8101e60:	e7fe      	b.n	8101e60 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101e62:	693b      	ldr	r3, [r7, #16]
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d009      	beq.n	8101e7e <vPortFree+0x5e>
 8101e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e6e:	f383 8811 	msr	BASEPRI, r3
 8101e72:	f3bf 8f6f 	isb	sy
 8101e76:	f3bf 8f4f 	dsb	sy
 8101e7a:	60bb      	str	r3, [r7, #8]
 8101e7c:	e7fe      	b.n	8101e7c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101e7e:	693b      	ldr	r3, [r7, #16]
 8101e80:	685a      	ldr	r2, [r3, #4]
 8101e82:	4b11      	ldr	r3, [pc, #68]	; (8101ec8 <vPortFree+0xa8>)
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	4013      	ands	r3, r2
 8101e88:	2b00      	cmp	r3, #0
 8101e8a:	d019      	beq.n	8101ec0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101e8c:	693b      	ldr	r3, [r7, #16]
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	2b00      	cmp	r3, #0
 8101e92:	d115      	bne.n	8101ec0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101e94:	693b      	ldr	r3, [r7, #16]
 8101e96:	685a      	ldr	r2, [r3, #4]
 8101e98:	4b0b      	ldr	r3, [pc, #44]	; (8101ec8 <vPortFree+0xa8>)
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	43db      	mvns	r3, r3
 8101e9e:	401a      	ands	r2, r3
 8101ea0:	693b      	ldr	r3, [r7, #16]
 8101ea2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101ea4:	f001 fb8c 	bl	81035c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101ea8:	693b      	ldr	r3, [r7, #16]
 8101eaa:	685a      	ldr	r2, [r3, #4]
 8101eac:	4b07      	ldr	r3, [pc, #28]	; (8101ecc <vPortFree+0xac>)
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	4413      	add	r3, r2
 8101eb2:	4a06      	ldr	r2, [pc, #24]	; (8101ecc <vPortFree+0xac>)
 8101eb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101eb6:	6938      	ldr	r0, [r7, #16]
 8101eb8:	f000 f86c 	bl	8101f94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8101ebc:	f001 fb8e 	bl	81035dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8101ec0:	bf00      	nop
 8101ec2:	3718      	adds	r7, #24
 8101ec4:	46bd      	mov	sp, r7
 8101ec6:	bd80      	pop	{r7, pc}
 8101ec8:	10004304 	.word	0x10004304
 8101ecc:	100042fc 	.word	0x100042fc

08101ed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101ed0:	b480      	push	{r7}
 8101ed2:	b085      	sub	sp, #20
 8101ed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8101ed6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8101eda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8101edc:	4b27      	ldr	r3, [pc, #156]	; (8101f7c <prvHeapInit+0xac>)
 8101ede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101ee0:	68fb      	ldr	r3, [r7, #12]
 8101ee2:	f003 0307 	and.w	r3, r3, #7
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d00c      	beq.n	8101f04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8101eea:	68fb      	ldr	r3, [r7, #12]
 8101eec:	3307      	adds	r3, #7
 8101eee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101ef0:	68fb      	ldr	r3, [r7, #12]
 8101ef2:	f023 0307 	bic.w	r3, r3, #7
 8101ef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101ef8:	68ba      	ldr	r2, [r7, #8]
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	1ad3      	subs	r3, r2, r3
 8101efe:	4a1f      	ldr	r2, [pc, #124]	; (8101f7c <prvHeapInit+0xac>)
 8101f00:	4413      	add	r3, r2
 8101f02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101f04:	68fb      	ldr	r3, [r7, #12]
 8101f06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101f08:	4a1d      	ldr	r2, [pc, #116]	; (8101f80 <prvHeapInit+0xb0>)
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101f0e:	4b1c      	ldr	r3, [pc, #112]	; (8101f80 <prvHeapInit+0xb0>)
 8101f10:	2200      	movs	r2, #0
 8101f12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	68ba      	ldr	r2, [r7, #8]
 8101f18:	4413      	add	r3, r2
 8101f1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101f1c:	2208      	movs	r2, #8
 8101f1e:	68fb      	ldr	r3, [r7, #12]
 8101f20:	1a9b      	subs	r3, r3, r2
 8101f22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101f24:	68fb      	ldr	r3, [r7, #12]
 8101f26:	f023 0307 	bic.w	r3, r3, #7
 8101f2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101f2c:	68fb      	ldr	r3, [r7, #12]
 8101f2e:	4a15      	ldr	r2, [pc, #84]	; (8101f84 <prvHeapInit+0xb4>)
 8101f30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101f32:	4b14      	ldr	r3, [pc, #80]	; (8101f84 <prvHeapInit+0xb4>)
 8101f34:	681b      	ldr	r3, [r3, #0]
 8101f36:	2200      	movs	r2, #0
 8101f38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101f3a:	4b12      	ldr	r3, [pc, #72]	; (8101f84 <prvHeapInit+0xb4>)
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	2200      	movs	r2, #0
 8101f40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8101f46:	683b      	ldr	r3, [r7, #0]
 8101f48:	68fa      	ldr	r2, [r7, #12]
 8101f4a:	1ad2      	subs	r2, r2, r3
 8101f4c:	683b      	ldr	r3, [r7, #0]
 8101f4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101f50:	4b0c      	ldr	r3, [pc, #48]	; (8101f84 <prvHeapInit+0xb4>)
 8101f52:	681a      	ldr	r2, [r3, #0]
 8101f54:	683b      	ldr	r3, [r7, #0]
 8101f56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101f58:	683b      	ldr	r3, [r7, #0]
 8101f5a:	685b      	ldr	r3, [r3, #4]
 8101f5c:	4a0a      	ldr	r2, [pc, #40]	; (8101f88 <prvHeapInit+0xb8>)
 8101f5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101f60:	683b      	ldr	r3, [r7, #0]
 8101f62:	685b      	ldr	r3, [r3, #4]
 8101f64:	4a09      	ldr	r2, [pc, #36]	; (8101f8c <prvHeapInit+0xbc>)
 8101f66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101f68:	4b09      	ldr	r3, [pc, #36]	; (8101f90 <prvHeapInit+0xc0>)
 8101f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8101f6e:	601a      	str	r2, [r3, #0]
}
 8101f70:	bf00      	nop
 8101f72:	3714      	adds	r7, #20
 8101f74:	46bd      	mov	sp, r7
 8101f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7a:	4770      	bx	lr
 8101f7c:	100006f0 	.word	0x100006f0
 8101f80:	100042f0 	.word	0x100042f0
 8101f84:	100042f8 	.word	0x100042f8
 8101f88:	10004300 	.word	0x10004300
 8101f8c:	100042fc 	.word	0x100042fc
 8101f90:	10004304 	.word	0x10004304

08101f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8101f94:	b480      	push	{r7}
 8101f96:	b085      	sub	sp, #20
 8101f98:	af00      	add	r7, sp, #0
 8101f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101f9c:	4b28      	ldr	r3, [pc, #160]	; (8102040 <prvInsertBlockIntoFreeList+0xac>)
 8101f9e:	60fb      	str	r3, [r7, #12]
 8101fa0:	e002      	b.n	8101fa8 <prvInsertBlockIntoFreeList+0x14>
 8101fa2:	68fb      	ldr	r3, [r7, #12]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	60fb      	str	r3, [r7, #12]
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	687a      	ldr	r2, [r7, #4]
 8101fae:	429a      	cmp	r2, r3
 8101fb0:	d8f7      	bhi.n	8101fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8101fb2:	68fb      	ldr	r3, [r7, #12]
 8101fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8101fb6:	68fb      	ldr	r3, [r7, #12]
 8101fb8:	685b      	ldr	r3, [r3, #4]
 8101fba:	68ba      	ldr	r2, [r7, #8]
 8101fbc:	4413      	add	r3, r2
 8101fbe:	687a      	ldr	r2, [r7, #4]
 8101fc0:	429a      	cmp	r2, r3
 8101fc2:	d108      	bne.n	8101fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8101fc4:	68fb      	ldr	r3, [r7, #12]
 8101fc6:	685a      	ldr	r2, [r3, #4]
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	685b      	ldr	r3, [r3, #4]
 8101fcc:	441a      	add	r2, r3
 8101fce:	68fb      	ldr	r3, [r7, #12]
 8101fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8101fd2:	68fb      	ldr	r3, [r7, #12]
 8101fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	685b      	ldr	r3, [r3, #4]
 8101fde:	68ba      	ldr	r2, [r7, #8]
 8101fe0:	441a      	add	r2, r3
 8101fe2:	68fb      	ldr	r3, [r7, #12]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	429a      	cmp	r2, r3
 8101fe8:	d118      	bne.n	810201c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8101fea:	68fb      	ldr	r3, [r7, #12]
 8101fec:	681a      	ldr	r2, [r3, #0]
 8101fee:	4b15      	ldr	r3, [pc, #84]	; (8102044 <prvInsertBlockIntoFreeList+0xb0>)
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	429a      	cmp	r2, r3
 8101ff4:	d00d      	beq.n	8102012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	685a      	ldr	r2, [r3, #4]
 8101ffa:	68fb      	ldr	r3, [r7, #12]
 8101ffc:	681b      	ldr	r3, [r3, #0]
 8101ffe:	685b      	ldr	r3, [r3, #4]
 8102000:	441a      	add	r2, r3
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8102006:	68fb      	ldr	r3, [r7, #12]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	681a      	ldr	r2, [r3, #0]
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	601a      	str	r2, [r3, #0]
 8102010:	e008      	b.n	8102024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8102012:	4b0c      	ldr	r3, [pc, #48]	; (8102044 <prvInsertBlockIntoFreeList+0xb0>)
 8102014:	681a      	ldr	r2, [r3, #0]
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	601a      	str	r2, [r3, #0]
 810201a:	e003      	b.n	8102024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810201c:	68fb      	ldr	r3, [r7, #12]
 810201e:	681a      	ldr	r2, [r3, #0]
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8102024:	68fa      	ldr	r2, [r7, #12]
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	429a      	cmp	r2, r3
 810202a:	d002      	beq.n	8102032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810202c:	68fb      	ldr	r3, [r7, #12]
 810202e:	687a      	ldr	r2, [r7, #4]
 8102030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102032:	bf00      	nop
 8102034:	3714      	adds	r7, #20
 8102036:	46bd      	mov	sp, r7
 8102038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203c:	4770      	bx	lr
 810203e:	bf00      	nop
 8102040:	100042f0 	.word	0x100042f0
 8102044:	100042f8 	.word	0x100042f8

08102048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8102048:	b480      	push	{r7}
 810204a:	b083      	sub	sp, #12
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	f103 0208 	add.w	r2, r3, #8
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	f103 0208 	add.w	r2, r3, #8
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	f103 0208 	add.w	r2, r3, #8
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	2200      	movs	r2, #0
 810207a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810207c:	bf00      	nop
 810207e:	370c      	adds	r7, #12
 8102080:	46bd      	mov	sp, r7
 8102082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102086:	4770      	bx	lr

08102088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8102088:	b480      	push	{r7}
 810208a:	b083      	sub	sp, #12
 810208c:	af00      	add	r7, sp, #0
 810208e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	2200      	movs	r2, #0
 8102094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8102096:	bf00      	nop
 8102098:	370c      	adds	r7, #12
 810209a:	46bd      	mov	sp, r7
 810209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a0:	4770      	bx	lr

081020a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81020a2:	b480      	push	{r7}
 81020a4:	b085      	sub	sp, #20
 81020a6:	af00      	add	r7, sp, #0
 81020a8:	6078      	str	r0, [r7, #4]
 81020aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	685b      	ldr	r3, [r3, #4]
 81020b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81020b2:	683b      	ldr	r3, [r7, #0]
 81020b4:	68fa      	ldr	r2, [r7, #12]
 81020b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81020b8:	68fb      	ldr	r3, [r7, #12]
 81020ba:	689a      	ldr	r2, [r3, #8]
 81020bc:	683b      	ldr	r3, [r7, #0]
 81020be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81020c0:	68fb      	ldr	r3, [r7, #12]
 81020c2:	689b      	ldr	r3, [r3, #8]
 81020c4:	683a      	ldr	r2, [r7, #0]
 81020c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81020c8:	68fb      	ldr	r3, [r7, #12]
 81020ca:	683a      	ldr	r2, [r7, #0]
 81020cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81020ce:	683b      	ldr	r3, [r7, #0]
 81020d0:	687a      	ldr	r2, [r7, #4]
 81020d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	1c5a      	adds	r2, r3, #1
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	601a      	str	r2, [r3, #0]
}
 81020de:	bf00      	nop
 81020e0:	3714      	adds	r7, #20
 81020e2:	46bd      	mov	sp, r7
 81020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e8:	4770      	bx	lr

081020ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81020ea:	b480      	push	{r7}
 81020ec:	b085      	sub	sp, #20
 81020ee:	af00      	add	r7, sp, #0
 81020f0:	6078      	str	r0, [r7, #4]
 81020f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81020f4:	683b      	ldr	r3, [r7, #0]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81020fa:	68bb      	ldr	r3, [r7, #8]
 81020fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102100:	d103      	bne.n	810210a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	691b      	ldr	r3, [r3, #16]
 8102106:	60fb      	str	r3, [r7, #12]
 8102108:	e00c      	b.n	8102124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	3308      	adds	r3, #8
 810210e:	60fb      	str	r3, [r7, #12]
 8102110:	e002      	b.n	8102118 <vListInsert+0x2e>
 8102112:	68fb      	ldr	r3, [r7, #12]
 8102114:	685b      	ldr	r3, [r3, #4]
 8102116:	60fb      	str	r3, [r7, #12]
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	685b      	ldr	r3, [r3, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	68ba      	ldr	r2, [r7, #8]
 8102120:	429a      	cmp	r2, r3
 8102122:	d2f6      	bcs.n	8102112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8102124:	68fb      	ldr	r3, [r7, #12]
 8102126:	685a      	ldr	r2, [r3, #4]
 8102128:	683b      	ldr	r3, [r7, #0]
 810212a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810212c:	683b      	ldr	r3, [r7, #0]
 810212e:	685b      	ldr	r3, [r3, #4]
 8102130:	683a      	ldr	r2, [r7, #0]
 8102132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8102134:	683b      	ldr	r3, [r7, #0]
 8102136:	68fa      	ldr	r2, [r7, #12]
 8102138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810213a:	68fb      	ldr	r3, [r7, #12]
 810213c:	683a      	ldr	r2, [r7, #0]
 810213e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8102140:	683b      	ldr	r3, [r7, #0]
 8102142:	687a      	ldr	r2, [r7, #4]
 8102144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	681b      	ldr	r3, [r3, #0]
 810214a:	1c5a      	adds	r2, r3, #1
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	601a      	str	r2, [r3, #0]
}
 8102150:	bf00      	nop
 8102152:	3714      	adds	r7, #20
 8102154:	46bd      	mov	sp, r7
 8102156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810215a:	4770      	bx	lr

0810215c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810215c:	b480      	push	{r7}
 810215e:	b085      	sub	sp, #20
 8102160:	af00      	add	r7, sp, #0
 8102162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	691b      	ldr	r3, [r3, #16]
 8102168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	685b      	ldr	r3, [r3, #4]
 810216e:	687a      	ldr	r2, [r7, #4]
 8102170:	6892      	ldr	r2, [r2, #8]
 8102172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	689b      	ldr	r3, [r3, #8]
 8102178:	687a      	ldr	r2, [r7, #4]
 810217a:	6852      	ldr	r2, [r2, #4]
 810217c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810217e:	68fb      	ldr	r3, [r7, #12]
 8102180:	685b      	ldr	r3, [r3, #4]
 8102182:	687a      	ldr	r2, [r7, #4]
 8102184:	429a      	cmp	r2, r3
 8102186:	d103      	bne.n	8102190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	689a      	ldr	r2, [r3, #8]
 810218c:	68fb      	ldr	r3, [r7, #12]
 810218e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	2200      	movs	r2, #0
 8102194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	1e5a      	subs	r2, r3, #1
 810219c:	68fb      	ldr	r3, [r7, #12]
 810219e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	681b      	ldr	r3, [r3, #0]
}
 81021a4:	4618      	mov	r0, r3
 81021a6:	3714      	adds	r7, #20
 81021a8:	46bd      	mov	sp, r7
 81021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ae:	4770      	bx	lr

081021b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81021b0:	b480      	push	{r7}
 81021b2:	b085      	sub	sp, #20
 81021b4:	af00      	add	r7, sp, #0
 81021b6:	60f8      	str	r0, [r7, #12]
 81021b8:	60b9      	str	r1, [r7, #8]
 81021ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	3b04      	subs	r3, #4
 81021c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81021c2:	68fb      	ldr	r3, [r7, #12]
 81021c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81021c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81021ca:	68fb      	ldr	r3, [r7, #12]
 81021cc:	3b04      	subs	r3, #4
 81021ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81021d0:	68bb      	ldr	r3, [r7, #8]
 81021d2:	f023 0201 	bic.w	r2, r3, #1
 81021d6:	68fb      	ldr	r3, [r7, #12]
 81021d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81021da:	68fb      	ldr	r3, [r7, #12]
 81021dc:	3b04      	subs	r3, #4
 81021de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81021e0:	4a0c      	ldr	r2, [pc, #48]	; (8102214 <pxPortInitialiseStack+0x64>)
 81021e2:	68fb      	ldr	r3, [r7, #12]
 81021e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81021e6:	68fb      	ldr	r3, [r7, #12]
 81021e8:	3b14      	subs	r3, #20
 81021ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81021ec:	687a      	ldr	r2, [r7, #4]
 81021ee:	68fb      	ldr	r3, [r7, #12]
 81021f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81021f2:	68fb      	ldr	r3, [r7, #12]
 81021f4:	3b04      	subs	r3, #4
 81021f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81021f8:	68fb      	ldr	r3, [r7, #12]
 81021fa:	f06f 0202 	mvn.w	r2, #2
 81021fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	3b20      	subs	r3, #32
 8102204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8102206:	68fb      	ldr	r3, [r7, #12]
}
 8102208:	4618      	mov	r0, r3
 810220a:	3714      	adds	r7, #20
 810220c:	46bd      	mov	sp, r7
 810220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102212:	4770      	bx	lr
 8102214:	08102219 	.word	0x08102219

08102218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8102218:	b480      	push	{r7}
 810221a:	b085      	sub	sp, #20
 810221c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810221e:	2300      	movs	r3, #0
 8102220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102222:	4b11      	ldr	r3, [pc, #68]	; (8102268 <prvTaskExitError+0x50>)
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810222a:	d009      	beq.n	8102240 <prvTaskExitError+0x28>
 810222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102230:	f383 8811 	msr	BASEPRI, r3
 8102234:	f3bf 8f6f 	isb	sy
 8102238:	f3bf 8f4f 	dsb	sy
 810223c:	60fb      	str	r3, [r7, #12]
 810223e:	e7fe      	b.n	810223e <prvTaskExitError+0x26>
 8102240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102244:	f383 8811 	msr	BASEPRI, r3
 8102248:	f3bf 8f6f 	isb	sy
 810224c:	f3bf 8f4f 	dsb	sy
 8102250:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8102252:	bf00      	nop
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	2b00      	cmp	r3, #0
 8102258:	d0fc      	beq.n	8102254 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810225a:	bf00      	nop
 810225c:	3714      	adds	r7, #20
 810225e:	46bd      	mov	sp, r7
 8102260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102264:	4770      	bx	lr
 8102266:	bf00      	nop
 8102268:	10000010 	.word	0x10000010
 810226c:	00000000 	.word	0x00000000

08102270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102270:	4b07      	ldr	r3, [pc, #28]	; (8102290 <pxCurrentTCBConst2>)
 8102272:	6819      	ldr	r1, [r3, #0]
 8102274:	6808      	ldr	r0, [r1, #0]
 8102276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810227a:	f380 8809 	msr	PSP, r0
 810227e:	f3bf 8f6f 	isb	sy
 8102282:	f04f 0000 	mov.w	r0, #0
 8102286:	f380 8811 	msr	BASEPRI, r0
 810228a:	4770      	bx	lr
 810228c:	f3af 8000 	nop.w

08102290 <pxCurrentTCBConst2>:
 8102290:	10004310 	.word	0x10004310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8102294:	bf00      	nop
 8102296:	bf00      	nop

08102298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8102298:	4808      	ldr	r0, [pc, #32]	; (81022bc <prvPortStartFirstTask+0x24>)
 810229a:	6800      	ldr	r0, [r0, #0]
 810229c:	6800      	ldr	r0, [r0, #0]
 810229e:	f380 8808 	msr	MSP, r0
 81022a2:	f04f 0000 	mov.w	r0, #0
 81022a6:	f380 8814 	msr	CONTROL, r0
 81022aa:	b662      	cpsie	i
 81022ac:	b661      	cpsie	f
 81022ae:	f3bf 8f4f 	dsb	sy
 81022b2:	f3bf 8f6f 	isb	sy
 81022b6:	df00      	svc	0
 81022b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81022ba:	bf00      	nop
 81022bc:	e000ed08 	.word	0xe000ed08

081022c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81022c0:	b580      	push	{r7, lr}
 81022c2:	b086      	sub	sp, #24
 81022c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81022c6:	4b44      	ldr	r3, [pc, #272]	; (81023d8 <xPortStartScheduler+0x118>)
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a44      	ldr	r2, [pc, #272]	; (81023dc <xPortStartScheduler+0x11c>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d109      	bne.n	81022e4 <xPortStartScheduler+0x24>
 81022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81022d4:	f383 8811 	msr	BASEPRI, r3
 81022d8:	f3bf 8f6f 	isb	sy
 81022dc:	f3bf 8f4f 	dsb	sy
 81022e0:	613b      	str	r3, [r7, #16]
 81022e2:	e7fe      	b.n	81022e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81022e4:	4b3c      	ldr	r3, [pc, #240]	; (81023d8 <xPortStartScheduler+0x118>)
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	4a3d      	ldr	r2, [pc, #244]	; (81023e0 <xPortStartScheduler+0x120>)
 81022ea:	4293      	cmp	r3, r2
 81022ec:	d109      	bne.n	8102302 <xPortStartScheduler+0x42>
 81022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81022f2:	f383 8811 	msr	BASEPRI, r3
 81022f6:	f3bf 8f6f 	isb	sy
 81022fa:	f3bf 8f4f 	dsb	sy
 81022fe:	60fb      	str	r3, [r7, #12]
 8102300:	e7fe      	b.n	8102300 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102302:	4b38      	ldr	r3, [pc, #224]	; (81023e4 <xPortStartScheduler+0x124>)
 8102304:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8102306:	697b      	ldr	r3, [r7, #20]
 8102308:	781b      	ldrb	r3, [r3, #0]
 810230a:	b2db      	uxtb	r3, r3
 810230c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810230e:	697b      	ldr	r3, [r7, #20]
 8102310:	22ff      	movs	r2, #255	; 0xff
 8102312:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102314:	697b      	ldr	r3, [r7, #20]
 8102316:	781b      	ldrb	r3, [r3, #0]
 8102318:	b2db      	uxtb	r3, r3
 810231a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810231c:	78fb      	ldrb	r3, [r7, #3]
 810231e:	b2db      	uxtb	r3, r3
 8102320:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102324:	b2da      	uxtb	r2, r3
 8102326:	4b30      	ldr	r3, [pc, #192]	; (81023e8 <xPortStartScheduler+0x128>)
 8102328:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810232a:	4b30      	ldr	r3, [pc, #192]	; (81023ec <xPortStartScheduler+0x12c>)
 810232c:	2207      	movs	r2, #7
 810232e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102330:	e009      	b.n	8102346 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8102332:	4b2e      	ldr	r3, [pc, #184]	; (81023ec <xPortStartScheduler+0x12c>)
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	3b01      	subs	r3, #1
 8102338:	4a2c      	ldr	r2, [pc, #176]	; (81023ec <xPortStartScheduler+0x12c>)
 810233a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810233c:	78fb      	ldrb	r3, [r7, #3]
 810233e:	b2db      	uxtb	r3, r3
 8102340:	005b      	lsls	r3, r3, #1
 8102342:	b2db      	uxtb	r3, r3
 8102344:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102346:	78fb      	ldrb	r3, [r7, #3]
 8102348:	b2db      	uxtb	r3, r3
 810234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810234e:	2b80      	cmp	r3, #128	; 0x80
 8102350:	d0ef      	beq.n	8102332 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8102352:	4b26      	ldr	r3, [pc, #152]	; (81023ec <xPortStartScheduler+0x12c>)
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	f1c3 0307 	rsb	r3, r3, #7
 810235a:	2b04      	cmp	r3, #4
 810235c:	d009      	beq.n	8102372 <xPortStartScheduler+0xb2>
 810235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102362:	f383 8811 	msr	BASEPRI, r3
 8102366:	f3bf 8f6f 	isb	sy
 810236a:	f3bf 8f4f 	dsb	sy
 810236e:	60bb      	str	r3, [r7, #8]
 8102370:	e7fe      	b.n	8102370 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8102372:	4b1e      	ldr	r3, [pc, #120]	; (81023ec <xPortStartScheduler+0x12c>)
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	021b      	lsls	r3, r3, #8
 8102378:	4a1c      	ldr	r2, [pc, #112]	; (81023ec <xPortStartScheduler+0x12c>)
 810237a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810237c:	4b1b      	ldr	r3, [pc, #108]	; (81023ec <xPortStartScheduler+0x12c>)
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8102384:	4a19      	ldr	r2, [pc, #100]	; (81023ec <xPortStartScheduler+0x12c>)
 8102386:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	b2da      	uxtb	r2, r3
 810238c:	697b      	ldr	r3, [r7, #20]
 810238e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8102390:	4b17      	ldr	r3, [pc, #92]	; (81023f0 <xPortStartScheduler+0x130>)
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	4a16      	ldr	r2, [pc, #88]	; (81023f0 <xPortStartScheduler+0x130>)
 8102396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810239a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810239c:	4b14      	ldr	r3, [pc, #80]	; (81023f0 <xPortStartScheduler+0x130>)
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	4a13      	ldr	r2, [pc, #76]	; (81023f0 <xPortStartScheduler+0x130>)
 81023a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81023a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81023a8:	f000 f8d6 	bl	8102558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81023ac:	4b11      	ldr	r3, [pc, #68]	; (81023f4 <xPortStartScheduler+0x134>)
 81023ae:	2200      	movs	r2, #0
 81023b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81023b2:	f000 f8f5 	bl	81025a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81023b6:	4b10      	ldr	r3, [pc, #64]	; (81023f8 <xPortStartScheduler+0x138>)
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a0f      	ldr	r2, [pc, #60]	; (81023f8 <xPortStartScheduler+0x138>)
 81023bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81023c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81023c2:	f7ff ff69 	bl	8102298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81023c6:	f001 fa6d 	bl	81038a4 <vTaskSwitchContext>
	prvTaskExitError();
 81023ca:	f7ff ff25 	bl	8102218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81023ce:	2300      	movs	r3, #0
}
 81023d0:	4618      	mov	r0, r3
 81023d2:	3718      	adds	r7, #24
 81023d4:	46bd      	mov	sp, r7
 81023d6:	bd80      	pop	{r7, pc}
 81023d8:	e000ed00 	.word	0xe000ed00
 81023dc:	410fc271 	.word	0x410fc271
 81023e0:	410fc270 	.word	0x410fc270
 81023e4:	e000e400 	.word	0xe000e400
 81023e8:	10004308 	.word	0x10004308
 81023ec:	1000430c 	.word	0x1000430c
 81023f0:	e000ed20 	.word	0xe000ed20
 81023f4:	10000010 	.word	0x10000010
 81023f8:	e000ef34 	.word	0xe000ef34

081023fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81023fc:	b480      	push	{r7}
 81023fe:	b083      	sub	sp, #12
 8102400:	af00      	add	r7, sp, #0
 8102402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102406:	f383 8811 	msr	BASEPRI, r3
 810240a:	f3bf 8f6f 	isb	sy
 810240e:	f3bf 8f4f 	dsb	sy
 8102412:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102414:	4b0e      	ldr	r3, [pc, #56]	; (8102450 <vPortEnterCritical+0x54>)
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	3301      	adds	r3, #1
 810241a:	4a0d      	ldr	r2, [pc, #52]	; (8102450 <vPortEnterCritical+0x54>)
 810241c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810241e:	4b0c      	ldr	r3, [pc, #48]	; (8102450 <vPortEnterCritical+0x54>)
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	2b01      	cmp	r3, #1
 8102424:	d10e      	bne.n	8102444 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102426:	4b0b      	ldr	r3, [pc, #44]	; (8102454 <vPortEnterCritical+0x58>)
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	b2db      	uxtb	r3, r3
 810242c:	2b00      	cmp	r3, #0
 810242e:	d009      	beq.n	8102444 <vPortEnterCritical+0x48>
 8102430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102434:	f383 8811 	msr	BASEPRI, r3
 8102438:	f3bf 8f6f 	isb	sy
 810243c:	f3bf 8f4f 	dsb	sy
 8102440:	603b      	str	r3, [r7, #0]
 8102442:	e7fe      	b.n	8102442 <vPortEnterCritical+0x46>
	}
}
 8102444:	bf00      	nop
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244e:	4770      	bx	lr
 8102450:	10000010 	.word	0x10000010
 8102454:	e000ed04 	.word	0xe000ed04

08102458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8102458:	b480      	push	{r7}
 810245a:	b083      	sub	sp, #12
 810245c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810245e:	4b11      	ldr	r3, [pc, #68]	; (81024a4 <vPortExitCritical+0x4c>)
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	2b00      	cmp	r3, #0
 8102464:	d109      	bne.n	810247a <vPortExitCritical+0x22>
 8102466:	f04f 0350 	mov.w	r3, #80	; 0x50
 810246a:	f383 8811 	msr	BASEPRI, r3
 810246e:	f3bf 8f6f 	isb	sy
 8102472:	f3bf 8f4f 	dsb	sy
 8102476:	607b      	str	r3, [r7, #4]
 8102478:	e7fe      	b.n	8102478 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810247a:	4b0a      	ldr	r3, [pc, #40]	; (81024a4 <vPortExitCritical+0x4c>)
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	3b01      	subs	r3, #1
 8102480:	4a08      	ldr	r2, [pc, #32]	; (81024a4 <vPortExitCritical+0x4c>)
 8102482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8102484:	4b07      	ldr	r3, [pc, #28]	; (81024a4 <vPortExitCritical+0x4c>)
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	2b00      	cmp	r3, #0
 810248a:	d104      	bne.n	8102496 <vPortExitCritical+0x3e>
 810248c:	2300      	movs	r3, #0
 810248e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8102490:	683b      	ldr	r3, [r7, #0]
 8102492:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8102496:	bf00      	nop
 8102498:	370c      	adds	r7, #12
 810249a:	46bd      	mov	sp, r7
 810249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a0:	4770      	bx	lr
 81024a2:	bf00      	nop
 81024a4:	10000010 	.word	0x10000010
	...

081024b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81024b0:	f3ef 8009 	mrs	r0, PSP
 81024b4:	f3bf 8f6f 	isb	sy
 81024b8:	4b15      	ldr	r3, [pc, #84]	; (8102510 <pxCurrentTCBConst>)
 81024ba:	681a      	ldr	r2, [r3, #0]
 81024bc:	f01e 0f10 	tst.w	lr, #16
 81024c0:	bf08      	it	eq
 81024c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81024c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81024ca:	6010      	str	r0, [r2, #0]
 81024cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81024d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81024d4:	f380 8811 	msr	BASEPRI, r0
 81024d8:	f3bf 8f4f 	dsb	sy
 81024dc:	f3bf 8f6f 	isb	sy
 81024e0:	f001 f9e0 	bl	81038a4 <vTaskSwitchContext>
 81024e4:	f04f 0000 	mov.w	r0, #0
 81024e8:	f380 8811 	msr	BASEPRI, r0
 81024ec:	bc09      	pop	{r0, r3}
 81024ee:	6819      	ldr	r1, [r3, #0]
 81024f0:	6808      	ldr	r0, [r1, #0]
 81024f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81024f6:	f01e 0f10 	tst.w	lr, #16
 81024fa:	bf08      	it	eq
 81024fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102500:	f380 8809 	msr	PSP, r0
 8102504:	f3bf 8f6f 	isb	sy
 8102508:	4770      	bx	lr
 810250a:	bf00      	nop
 810250c:	f3af 8000 	nop.w

08102510 <pxCurrentTCBConst>:
 8102510:	10004310 	.word	0x10004310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102514:	bf00      	nop
 8102516:	bf00      	nop

08102518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102518:	b580      	push	{r7, lr}
 810251a:	b082      	sub	sp, #8
 810251c:	af00      	add	r7, sp, #0
	__asm volatile
 810251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102522:	f383 8811 	msr	BASEPRI, r3
 8102526:	f3bf 8f6f 	isb	sy
 810252a:	f3bf 8f4f 	dsb	sy
 810252e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102530:	f001 f900 	bl	8103734 <xTaskIncrementTick>
 8102534:	4603      	mov	r3, r0
 8102536:	2b00      	cmp	r3, #0
 8102538:	d003      	beq.n	8102542 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810253a:	4b06      	ldr	r3, [pc, #24]	; (8102554 <SysTick_Handler+0x3c>)
 810253c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102540:	601a      	str	r2, [r3, #0]
 8102542:	2300      	movs	r3, #0
 8102544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102546:	683b      	ldr	r3, [r7, #0]
 8102548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810254c:	bf00      	nop
 810254e:	3708      	adds	r7, #8
 8102550:	46bd      	mov	sp, r7
 8102552:	bd80      	pop	{r7, pc}
 8102554:	e000ed04 	.word	0xe000ed04

08102558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8102558:	b480      	push	{r7}
 810255a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810255c:	4b0b      	ldr	r3, [pc, #44]	; (810258c <vPortSetupTimerInterrupt+0x34>)
 810255e:	2200      	movs	r2, #0
 8102560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102562:	4b0b      	ldr	r3, [pc, #44]	; (8102590 <vPortSetupTimerInterrupt+0x38>)
 8102564:	2200      	movs	r2, #0
 8102566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8102568:	4b0a      	ldr	r3, [pc, #40]	; (8102594 <vPortSetupTimerInterrupt+0x3c>)
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a0a      	ldr	r2, [pc, #40]	; (8102598 <vPortSetupTimerInterrupt+0x40>)
 810256e:	fba2 2303 	umull	r2, r3, r2, r3
 8102572:	099b      	lsrs	r3, r3, #6
 8102574:	4a09      	ldr	r2, [pc, #36]	; (810259c <vPortSetupTimerInterrupt+0x44>)
 8102576:	3b01      	subs	r3, #1
 8102578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810257a:	4b04      	ldr	r3, [pc, #16]	; (810258c <vPortSetupTimerInterrupt+0x34>)
 810257c:	2207      	movs	r2, #7
 810257e:	601a      	str	r2, [r3, #0]
}
 8102580:	bf00      	nop
 8102582:	46bd      	mov	sp, r7
 8102584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102588:	4770      	bx	lr
 810258a:	bf00      	nop
 810258c:	e000e010 	.word	0xe000e010
 8102590:	e000e018 	.word	0xe000e018
 8102594:	10000004 	.word	0x10000004
 8102598:	10624dd3 	.word	0x10624dd3
 810259c:	e000e014 	.word	0xe000e014

081025a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81025a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81025b0 <vPortEnableVFP+0x10>
 81025a4:	6801      	ldr	r1, [r0, #0]
 81025a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81025aa:	6001      	str	r1, [r0, #0]
 81025ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81025ae:	bf00      	nop
 81025b0:	e000ed88 	.word	0xe000ed88

081025b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81025b4:	b480      	push	{r7}
 81025b6:	b085      	sub	sp, #20
 81025b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81025ba:	f3ef 8305 	mrs	r3, IPSR
 81025be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81025c0:	68fb      	ldr	r3, [r7, #12]
 81025c2:	2b0f      	cmp	r3, #15
 81025c4:	d913      	bls.n	81025ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81025c6:	4a16      	ldr	r2, [pc, #88]	; (8102620 <vPortValidateInterruptPriority+0x6c>)
 81025c8:	68fb      	ldr	r3, [r7, #12]
 81025ca:	4413      	add	r3, r2
 81025cc:	781b      	ldrb	r3, [r3, #0]
 81025ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81025d0:	4b14      	ldr	r3, [pc, #80]	; (8102624 <vPortValidateInterruptPriority+0x70>)
 81025d2:	781b      	ldrb	r3, [r3, #0]
 81025d4:	7afa      	ldrb	r2, [r7, #11]
 81025d6:	429a      	cmp	r2, r3
 81025d8:	d209      	bcs.n	81025ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 81025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025de:	f383 8811 	msr	BASEPRI, r3
 81025e2:	f3bf 8f6f 	isb	sy
 81025e6:	f3bf 8f4f 	dsb	sy
 81025ea:	607b      	str	r3, [r7, #4]
 81025ec:	e7fe      	b.n	81025ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81025ee:	4b0e      	ldr	r3, [pc, #56]	; (8102628 <vPortValidateInterruptPriority+0x74>)
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81025f6:	4b0d      	ldr	r3, [pc, #52]	; (810262c <vPortValidateInterruptPriority+0x78>)
 81025f8:	681b      	ldr	r3, [r3, #0]
 81025fa:	429a      	cmp	r2, r3
 81025fc:	d909      	bls.n	8102612 <vPortValidateInterruptPriority+0x5e>
 81025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102602:	f383 8811 	msr	BASEPRI, r3
 8102606:	f3bf 8f6f 	isb	sy
 810260a:	f3bf 8f4f 	dsb	sy
 810260e:	603b      	str	r3, [r7, #0]
 8102610:	e7fe      	b.n	8102610 <vPortValidateInterruptPriority+0x5c>
	}
 8102612:	bf00      	nop
 8102614:	3714      	adds	r7, #20
 8102616:	46bd      	mov	sp, r7
 8102618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261c:	4770      	bx	lr
 810261e:	bf00      	nop
 8102620:	e000e3f0 	.word	0xe000e3f0
 8102624:	10004308 	.word	0x10004308
 8102628:	e000ed0c 	.word	0xe000ed0c
 810262c:	1000430c 	.word	0x1000430c

08102630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8102630:	b580      	push	{r7, lr}
 8102632:	b084      	sub	sp, #16
 8102634:	af00      	add	r7, sp, #0
 8102636:	6078      	str	r0, [r7, #4]
 8102638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810263e:	68fb      	ldr	r3, [r7, #12]
 8102640:	2b00      	cmp	r3, #0
 8102642:	d109      	bne.n	8102658 <xQueueGenericReset+0x28>
 8102644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102648:	f383 8811 	msr	BASEPRI, r3
 810264c:	f3bf 8f6f 	isb	sy
 8102650:	f3bf 8f4f 	dsb	sy
 8102654:	60bb      	str	r3, [r7, #8]
 8102656:	e7fe      	b.n	8102656 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8102658:	f7ff fed0 	bl	81023fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810265c:	68fb      	ldr	r3, [r7, #12]
 810265e:	681a      	ldr	r2, [r3, #0]
 8102660:	68fb      	ldr	r3, [r7, #12]
 8102662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102664:	68f9      	ldr	r1, [r7, #12]
 8102666:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102668:	fb01 f303 	mul.w	r3, r1, r3
 810266c:	441a      	add	r2, r3
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	2200      	movs	r2, #0
 8102676:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102678:	68fb      	ldr	r3, [r7, #12]
 810267a:	681a      	ldr	r2, [r3, #0]
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	681a      	ldr	r2, [r3, #0]
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102688:	3b01      	subs	r3, #1
 810268a:	68f9      	ldr	r1, [r7, #12]
 810268c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810268e:	fb01 f303 	mul.w	r3, r1, r3
 8102692:	441a      	add	r2, r3
 8102694:	68fb      	ldr	r3, [r7, #12]
 8102696:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8102698:	68fb      	ldr	r3, [r7, #12]
 810269a:	22ff      	movs	r2, #255	; 0xff
 810269c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81026a0:	68fb      	ldr	r3, [r7, #12]
 81026a2:	22ff      	movs	r2, #255	; 0xff
 81026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81026a8:	683b      	ldr	r3, [r7, #0]
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d114      	bne.n	81026d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	691b      	ldr	r3, [r3, #16]
 81026b2:	2b00      	cmp	r3, #0
 81026b4:	d01a      	beq.n	81026ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81026b6:	68fb      	ldr	r3, [r7, #12]
 81026b8:	3310      	adds	r3, #16
 81026ba:	4618      	mov	r0, r3
 81026bc:	f001 f99c 	bl	81039f8 <xTaskRemoveFromEventList>
 81026c0:	4603      	mov	r3, r0
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	d012      	beq.n	81026ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81026c6:	4b0d      	ldr	r3, [pc, #52]	; (81026fc <xQueueGenericReset+0xcc>)
 81026c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81026cc:	601a      	str	r2, [r3, #0]
 81026ce:	f3bf 8f4f 	dsb	sy
 81026d2:	f3bf 8f6f 	isb	sy
 81026d6:	e009      	b.n	81026ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	3310      	adds	r3, #16
 81026dc:	4618      	mov	r0, r3
 81026de:	f7ff fcb3 	bl	8102048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	3324      	adds	r3, #36	; 0x24
 81026e6:	4618      	mov	r0, r3
 81026e8:	f7ff fcae 	bl	8102048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81026ec:	f7ff feb4 	bl	8102458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81026f0:	2301      	movs	r3, #1
}
 81026f2:	4618      	mov	r0, r3
 81026f4:	3710      	adds	r7, #16
 81026f6:	46bd      	mov	sp, r7
 81026f8:	bd80      	pop	{r7, pc}
 81026fa:	bf00      	nop
 81026fc:	e000ed04 	.word	0xe000ed04

08102700 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102700:	b580      	push	{r7, lr}
 8102702:	b08e      	sub	sp, #56	; 0x38
 8102704:	af02      	add	r7, sp, #8
 8102706:	60f8      	str	r0, [r7, #12]
 8102708:	60b9      	str	r1, [r7, #8]
 810270a:	607a      	str	r2, [r7, #4]
 810270c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810270e:	68fb      	ldr	r3, [r7, #12]
 8102710:	2b00      	cmp	r3, #0
 8102712:	d109      	bne.n	8102728 <xQueueGenericCreateStatic+0x28>
 8102714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102718:	f383 8811 	msr	BASEPRI, r3
 810271c:	f3bf 8f6f 	isb	sy
 8102720:	f3bf 8f4f 	dsb	sy
 8102724:	62bb      	str	r3, [r7, #40]	; 0x28
 8102726:	e7fe      	b.n	8102726 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8102728:	683b      	ldr	r3, [r7, #0]
 810272a:	2b00      	cmp	r3, #0
 810272c:	d109      	bne.n	8102742 <xQueueGenericCreateStatic+0x42>
 810272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102732:	f383 8811 	msr	BASEPRI, r3
 8102736:	f3bf 8f6f 	isb	sy
 810273a:	f3bf 8f4f 	dsb	sy
 810273e:	627b      	str	r3, [r7, #36]	; 0x24
 8102740:	e7fe      	b.n	8102740 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	2b00      	cmp	r3, #0
 8102746:	d002      	beq.n	810274e <xQueueGenericCreateStatic+0x4e>
 8102748:	68bb      	ldr	r3, [r7, #8]
 810274a:	2b00      	cmp	r3, #0
 810274c:	d001      	beq.n	8102752 <xQueueGenericCreateStatic+0x52>
 810274e:	2301      	movs	r3, #1
 8102750:	e000      	b.n	8102754 <xQueueGenericCreateStatic+0x54>
 8102752:	2300      	movs	r3, #0
 8102754:	2b00      	cmp	r3, #0
 8102756:	d109      	bne.n	810276c <xQueueGenericCreateStatic+0x6c>
 8102758:	f04f 0350 	mov.w	r3, #80	; 0x50
 810275c:	f383 8811 	msr	BASEPRI, r3
 8102760:	f3bf 8f6f 	isb	sy
 8102764:	f3bf 8f4f 	dsb	sy
 8102768:	623b      	str	r3, [r7, #32]
 810276a:	e7fe      	b.n	810276a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	2b00      	cmp	r3, #0
 8102770:	d102      	bne.n	8102778 <xQueueGenericCreateStatic+0x78>
 8102772:	68bb      	ldr	r3, [r7, #8]
 8102774:	2b00      	cmp	r3, #0
 8102776:	d101      	bne.n	810277c <xQueueGenericCreateStatic+0x7c>
 8102778:	2301      	movs	r3, #1
 810277a:	e000      	b.n	810277e <xQueueGenericCreateStatic+0x7e>
 810277c:	2300      	movs	r3, #0
 810277e:	2b00      	cmp	r3, #0
 8102780:	d109      	bne.n	8102796 <xQueueGenericCreateStatic+0x96>
 8102782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102786:	f383 8811 	msr	BASEPRI, r3
 810278a:	f3bf 8f6f 	isb	sy
 810278e:	f3bf 8f4f 	dsb	sy
 8102792:	61fb      	str	r3, [r7, #28]
 8102794:	e7fe      	b.n	8102794 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8102796:	2350      	movs	r3, #80	; 0x50
 8102798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810279a:	697b      	ldr	r3, [r7, #20]
 810279c:	2b50      	cmp	r3, #80	; 0x50
 810279e:	d009      	beq.n	81027b4 <xQueueGenericCreateStatic+0xb4>
 81027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81027a4:	f383 8811 	msr	BASEPRI, r3
 81027a8:	f3bf 8f6f 	isb	sy
 81027ac:	f3bf 8f4f 	dsb	sy
 81027b0:	61bb      	str	r3, [r7, #24]
 81027b2:	e7fe      	b.n	81027b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81027b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81027b6:	683b      	ldr	r3, [r7, #0]
 81027b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d00d      	beq.n	81027dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027c2:	2201      	movs	r2, #1
 81027c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81027c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 81027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027ce:	9300      	str	r3, [sp, #0]
 81027d0:	4613      	mov	r3, r2
 81027d2:	687a      	ldr	r2, [r7, #4]
 81027d4:	68b9      	ldr	r1, [r7, #8]
 81027d6:	68f8      	ldr	r0, [r7, #12]
 81027d8:	f000 f844 	bl	8102864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 81027de:	4618      	mov	r0, r3
 81027e0:	3730      	adds	r7, #48	; 0x30
 81027e2:	46bd      	mov	sp, r7
 81027e4:	bd80      	pop	{r7, pc}

081027e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81027e6:	b580      	push	{r7, lr}
 81027e8:	b08a      	sub	sp, #40	; 0x28
 81027ea:	af02      	add	r7, sp, #8
 81027ec:	60f8      	str	r0, [r7, #12]
 81027ee:	60b9      	str	r1, [r7, #8]
 81027f0:	4613      	mov	r3, r2
 81027f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81027f4:	68fb      	ldr	r3, [r7, #12]
 81027f6:	2b00      	cmp	r3, #0
 81027f8:	d109      	bne.n	810280e <xQueueGenericCreate+0x28>
 81027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81027fe:	f383 8811 	msr	BASEPRI, r3
 8102802:	f3bf 8f6f 	isb	sy
 8102806:	f3bf 8f4f 	dsb	sy
 810280a:	613b      	str	r3, [r7, #16]
 810280c:	e7fe      	b.n	810280c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 810280e:	68bb      	ldr	r3, [r7, #8]
 8102810:	2b00      	cmp	r3, #0
 8102812:	d102      	bne.n	810281a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8102814:	2300      	movs	r3, #0
 8102816:	61fb      	str	r3, [r7, #28]
 8102818:	e004      	b.n	8102824 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	68ba      	ldr	r2, [r7, #8]
 810281e:	fb02 f303 	mul.w	r3, r2, r3
 8102822:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8102824:	69fb      	ldr	r3, [r7, #28]
 8102826:	3350      	adds	r3, #80	; 0x50
 8102828:	4618      	mov	r0, r3
 810282a:	f7ff fa37 	bl	8101c9c <pvPortMalloc>
 810282e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8102830:	69bb      	ldr	r3, [r7, #24]
 8102832:	2b00      	cmp	r3, #0
 8102834:	d011      	beq.n	810285a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8102836:	69bb      	ldr	r3, [r7, #24]
 8102838:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810283a:	697b      	ldr	r3, [r7, #20]
 810283c:	3350      	adds	r3, #80	; 0x50
 810283e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8102840:	69bb      	ldr	r3, [r7, #24]
 8102842:	2200      	movs	r2, #0
 8102844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8102848:	79fa      	ldrb	r2, [r7, #7]
 810284a:	69bb      	ldr	r3, [r7, #24]
 810284c:	9300      	str	r3, [sp, #0]
 810284e:	4613      	mov	r3, r2
 8102850:	697a      	ldr	r2, [r7, #20]
 8102852:	68b9      	ldr	r1, [r7, #8]
 8102854:	68f8      	ldr	r0, [r7, #12]
 8102856:	f000 f805 	bl	8102864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810285a:	69bb      	ldr	r3, [r7, #24]
	}
 810285c:	4618      	mov	r0, r3
 810285e:	3720      	adds	r7, #32
 8102860:	46bd      	mov	sp, r7
 8102862:	bd80      	pop	{r7, pc}

08102864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8102864:	b580      	push	{r7, lr}
 8102866:	b084      	sub	sp, #16
 8102868:	af00      	add	r7, sp, #0
 810286a:	60f8      	str	r0, [r7, #12]
 810286c:	60b9      	str	r1, [r7, #8]
 810286e:	607a      	str	r2, [r7, #4]
 8102870:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8102872:	68bb      	ldr	r3, [r7, #8]
 8102874:	2b00      	cmp	r3, #0
 8102876:	d103      	bne.n	8102880 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8102878:	69bb      	ldr	r3, [r7, #24]
 810287a:	69ba      	ldr	r2, [r7, #24]
 810287c:	601a      	str	r2, [r3, #0]
 810287e:	e002      	b.n	8102886 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102880:	69bb      	ldr	r3, [r7, #24]
 8102882:	687a      	ldr	r2, [r7, #4]
 8102884:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8102886:	69bb      	ldr	r3, [r7, #24]
 8102888:	68fa      	ldr	r2, [r7, #12]
 810288a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810288c:	69bb      	ldr	r3, [r7, #24]
 810288e:	68ba      	ldr	r2, [r7, #8]
 8102890:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102892:	2101      	movs	r1, #1
 8102894:	69b8      	ldr	r0, [r7, #24]
 8102896:	f7ff fecb 	bl	8102630 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810289a:	69bb      	ldr	r3, [r7, #24]
 810289c:	78fa      	ldrb	r2, [r7, #3]
 810289e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81028a2:	bf00      	nop
 81028a4:	3710      	adds	r7, #16
 81028a6:	46bd      	mov	sp, r7
 81028a8:	bd80      	pop	{r7, pc}
	...

081028ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81028ac:	b580      	push	{r7, lr}
 81028ae:	b08e      	sub	sp, #56	; 0x38
 81028b0:	af00      	add	r7, sp, #0
 81028b2:	60f8      	str	r0, [r7, #12]
 81028b4:	60b9      	str	r1, [r7, #8]
 81028b6:	607a      	str	r2, [r7, #4]
 81028b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81028ba:	2300      	movs	r3, #0
 81028bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028c4:	2b00      	cmp	r3, #0
 81028c6:	d109      	bne.n	81028dc <xQueueGenericSend+0x30>
 81028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028cc:	f383 8811 	msr	BASEPRI, r3
 81028d0:	f3bf 8f6f 	isb	sy
 81028d4:	f3bf 8f4f 	dsb	sy
 81028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 81028da:	e7fe      	b.n	81028da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81028dc:	68bb      	ldr	r3, [r7, #8]
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d103      	bne.n	81028ea <xQueueGenericSend+0x3e>
 81028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d101      	bne.n	81028ee <xQueueGenericSend+0x42>
 81028ea:	2301      	movs	r3, #1
 81028ec:	e000      	b.n	81028f0 <xQueueGenericSend+0x44>
 81028ee:	2300      	movs	r3, #0
 81028f0:	2b00      	cmp	r3, #0
 81028f2:	d109      	bne.n	8102908 <xQueueGenericSend+0x5c>
 81028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028f8:	f383 8811 	msr	BASEPRI, r3
 81028fc:	f3bf 8f6f 	isb	sy
 8102900:	f3bf 8f4f 	dsb	sy
 8102904:	627b      	str	r3, [r7, #36]	; 0x24
 8102906:	e7fe      	b.n	8102906 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102908:	683b      	ldr	r3, [r7, #0]
 810290a:	2b02      	cmp	r3, #2
 810290c:	d103      	bne.n	8102916 <xQueueGenericSend+0x6a>
 810290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102912:	2b01      	cmp	r3, #1
 8102914:	d101      	bne.n	810291a <xQueueGenericSend+0x6e>
 8102916:	2301      	movs	r3, #1
 8102918:	e000      	b.n	810291c <xQueueGenericSend+0x70>
 810291a:	2300      	movs	r3, #0
 810291c:	2b00      	cmp	r3, #0
 810291e:	d109      	bne.n	8102934 <xQueueGenericSend+0x88>
 8102920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102924:	f383 8811 	msr	BASEPRI, r3
 8102928:	f3bf 8f6f 	isb	sy
 810292c:	f3bf 8f4f 	dsb	sy
 8102930:	623b      	str	r3, [r7, #32]
 8102932:	e7fe      	b.n	8102932 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102934:	f001 fa16 	bl	8103d64 <xTaskGetSchedulerState>
 8102938:	4603      	mov	r3, r0
 810293a:	2b00      	cmp	r3, #0
 810293c:	d102      	bne.n	8102944 <xQueueGenericSend+0x98>
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	2b00      	cmp	r3, #0
 8102942:	d101      	bne.n	8102948 <xQueueGenericSend+0x9c>
 8102944:	2301      	movs	r3, #1
 8102946:	e000      	b.n	810294a <xQueueGenericSend+0x9e>
 8102948:	2300      	movs	r3, #0
 810294a:	2b00      	cmp	r3, #0
 810294c:	d109      	bne.n	8102962 <xQueueGenericSend+0xb6>
 810294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102952:	f383 8811 	msr	BASEPRI, r3
 8102956:	f3bf 8f6f 	isb	sy
 810295a:	f3bf 8f4f 	dsb	sy
 810295e:	61fb      	str	r3, [r7, #28]
 8102960:	e7fe      	b.n	8102960 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102962:	f7ff fd4b 	bl	81023fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810296e:	429a      	cmp	r2, r3
 8102970:	d302      	bcc.n	8102978 <xQueueGenericSend+0xcc>
 8102972:	683b      	ldr	r3, [r7, #0]
 8102974:	2b02      	cmp	r3, #2
 8102976:	d129      	bne.n	81029cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102978:	683a      	ldr	r2, [r7, #0]
 810297a:	68b9      	ldr	r1, [r7, #8]
 810297c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810297e:	f000 fa7c 	bl	8102e7a <prvCopyDataToQueue>
 8102982:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102988:	2b00      	cmp	r3, #0
 810298a:	d010      	beq.n	81029ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810298e:	3324      	adds	r3, #36	; 0x24
 8102990:	4618      	mov	r0, r3
 8102992:	f001 f831 	bl	81039f8 <xTaskRemoveFromEventList>
 8102996:	4603      	mov	r3, r0
 8102998:	2b00      	cmp	r3, #0
 810299a:	d013      	beq.n	81029c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810299c:	4b3f      	ldr	r3, [pc, #252]	; (8102a9c <xQueueGenericSend+0x1f0>)
 810299e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81029a2:	601a      	str	r2, [r3, #0]
 81029a4:	f3bf 8f4f 	dsb	sy
 81029a8:	f3bf 8f6f 	isb	sy
 81029ac:	e00a      	b.n	81029c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81029b0:	2b00      	cmp	r3, #0
 81029b2:	d007      	beq.n	81029c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81029b4:	4b39      	ldr	r3, [pc, #228]	; (8102a9c <xQueueGenericSend+0x1f0>)
 81029b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81029ba:	601a      	str	r2, [r3, #0]
 81029bc:	f3bf 8f4f 	dsb	sy
 81029c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81029c4:	f7ff fd48 	bl	8102458 <vPortExitCritical>
				return pdPASS;
 81029c8:	2301      	movs	r3, #1
 81029ca:	e063      	b.n	8102a94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	2b00      	cmp	r3, #0
 81029d0:	d103      	bne.n	81029da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81029d2:	f7ff fd41 	bl	8102458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81029d6:	2300      	movs	r3, #0
 81029d8:	e05c      	b.n	8102a94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81029dc:	2b00      	cmp	r3, #0
 81029de:	d106      	bne.n	81029ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81029e0:	f107 0314 	add.w	r3, r7, #20
 81029e4:	4618      	mov	r0, r3
 81029e6:	f001 f869 	bl	8103abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81029ea:	2301      	movs	r3, #1
 81029ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81029ee:	f7ff fd33 	bl	8102458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81029f2:	f000 fde5 	bl	81035c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81029f6:	f7ff fd01 	bl	81023fc <vPortEnterCritical>
 81029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81029fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102a00:	b25b      	sxtb	r3, r3
 8102a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102a06:	d103      	bne.n	8102a10 <xQueueGenericSend+0x164>
 8102a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a0a:	2200      	movs	r2, #0
 8102a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102a16:	b25b      	sxtb	r3, r3
 8102a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102a1c:	d103      	bne.n	8102a26 <xQueueGenericSend+0x17a>
 8102a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a20:	2200      	movs	r2, #0
 8102a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102a26:	f7ff fd17 	bl	8102458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102a2a:	1d3a      	adds	r2, r7, #4
 8102a2c:	f107 0314 	add.w	r3, r7, #20
 8102a30:	4611      	mov	r1, r2
 8102a32:	4618      	mov	r0, r3
 8102a34:	f001 f858 	bl	8103ae8 <xTaskCheckForTimeOut>
 8102a38:	4603      	mov	r3, r0
 8102a3a:	2b00      	cmp	r3, #0
 8102a3c:	d124      	bne.n	8102a88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8102a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102a40:	f000 fb13 	bl	810306a <prvIsQueueFull>
 8102a44:	4603      	mov	r3, r0
 8102a46:	2b00      	cmp	r3, #0
 8102a48:	d018      	beq.n	8102a7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8102a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a4c:	3310      	adds	r3, #16
 8102a4e:	687a      	ldr	r2, [r7, #4]
 8102a50:	4611      	mov	r1, r2
 8102a52:	4618      	mov	r0, r3
 8102a54:	f000 ff82 	bl	810395c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8102a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102a5a:	f000 fa9e 	bl	8102f9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8102a5e:	f000 fdbd 	bl	81035dc <xTaskResumeAll>
 8102a62:	4603      	mov	r3, r0
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	f47f af7c 	bne.w	8102962 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8102a6a:	4b0c      	ldr	r3, [pc, #48]	; (8102a9c <xQueueGenericSend+0x1f0>)
 8102a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102a70:	601a      	str	r2, [r3, #0]
 8102a72:	f3bf 8f4f 	dsb	sy
 8102a76:	f3bf 8f6f 	isb	sy
 8102a7a:	e772      	b.n	8102962 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102a7e:	f000 fa8c 	bl	8102f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102a82:	f000 fdab 	bl	81035dc <xTaskResumeAll>
 8102a86:	e76c      	b.n	8102962 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8102a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102a8a:	f000 fa86 	bl	8102f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102a8e:	f000 fda5 	bl	81035dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8102a92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102a94:	4618      	mov	r0, r3
 8102a96:	3738      	adds	r7, #56	; 0x38
 8102a98:	46bd      	mov	sp, r7
 8102a9a:	bd80      	pop	{r7, pc}
 8102a9c:	e000ed04 	.word	0xe000ed04

08102aa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8102aa0:	b580      	push	{r7, lr}
 8102aa2:	b08e      	sub	sp, #56	; 0x38
 8102aa4:	af00      	add	r7, sp, #0
 8102aa6:	60f8      	str	r0, [r7, #12]
 8102aa8:	60b9      	str	r1, [r7, #8]
 8102aaa:	607a      	str	r2, [r7, #4]
 8102aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102aae:	68fb      	ldr	r3, [r7, #12]
 8102ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8102ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	d109      	bne.n	8102acc <xQueueGenericSendFromISR+0x2c>
 8102ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102abc:	f383 8811 	msr	BASEPRI, r3
 8102ac0:	f3bf 8f6f 	isb	sy
 8102ac4:	f3bf 8f4f 	dsb	sy
 8102ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8102aca:	e7fe      	b.n	8102aca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102acc:	68bb      	ldr	r3, [r7, #8]
 8102ace:	2b00      	cmp	r3, #0
 8102ad0:	d103      	bne.n	8102ada <xQueueGenericSendFromISR+0x3a>
 8102ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ad6:	2b00      	cmp	r3, #0
 8102ad8:	d101      	bne.n	8102ade <xQueueGenericSendFromISR+0x3e>
 8102ada:	2301      	movs	r3, #1
 8102adc:	e000      	b.n	8102ae0 <xQueueGenericSendFromISR+0x40>
 8102ade:	2300      	movs	r3, #0
 8102ae0:	2b00      	cmp	r3, #0
 8102ae2:	d109      	bne.n	8102af8 <xQueueGenericSendFromISR+0x58>
 8102ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ae8:	f383 8811 	msr	BASEPRI, r3
 8102aec:	f3bf 8f6f 	isb	sy
 8102af0:	f3bf 8f4f 	dsb	sy
 8102af4:	623b      	str	r3, [r7, #32]
 8102af6:	e7fe      	b.n	8102af6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102af8:	683b      	ldr	r3, [r7, #0]
 8102afa:	2b02      	cmp	r3, #2
 8102afc:	d103      	bne.n	8102b06 <xQueueGenericSendFromISR+0x66>
 8102afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b02:	2b01      	cmp	r3, #1
 8102b04:	d101      	bne.n	8102b0a <xQueueGenericSendFromISR+0x6a>
 8102b06:	2301      	movs	r3, #1
 8102b08:	e000      	b.n	8102b0c <xQueueGenericSendFromISR+0x6c>
 8102b0a:	2300      	movs	r3, #0
 8102b0c:	2b00      	cmp	r3, #0
 8102b0e:	d109      	bne.n	8102b24 <xQueueGenericSendFromISR+0x84>
 8102b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b14:	f383 8811 	msr	BASEPRI, r3
 8102b18:	f3bf 8f6f 	isb	sy
 8102b1c:	f3bf 8f4f 	dsb	sy
 8102b20:	61fb      	str	r3, [r7, #28]
 8102b22:	e7fe      	b.n	8102b22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102b24:	f7ff fd46 	bl	81025b4 <vPortValidateInterruptPriority>
	__asm volatile
 8102b28:	f3ef 8211 	mrs	r2, BASEPRI
 8102b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b30:	f383 8811 	msr	BASEPRI, r3
 8102b34:	f3bf 8f6f 	isb	sy
 8102b38:	f3bf 8f4f 	dsb	sy
 8102b3c:	61ba      	str	r2, [r7, #24]
 8102b3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8102b40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b4c:	429a      	cmp	r2, r3
 8102b4e:	d302      	bcc.n	8102b56 <xQueueGenericSendFromISR+0xb6>
 8102b50:	683b      	ldr	r3, [r7, #0]
 8102b52:	2b02      	cmp	r3, #2
 8102b54:	d12c      	bne.n	8102bb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102b60:	683a      	ldr	r2, [r7, #0]
 8102b62:	68b9      	ldr	r1, [r7, #8]
 8102b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102b66:	f000 f988 	bl	8102e7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102b6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8102b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102b72:	d112      	bne.n	8102b9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d016      	beq.n	8102baa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b7e:	3324      	adds	r3, #36	; 0x24
 8102b80:	4618      	mov	r0, r3
 8102b82:	f000 ff39 	bl	81039f8 <xTaskRemoveFromEventList>
 8102b86:	4603      	mov	r3, r0
 8102b88:	2b00      	cmp	r3, #0
 8102b8a:	d00e      	beq.n	8102baa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	2b00      	cmp	r3, #0
 8102b90:	d00b      	beq.n	8102baa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	2201      	movs	r2, #1
 8102b96:	601a      	str	r2, [r3, #0]
 8102b98:	e007      	b.n	8102baa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102b9e:	3301      	adds	r3, #1
 8102ba0:	b2db      	uxtb	r3, r3
 8102ba2:	b25a      	sxtb	r2, r3
 8102ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102baa:	2301      	movs	r3, #1
 8102bac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8102bae:	e001      	b.n	8102bb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102bb0:	2300      	movs	r3, #0
 8102bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8102bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102bb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8102bb8:	693b      	ldr	r3, [r7, #16]
 8102bba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8102bc0:	4618      	mov	r0, r3
 8102bc2:	3738      	adds	r7, #56	; 0x38
 8102bc4:	46bd      	mov	sp, r7
 8102bc6:	bd80      	pop	{r7, pc}

08102bc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102bc8:	b580      	push	{r7, lr}
 8102bca:	b08c      	sub	sp, #48	; 0x30
 8102bcc:	af00      	add	r7, sp, #0
 8102bce:	60f8      	str	r0, [r7, #12]
 8102bd0:	60b9      	str	r1, [r7, #8]
 8102bd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8102bd4:	2300      	movs	r3, #0
 8102bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d109      	bne.n	8102bf6 <xQueueReceive+0x2e>
	__asm volatile
 8102be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102be6:	f383 8811 	msr	BASEPRI, r3
 8102bea:	f3bf 8f6f 	isb	sy
 8102bee:	f3bf 8f4f 	dsb	sy
 8102bf2:	623b      	str	r3, [r7, #32]
 8102bf4:	e7fe      	b.n	8102bf4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102bf6:	68bb      	ldr	r3, [r7, #8]
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d103      	bne.n	8102c04 <xQueueReceive+0x3c>
 8102bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c00:	2b00      	cmp	r3, #0
 8102c02:	d101      	bne.n	8102c08 <xQueueReceive+0x40>
 8102c04:	2301      	movs	r3, #1
 8102c06:	e000      	b.n	8102c0a <xQueueReceive+0x42>
 8102c08:	2300      	movs	r3, #0
 8102c0a:	2b00      	cmp	r3, #0
 8102c0c:	d109      	bne.n	8102c22 <xQueueReceive+0x5a>
 8102c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c12:	f383 8811 	msr	BASEPRI, r3
 8102c16:	f3bf 8f6f 	isb	sy
 8102c1a:	f3bf 8f4f 	dsb	sy
 8102c1e:	61fb      	str	r3, [r7, #28]
 8102c20:	e7fe      	b.n	8102c20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102c22:	f001 f89f 	bl	8103d64 <xTaskGetSchedulerState>
 8102c26:	4603      	mov	r3, r0
 8102c28:	2b00      	cmp	r3, #0
 8102c2a:	d102      	bne.n	8102c32 <xQueueReceive+0x6a>
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	d101      	bne.n	8102c36 <xQueueReceive+0x6e>
 8102c32:	2301      	movs	r3, #1
 8102c34:	e000      	b.n	8102c38 <xQueueReceive+0x70>
 8102c36:	2300      	movs	r3, #0
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	d109      	bne.n	8102c50 <xQueueReceive+0x88>
 8102c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c40:	f383 8811 	msr	BASEPRI, r3
 8102c44:	f3bf 8f6f 	isb	sy
 8102c48:	f3bf 8f4f 	dsb	sy
 8102c4c:	61bb      	str	r3, [r7, #24]
 8102c4e:	e7fe      	b.n	8102c4e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102c50:	f7ff fbd4 	bl	81023fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d01f      	beq.n	8102ca0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102c60:	68b9      	ldr	r1, [r7, #8]
 8102c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102c64:	f000 f973 	bl	8102f4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c6a:	1e5a      	subs	r2, r3, #1
 8102c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c72:	691b      	ldr	r3, [r3, #16]
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d00f      	beq.n	8102c98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c7a:	3310      	adds	r3, #16
 8102c7c:	4618      	mov	r0, r3
 8102c7e:	f000 febb 	bl	81039f8 <xTaskRemoveFromEventList>
 8102c82:	4603      	mov	r3, r0
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d007      	beq.n	8102c98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8102c88:	4b3c      	ldr	r3, [pc, #240]	; (8102d7c <xQueueReceive+0x1b4>)
 8102c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102c8e:	601a      	str	r2, [r3, #0]
 8102c90:	f3bf 8f4f 	dsb	sy
 8102c94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8102c98:	f7ff fbde 	bl	8102458 <vPortExitCritical>
				return pdPASS;
 8102c9c:	2301      	movs	r3, #1
 8102c9e:	e069      	b.n	8102d74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	2b00      	cmp	r3, #0
 8102ca4:	d103      	bne.n	8102cae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102ca6:	f7ff fbd7 	bl	8102458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8102caa:	2300      	movs	r3, #0
 8102cac:	e062      	b.n	8102d74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d106      	bne.n	8102cc2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102cb4:	f107 0310 	add.w	r3, r7, #16
 8102cb8:	4618      	mov	r0, r3
 8102cba:	f000 feff 	bl	8103abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102cbe:	2301      	movs	r3, #1
 8102cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102cc2:	f7ff fbc9 	bl	8102458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102cc6:	f000 fc7b 	bl	81035c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102cca:	f7ff fb97 	bl	81023fc <vPortEnterCritical>
 8102cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102cd4:	b25b      	sxtb	r3, r3
 8102cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102cda:	d103      	bne.n	8102ce4 <xQueueReceive+0x11c>
 8102cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102cde:	2200      	movs	r2, #0
 8102ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102cea:	b25b      	sxtb	r3, r3
 8102cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102cf0:	d103      	bne.n	8102cfa <xQueueReceive+0x132>
 8102cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102cf4:	2200      	movs	r2, #0
 8102cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102cfa:	f7ff fbad 	bl	8102458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102cfe:	1d3a      	adds	r2, r7, #4
 8102d00:	f107 0310 	add.w	r3, r7, #16
 8102d04:	4611      	mov	r1, r2
 8102d06:	4618      	mov	r0, r3
 8102d08:	f000 feee 	bl	8103ae8 <xTaskCheckForTimeOut>
 8102d0c:	4603      	mov	r3, r0
 8102d0e:	2b00      	cmp	r3, #0
 8102d10:	d123      	bne.n	8102d5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102d14:	f000 f993 	bl	810303e <prvIsQueueEmpty>
 8102d18:	4603      	mov	r3, r0
 8102d1a:	2b00      	cmp	r3, #0
 8102d1c:	d017      	beq.n	8102d4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d20:	3324      	adds	r3, #36	; 0x24
 8102d22:	687a      	ldr	r2, [r7, #4]
 8102d24:	4611      	mov	r1, r2
 8102d26:	4618      	mov	r0, r3
 8102d28:	f000 fe18 	bl	810395c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102d2e:	f000 f934 	bl	8102f9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102d32:	f000 fc53 	bl	81035dc <xTaskResumeAll>
 8102d36:	4603      	mov	r3, r0
 8102d38:	2b00      	cmp	r3, #0
 8102d3a:	d189      	bne.n	8102c50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8102d3c:	4b0f      	ldr	r3, [pc, #60]	; (8102d7c <xQueueReceive+0x1b4>)
 8102d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102d42:	601a      	str	r2, [r3, #0]
 8102d44:	f3bf 8f4f 	dsb	sy
 8102d48:	f3bf 8f6f 	isb	sy
 8102d4c:	e780      	b.n	8102c50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102d50:	f000 f923 	bl	8102f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102d54:	f000 fc42 	bl	81035dc <xTaskResumeAll>
 8102d58:	e77a      	b.n	8102c50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8102d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102d5c:	f000 f91d 	bl	8102f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102d60:	f000 fc3c 	bl	81035dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102d66:	f000 f96a 	bl	810303e <prvIsQueueEmpty>
 8102d6a:	4603      	mov	r3, r0
 8102d6c:	2b00      	cmp	r3, #0
 8102d6e:	f43f af6f 	beq.w	8102c50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102d72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102d74:	4618      	mov	r0, r3
 8102d76:	3730      	adds	r7, #48	; 0x30
 8102d78:	46bd      	mov	sp, r7
 8102d7a:	bd80      	pop	{r7, pc}
 8102d7c:	e000ed04 	.word	0xe000ed04

08102d80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8102d80:	b580      	push	{r7, lr}
 8102d82:	b08e      	sub	sp, #56	; 0x38
 8102d84:	af00      	add	r7, sp, #0
 8102d86:	60f8      	str	r0, [r7, #12]
 8102d88:	60b9      	str	r1, [r7, #8]
 8102d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8102d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d92:	2b00      	cmp	r3, #0
 8102d94:	d109      	bne.n	8102daa <xQueueReceiveFromISR+0x2a>
 8102d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d9a:	f383 8811 	msr	BASEPRI, r3
 8102d9e:	f3bf 8f6f 	isb	sy
 8102da2:	f3bf 8f4f 	dsb	sy
 8102da6:	623b      	str	r3, [r7, #32]
 8102da8:	e7fe      	b.n	8102da8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102daa:	68bb      	ldr	r3, [r7, #8]
 8102dac:	2b00      	cmp	r3, #0
 8102dae:	d103      	bne.n	8102db8 <xQueueReceiveFromISR+0x38>
 8102db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d101      	bne.n	8102dbc <xQueueReceiveFromISR+0x3c>
 8102db8:	2301      	movs	r3, #1
 8102dba:	e000      	b.n	8102dbe <xQueueReceiveFromISR+0x3e>
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d109      	bne.n	8102dd6 <xQueueReceiveFromISR+0x56>
 8102dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102dc6:	f383 8811 	msr	BASEPRI, r3
 8102dca:	f3bf 8f6f 	isb	sy
 8102dce:	f3bf 8f4f 	dsb	sy
 8102dd2:	61fb      	str	r3, [r7, #28]
 8102dd4:	e7fe      	b.n	8102dd4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102dd6:	f7ff fbed 	bl	81025b4 <vPortValidateInterruptPriority>
	__asm volatile
 8102dda:	f3ef 8211 	mrs	r2, BASEPRI
 8102dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102de2:	f383 8811 	msr	BASEPRI, r3
 8102de6:	f3bf 8f6f 	isb	sy
 8102dea:	f3bf 8f4f 	dsb	sy
 8102dee:	61ba      	str	r2, [r7, #24]
 8102df0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8102df2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102df4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102dfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102dfe:	2b00      	cmp	r3, #0
 8102e00:	d02f      	beq.n	8102e62 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8102e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102e0c:	68b9      	ldr	r1, [r7, #8]
 8102e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102e10:	f000 f89d 	bl	8102f4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e16:	1e5a      	subs	r2, r3, #1
 8102e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8102e1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8102e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102e24:	d112      	bne.n	8102e4c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e28:	691b      	ldr	r3, [r3, #16]
 8102e2a:	2b00      	cmp	r3, #0
 8102e2c:	d016      	beq.n	8102e5c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e30:	3310      	adds	r3, #16
 8102e32:	4618      	mov	r0, r3
 8102e34:	f000 fde0 	bl	81039f8 <xTaskRemoveFromEventList>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	2b00      	cmp	r3, #0
 8102e3c:	d00e      	beq.n	8102e5c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	2b00      	cmp	r3, #0
 8102e42:	d00b      	beq.n	8102e5c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	2201      	movs	r2, #1
 8102e48:	601a      	str	r2, [r3, #0]
 8102e4a:	e007      	b.n	8102e5c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8102e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e50:	3301      	adds	r3, #1
 8102e52:	b2db      	uxtb	r3, r3
 8102e54:	b25a      	sxtb	r2, r3
 8102e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8102e5c:	2301      	movs	r3, #1
 8102e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8102e60:	e001      	b.n	8102e66 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8102e62:	2300      	movs	r3, #0
 8102e64:	637b      	str	r3, [r7, #52]	; 0x34
 8102e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102e68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8102e6a:	693b      	ldr	r3, [r7, #16]
 8102e6c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8102e72:	4618      	mov	r0, r3
 8102e74:	3738      	adds	r7, #56	; 0x38
 8102e76:	46bd      	mov	sp, r7
 8102e78:	bd80      	pop	{r7, pc}

08102e7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102e7a:	b580      	push	{r7, lr}
 8102e7c:	b086      	sub	sp, #24
 8102e7e:	af00      	add	r7, sp, #0
 8102e80:	60f8      	str	r0, [r7, #12]
 8102e82:	60b9      	str	r1, [r7, #8]
 8102e84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102e86:	2300      	movs	r3, #0
 8102e88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102e8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8102e90:	68fb      	ldr	r3, [r7, #12]
 8102e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e94:	2b00      	cmp	r3, #0
 8102e96:	d10d      	bne.n	8102eb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	2b00      	cmp	r3, #0
 8102e9e:	d14d      	bne.n	8102f3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	689b      	ldr	r3, [r3, #8]
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	f000 ff7b 	bl	8103da0 <xTaskPriorityDisinherit>
 8102eaa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	2200      	movs	r2, #0
 8102eb0:	609a      	str	r2, [r3, #8]
 8102eb2:	e043      	b.n	8102f3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d119      	bne.n	8102eee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	6858      	ldr	r0, [r3, #4]
 8102ebe:	68fb      	ldr	r3, [r7, #12]
 8102ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ec2:	461a      	mov	r2, r3
 8102ec4:	68b9      	ldr	r1, [r7, #8]
 8102ec6:	f001 fb95 	bl	81045f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	685a      	ldr	r2, [r3, #4]
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ed2:	441a      	add	r2, r3
 8102ed4:	68fb      	ldr	r3, [r7, #12]
 8102ed6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102ed8:	68fb      	ldr	r3, [r7, #12]
 8102eda:	685a      	ldr	r2, [r3, #4]
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	689b      	ldr	r3, [r3, #8]
 8102ee0:	429a      	cmp	r2, r3
 8102ee2:	d32b      	bcc.n	8102f3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8102ee4:	68fb      	ldr	r3, [r7, #12]
 8102ee6:	681a      	ldr	r2, [r3, #0]
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	605a      	str	r2, [r3, #4]
 8102eec:	e026      	b.n	8102f3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	68d8      	ldr	r0, [r3, #12]
 8102ef2:	68fb      	ldr	r3, [r7, #12]
 8102ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ef6:	461a      	mov	r2, r3
 8102ef8:	68b9      	ldr	r1, [r7, #8]
 8102efa:	f001 fb7b 	bl	81045f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102efe:	68fb      	ldr	r3, [r7, #12]
 8102f00:	68da      	ldr	r2, [r3, #12]
 8102f02:	68fb      	ldr	r3, [r7, #12]
 8102f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f06:	425b      	negs	r3, r3
 8102f08:	441a      	add	r2, r3
 8102f0a:	68fb      	ldr	r3, [r7, #12]
 8102f0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102f0e:	68fb      	ldr	r3, [r7, #12]
 8102f10:	68da      	ldr	r2, [r3, #12]
 8102f12:	68fb      	ldr	r3, [r7, #12]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	429a      	cmp	r2, r3
 8102f18:	d207      	bcs.n	8102f2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102f1a:	68fb      	ldr	r3, [r7, #12]
 8102f1c:	689a      	ldr	r2, [r3, #8]
 8102f1e:	68fb      	ldr	r3, [r7, #12]
 8102f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f22:	425b      	negs	r3, r3
 8102f24:	441a      	add	r2, r3
 8102f26:	68fb      	ldr	r3, [r7, #12]
 8102f28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	2b02      	cmp	r3, #2
 8102f2e:	d105      	bne.n	8102f3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102f30:	693b      	ldr	r3, [r7, #16]
 8102f32:	2b00      	cmp	r3, #0
 8102f34:	d002      	beq.n	8102f3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8102f36:	693b      	ldr	r3, [r7, #16]
 8102f38:	3b01      	subs	r3, #1
 8102f3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102f3c:	693b      	ldr	r3, [r7, #16]
 8102f3e:	1c5a      	adds	r2, r3, #1
 8102f40:	68fb      	ldr	r3, [r7, #12]
 8102f42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8102f44:	697b      	ldr	r3, [r7, #20]
}
 8102f46:	4618      	mov	r0, r3
 8102f48:	3718      	adds	r7, #24
 8102f4a:	46bd      	mov	sp, r7
 8102f4c:	bd80      	pop	{r7, pc}

08102f4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102f4e:	b580      	push	{r7, lr}
 8102f50:	b082      	sub	sp, #8
 8102f52:	af00      	add	r7, sp, #0
 8102f54:	6078      	str	r0, [r7, #4]
 8102f56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	d018      	beq.n	8102f92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	68da      	ldr	r2, [r3, #12]
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f68:	441a      	add	r2, r3
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	68da      	ldr	r2, [r3, #12]
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	689b      	ldr	r3, [r3, #8]
 8102f76:	429a      	cmp	r2, r3
 8102f78:	d303      	bcc.n	8102f82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	681a      	ldr	r2, [r3, #0]
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	68d9      	ldr	r1, [r3, #12]
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f8a:	461a      	mov	r2, r3
 8102f8c:	6838      	ldr	r0, [r7, #0]
 8102f8e:	f001 fb31 	bl	81045f4 <memcpy>
	}
}
 8102f92:	bf00      	nop
 8102f94:	3708      	adds	r7, #8
 8102f96:	46bd      	mov	sp, r7
 8102f98:	bd80      	pop	{r7, pc}

08102f9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102f9a:	b580      	push	{r7, lr}
 8102f9c:	b084      	sub	sp, #16
 8102f9e:	af00      	add	r7, sp, #0
 8102fa0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8102fa2:	f7ff fa2b 	bl	81023fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102fac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102fae:	e011      	b.n	8102fd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d012      	beq.n	8102fde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	3324      	adds	r3, #36	; 0x24
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f000 fd1b 	bl	81039f8 <xTaskRemoveFromEventList>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	2b00      	cmp	r3, #0
 8102fc6:	d001      	beq.n	8102fcc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8102fc8:	f000 fdee 	bl	8103ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8102fcc:	7bfb      	ldrb	r3, [r7, #15]
 8102fce:	3b01      	subs	r3, #1
 8102fd0:	b2db      	uxtb	r3, r3
 8102fd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	dce9      	bgt.n	8102fb0 <prvUnlockQueue+0x16>
 8102fdc:	e000      	b.n	8102fe0 <prvUnlockQueue+0x46>
					break;
 8102fde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	22ff      	movs	r2, #255	; 0xff
 8102fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8102fe8:	f7ff fa36 	bl	8102458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8102fec:	f7ff fa06 	bl	81023fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102ff6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102ff8:	e011      	b.n	810301e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	691b      	ldr	r3, [r3, #16]
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d012      	beq.n	8103028 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	3310      	adds	r3, #16
 8103006:	4618      	mov	r0, r3
 8103008:	f000 fcf6 	bl	81039f8 <xTaskRemoveFromEventList>
 810300c:	4603      	mov	r3, r0
 810300e:	2b00      	cmp	r3, #0
 8103010:	d001      	beq.n	8103016 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8103012:	f000 fdc9 	bl	8103ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8103016:	7bbb      	ldrb	r3, [r7, #14]
 8103018:	3b01      	subs	r3, #1
 810301a:	b2db      	uxtb	r3, r3
 810301c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810301e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8103022:	2b00      	cmp	r3, #0
 8103024:	dce9      	bgt.n	8102ffa <prvUnlockQueue+0x60>
 8103026:	e000      	b.n	810302a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8103028:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	22ff      	movs	r2, #255	; 0xff
 810302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8103032:	f7ff fa11 	bl	8102458 <vPortExitCritical>
}
 8103036:	bf00      	nop
 8103038:	3710      	adds	r7, #16
 810303a:	46bd      	mov	sp, r7
 810303c:	bd80      	pop	{r7, pc}

0810303e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810303e:	b580      	push	{r7, lr}
 8103040:	b084      	sub	sp, #16
 8103042:	af00      	add	r7, sp, #0
 8103044:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103046:	f7ff f9d9 	bl	81023fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810304e:	2b00      	cmp	r3, #0
 8103050:	d102      	bne.n	8103058 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8103052:	2301      	movs	r3, #1
 8103054:	60fb      	str	r3, [r7, #12]
 8103056:	e001      	b.n	810305c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8103058:	2300      	movs	r3, #0
 810305a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810305c:	f7ff f9fc 	bl	8102458 <vPortExitCritical>

	return xReturn;
 8103060:	68fb      	ldr	r3, [r7, #12]
}
 8103062:	4618      	mov	r0, r3
 8103064:	3710      	adds	r7, #16
 8103066:	46bd      	mov	sp, r7
 8103068:	bd80      	pop	{r7, pc}

0810306a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810306a:	b580      	push	{r7, lr}
 810306c:	b084      	sub	sp, #16
 810306e:	af00      	add	r7, sp, #0
 8103070:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103072:	f7ff f9c3 	bl	81023fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810307e:	429a      	cmp	r2, r3
 8103080:	d102      	bne.n	8103088 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8103082:	2301      	movs	r3, #1
 8103084:	60fb      	str	r3, [r7, #12]
 8103086:	e001      	b.n	810308c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8103088:	2300      	movs	r3, #0
 810308a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810308c:	f7ff f9e4 	bl	8102458 <vPortExitCritical>

	return xReturn;
 8103090:	68fb      	ldr	r3, [r7, #12]
}
 8103092:	4618      	mov	r0, r3
 8103094:	3710      	adds	r7, #16
 8103096:	46bd      	mov	sp, r7
 8103098:	bd80      	pop	{r7, pc}
	...

0810309c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810309c:	b480      	push	{r7}
 810309e:	b085      	sub	sp, #20
 81030a0:	af00      	add	r7, sp, #0
 81030a2:	6078      	str	r0, [r7, #4]
 81030a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81030a6:	2300      	movs	r3, #0
 81030a8:	60fb      	str	r3, [r7, #12]
 81030aa:	e014      	b.n	81030d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81030ac:	4a0e      	ldr	r2, [pc, #56]	; (81030e8 <vQueueAddToRegistry+0x4c>)
 81030ae:	68fb      	ldr	r3, [r7, #12]
 81030b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d10b      	bne.n	81030d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81030b8:	490b      	ldr	r1, [pc, #44]	; (81030e8 <vQueueAddToRegistry+0x4c>)
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	683a      	ldr	r2, [r7, #0]
 81030be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81030c2:	4a09      	ldr	r2, [pc, #36]	; (81030e8 <vQueueAddToRegistry+0x4c>)
 81030c4:	68fb      	ldr	r3, [r7, #12]
 81030c6:	00db      	lsls	r3, r3, #3
 81030c8:	4413      	add	r3, r2
 81030ca:	687a      	ldr	r2, [r7, #4]
 81030cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81030ce:	e005      	b.n	81030dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	3301      	adds	r3, #1
 81030d4:	60fb      	str	r3, [r7, #12]
 81030d6:	68fb      	ldr	r3, [r7, #12]
 81030d8:	2b07      	cmp	r3, #7
 81030da:	d9e7      	bls.n	81030ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81030dc:	bf00      	nop
 81030de:	3714      	adds	r7, #20
 81030e0:	46bd      	mov	sp, r7
 81030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030e6:	4770      	bx	lr
 81030e8:	10004998 	.word	0x10004998

081030ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81030ec:	b580      	push	{r7, lr}
 81030ee:	b086      	sub	sp, #24
 81030f0:	af00      	add	r7, sp, #0
 81030f2:	60f8      	str	r0, [r7, #12]
 81030f4:	60b9      	str	r1, [r7, #8]
 81030f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81030f8:	68fb      	ldr	r3, [r7, #12]
 81030fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81030fc:	f7ff f97e 	bl	81023fc <vPortEnterCritical>
 8103100:	697b      	ldr	r3, [r7, #20]
 8103102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103106:	b25b      	sxtb	r3, r3
 8103108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810310c:	d103      	bne.n	8103116 <vQueueWaitForMessageRestricted+0x2a>
 810310e:	697b      	ldr	r3, [r7, #20]
 8103110:	2200      	movs	r2, #0
 8103112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103116:	697b      	ldr	r3, [r7, #20]
 8103118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810311c:	b25b      	sxtb	r3, r3
 810311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103122:	d103      	bne.n	810312c <vQueueWaitForMessageRestricted+0x40>
 8103124:	697b      	ldr	r3, [r7, #20]
 8103126:	2200      	movs	r2, #0
 8103128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810312c:	f7ff f994 	bl	8102458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8103130:	697b      	ldr	r3, [r7, #20]
 8103132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103134:	2b00      	cmp	r3, #0
 8103136:	d106      	bne.n	8103146 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8103138:	697b      	ldr	r3, [r7, #20]
 810313a:	3324      	adds	r3, #36	; 0x24
 810313c:	687a      	ldr	r2, [r7, #4]
 810313e:	68b9      	ldr	r1, [r7, #8]
 8103140:	4618      	mov	r0, r3
 8103142:	f000 fc2f 	bl	81039a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8103146:	6978      	ldr	r0, [r7, #20]
 8103148:	f7ff ff27 	bl	8102f9a <prvUnlockQueue>
	}
 810314c:	bf00      	nop
 810314e:	3718      	adds	r7, #24
 8103150:	46bd      	mov	sp, r7
 8103152:	bd80      	pop	{r7, pc}

08103154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8103154:	b580      	push	{r7, lr}
 8103156:	b08e      	sub	sp, #56	; 0x38
 8103158:	af04      	add	r7, sp, #16
 810315a:	60f8      	str	r0, [r7, #12]
 810315c:	60b9      	str	r1, [r7, #8]
 810315e:	607a      	str	r2, [r7, #4]
 8103160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8103162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103164:	2b00      	cmp	r3, #0
 8103166:	d109      	bne.n	810317c <xTaskCreateStatic+0x28>
	__asm volatile
 8103168:	f04f 0350 	mov.w	r3, #80	; 0x50
 810316c:	f383 8811 	msr	BASEPRI, r3
 8103170:	f3bf 8f6f 	isb	sy
 8103174:	f3bf 8f4f 	dsb	sy
 8103178:	623b      	str	r3, [r7, #32]
 810317a:	e7fe      	b.n	810317a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810317e:	2b00      	cmp	r3, #0
 8103180:	d109      	bne.n	8103196 <xTaskCreateStatic+0x42>
 8103182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103186:	f383 8811 	msr	BASEPRI, r3
 810318a:	f3bf 8f6f 	isb	sy
 810318e:	f3bf 8f4f 	dsb	sy
 8103192:	61fb      	str	r3, [r7, #28]
 8103194:	e7fe      	b.n	8103194 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8103196:	235c      	movs	r3, #92	; 0x5c
 8103198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810319a:	693b      	ldr	r3, [r7, #16]
 810319c:	2b5c      	cmp	r3, #92	; 0x5c
 810319e:	d009      	beq.n	81031b4 <xTaskCreateStatic+0x60>
 81031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81031a4:	f383 8811 	msr	BASEPRI, r3
 81031a8:	f3bf 8f6f 	isb	sy
 81031ac:	f3bf 8f4f 	dsb	sy
 81031b0:	61bb      	str	r3, [r7, #24]
 81031b2:	e7fe      	b.n	81031b2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81031b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	d01e      	beq.n	81031fa <xTaskCreateStatic+0xa6>
 81031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81031be:	2b00      	cmp	r3, #0
 81031c0:	d01b      	beq.n	81031fa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81031c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81031ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031ce:	2202      	movs	r2, #2
 81031d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81031d4:	2300      	movs	r3, #0
 81031d6:	9303      	str	r3, [sp, #12]
 81031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031da:	9302      	str	r3, [sp, #8]
 81031dc:	f107 0314 	add.w	r3, r7, #20
 81031e0:	9301      	str	r3, [sp, #4]
 81031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031e4:	9300      	str	r3, [sp, #0]
 81031e6:	683b      	ldr	r3, [r7, #0]
 81031e8:	687a      	ldr	r2, [r7, #4]
 81031ea:	68b9      	ldr	r1, [r7, #8]
 81031ec:	68f8      	ldr	r0, [r7, #12]
 81031ee:	f000 f850 	bl	8103292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81031f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81031f4:	f000 f8dc 	bl	81033b0 <prvAddNewTaskToReadyList>
 81031f8:	e001      	b.n	81031fe <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 81031fa:	2300      	movs	r3, #0
 81031fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81031fe:	697b      	ldr	r3, [r7, #20]
	}
 8103200:	4618      	mov	r0, r3
 8103202:	3728      	adds	r7, #40	; 0x28
 8103204:	46bd      	mov	sp, r7
 8103206:	bd80      	pop	{r7, pc}

08103208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8103208:	b580      	push	{r7, lr}
 810320a:	b08c      	sub	sp, #48	; 0x30
 810320c:	af04      	add	r7, sp, #16
 810320e:	60f8      	str	r0, [r7, #12]
 8103210:	60b9      	str	r1, [r7, #8]
 8103212:	603b      	str	r3, [r7, #0]
 8103214:	4613      	mov	r3, r2
 8103216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8103218:	88fb      	ldrh	r3, [r7, #6]
 810321a:	009b      	lsls	r3, r3, #2
 810321c:	4618      	mov	r0, r3
 810321e:	f7fe fd3d 	bl	8101c9c <pvPortMalloc>
 8103222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8103224:	697b      	ldr	r3, [r7, #20]
 8103226:	2b00      	cmp	r3, #0
 8103228:	d00e      	beq.n	8103248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810322a:	205c      	movs	r0, #92	; 0x5c
 810322c:	f7fe fd36 	bl	8101c9c <pvPortMalloc>
 8103230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8103232:	69fb      	ldr	r3, [r7, #28]
 8103234:	2b00      	cmp	r3, #0
 8103236:	d003      	beq.n	8103240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8103238:	69fb      	ldr	r3, [r7, #28]
 810323a:	697a      	ldr	r2, [r7, #20]
 810323c:	631a      	str	r2, [r3, #48]	; 0x30
 810323e:	e005      	b.n	810324c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8103240:	6978      	ldr	r0, [r7, #20]
 8103242:	f7fe fded 	bl	8101e20 <vPortFree>
 8103246:	e001      	b.n	810324c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8103248:	2300      	movs	r3, #0
 810324a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810324c:	69fb      	ldr	r3, [r7, #28]
 810324e:	2b00      	cmp	r3, #0
 8103250:	d017      	beq.n	8103282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8103252:	69fb      	ldr	r3, [r7, #28]
 8103254:	2200      	movs	r2, #0
 8103256:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810325a:	88fa      	ldrh	r2, [r7, #6]
 810325c:	2300      	movs	r3, #0
 810325e:	9303      	str	r3, [sp, #12]
 8103260:	69fb      	ldr	r3, [r7, #28]
 8103262:	9302      	str	r3, [sp, #8]
 8103264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103266:	9301      	str	r3, [sp, #4]
 8103268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810326a:	9300      	str	r3, [sp, #0]
 810326c:	683b      	ldr	r3, [r7, #0]
 810326e:	68b9      	ldr	r1, [r7, #8]
 8103270:	68f8      	ldr	r0, [r7, #12]
 8103272:	f000 f80e 	bl	8103292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8103276:	69f8      	ldr	r0, [r7, #28]
 8103278:	f000 f89a 	bl	81033b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810327c:	2301      	movs	r3, #1
 810327e:	61bb      	str	r3, [r7, #24]
 8103280:	e002      	b.n	8103288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8103282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8103286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8103288:	69bb      	ldr	r3, [r7, #24]
	}
 810328a:	4618      	mov	r0, r3
 810328c:	3720      	adds	r7, #32
 810328e:	46bd      	mov	sp, r7
 8103290:	bd80      	pop	{r7, pc}

08103292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8103292:	b580      	push	{r7, lr}
 8103294:	b088      	sub	sp, #32
 8103296:	af00      	add	r7, sp, #0
 8103298:	60f8      	str	r0, [r7, #12]
 810329a:	60b9      	str	r1, [r7, #8]
 810329c:	607a      	str	r2, [r7, #4]
 810329e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	009b      	lsls	r3, r3, #2
 81032a8:	461a      	mov	r2, r3
 81032aa:	21a5      	movs	r1, #165	; 0xa5
 81032ac:	f001 f9ad 	bl	810460a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81032ba:	3b01      	subs	r3, #1
 81032bc:	009b      	lsls	r3, r3, #2
 81032be:	4413      	add	r3, r2
 81032c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81032c2:	69bb      	ldr	r3, [r7, #24]
 81032c4:	f023 0307 	bic.w	r3, r3, #7
 81032c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81032ca:	69bb      	ldr	r3, [r7, #24]
 81032cc:	f003 0307 	and.w	r3, r3, #7
 81032d0:	2b00      	cmp	r3, #0
 81032d2:	d009      	beq.n	81032e8 <prvInitialiseNewTask+0x56>
 81032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81032d8:	f383 8811 	msr	BASEPRI, r3
 81032dc:	f3bf 8f6f 	isb	sy
 81032e0:	f3bf 8f4f 	dsb	sy
 81032e4:	617b      	str	r3, [r7, #20]
 81032e6:	e7fe      	b.n	81032e6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81032e8:	68bb      	ldr	r3, [r7, #8]
 81032ea:	2b00      	cmp	r3, #0
 81032ec:	d01f      	beq.n	810332e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81032ee:	2300      	movs	r3, #0
 81032f0:	61fb      	str	r3, [r7, #28]
 81032f2:	e012      	b.n	810331a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81032f4:	68ba      	ldr	r2, [r7, #8]
 81032f6:	69fb      	ldr	r3, [r7, #28]
 81032f8:	4413      	add	r3, r2
 81032fa:	7819      	ldrb	r1, [r3, #0]
 81032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81032fe:	69fb      	ldr	r3, [r7, #28]
 8103300:	4413      	add	r3, r2
 8103302:	3334      	adds	r3, #52	; 0x34
 8103304:	460a      	mov	r2, r1
 8103306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8103308:	68ba      	ldr	r2, [r7, #8]
 810330a:	69fb      	ldr	r3, [r7, #28]
 810330c:	4413      	add	r3, r2
 810330e:	781b      	ldrb	r3, [r3, #0]
 8103310:	2b00      	cmp	r3, #0
 8103312:	d006      	beq.n	8103322 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103314:	69fb      	ldr	r3, [r7, #28]
 8103316:	3301      	adds	r3, #1
 8103318:	61fb      	str	r3, [r7, #28]
 810331a:	69fb      	ldr	r3, [r7, #28]
 810331c:	2b0f      	cmp	r3, #15
 810331e:	d9e9      	bls.n	81032f4 <prvInitialiseNewTask+0x62>
 8103320:	e000      	b.n	8103324 <prvInitialiseNewTask+0x92>
			{
				break;
 8103322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8103324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103326:	2200      	movs	r2, #0
 8103328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810332c:	e003      	b.n	8103336 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103330:	2200      	movs	r2, #0
 8103332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8103336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103338:	2b37      	cmp	r3, #55	; 0x37
 810333a:	d901      	bls.n	8103340 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810333c:	2337      	movs	r3, #55	; 0x37
 810333e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8103340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8103346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810334a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810334e:	2200      	movs	r2, #0
 8103350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8103352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103354:	3304      	adds	r3, #4
 8103356:	4618      	mov	r0, r3
 8103358:	f7fe fe96 	bl	8102088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810335e:	3318      	adds	r3, #24
 8103360:	4618      	mov	r0, r3
 8103362:	f7fe fe91 	bl	8102088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8103366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810336a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810336e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8103376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810337a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810337e:	2200      	movs	r2, #0
 8103380:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8103382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103384:	2200      	movs	r2, #0
 8103386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810338a:	683a      	ldr	r2, [r7, #0]
 810338c:	68f9      	ldr	r1, [r7, #12]
 810338e:	69b8      	ldr	r0, [r7, #24]
 8103390:	f7fe ff0e 	bl	81021b0 <pxPortInitialiseStack>
 8103394:	4602      	mov	r2, r0
 8103396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810339c:	2b00      	cmp	r3, #0
 810339e:	d002      	beq.n	81033a6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81033a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81033a6:	bf00      	nop
 81033a8:	3720      	adds	r7, #32
 81033aa:	46bd      	mov	sp, r7
 81033ac:	bd80      	pop	{r7, pc}
	...

081033b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81033b0:	b580      	push	{r7, lr}
 81033b2:	b082      	sub	sp, #8
 81033b4:	af00      	add	r7, sp, #0
 81033b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81033b8:	f7ff f820 	bl	81023fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81033bc:	4b2d      	ldr	r3, [pc, #180]	; (8103474 <prvAddNewTaskToReadyList+0xc4>)
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	3301      	adds	r3, #1
 81033c2:	4a2c      	ldr	r2, [pc, #176]	; (8103474 <prvAddNewTaskToReadyList+0xc4>)
 81033c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81033c6:	4b2c      	ldr	r3, [pc, #176]	; (8103478 <prvAddNewTaskToReadyList+0xc8>)
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	d109      	bne.n	81033e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81033ce:	4a2a      	ldr	r2, [pc, #168]	; (8103478 <prvAddNewTaskToReadyList+0xc8>)
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81033d4:	4b27      	ldr	r3, [pc, #156]	; (8103474 <prvAddNewTaskToReadyList+0xc4>)
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	2b01      	cmp	r3, #1
 81033da:	d110      	bne.n	81033fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81033dc:	f000 fc08 	bl	8103bf0 <prvInitialiseTaskLists>
 81033e0:	e00d      	b.n	81033fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81033e2:	4b26      	ldr	r3, [pc, #152]	; (810347c <prvAddNewTaskToReadyList+0xcc>)
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d109      	bne.n	81033fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81033ea:	4b23      	ldr	r3, [pc, #140]	; (8103478 <prvAddNewTaskToReadyList+0xc8>)
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81033f4:	429a      	cmp	r2, r3
 81033f6:	d802      	bhi.n	81033fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81033f8:	4a1f      	ldr	r2, [pc, #124]	; (8103478 <prvAddNewTaskToReadyList+0xc8>)
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81033fe:	4b20      	ldr	r3, [pc, #128]	; (8103480 <prvAddNewTaskToReadyList+0xd0>)
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	3301      	adds	r3, #1
 8103404:	4a1e      	ldr	r2, [pc, #120]	; (8103480 <prvAddNewTaskToReadyList+0xd0>)
 8103406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103408:	4b1d      	ldr	r3, [pc, #116]	; (8103480 <prvAddNewTaskToReadyList+0xd0>)
 810340a:	681a      	ldr	r2, [r3, #0]
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103414:	4b1b      	ldr	r3, [pc, #108]	; (8103484 <prvAddNewTaskToReadyList+0xd4>)
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	429a      	cmp	r2, r3
 810341a:	d903      	bls.n	8103424 <prvAddNewTaskToReadyList+0x74>
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103420:	4a18      	ldr	r2, [pc, #96]	; (8103484 <prvAddNewTaskToReadyList+0xd4>)
 8103422:	6013      	str	r3, [r2, #0]
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103428:	4613      	mov	r3, r2
 810342a:	009b      	lsls	r3, r3, #2
 810342c:	4413      	add	r3, r2
 810342e:	009b      	lsls	r3, r3, #2
 8103430:	4a15      	ldr	r2, [pc, #84]	; (8103488 <prvAddNewTaskToReadyList+0xd8>)
 8103432:	441a      	add	r2, r3
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	3304      	adds	r3, #4
 8103438:	4619      	mov	r1, r3
 810343a:	4610      	mov	r0, r2
 810343c:	f7fe fe31 	bl	81020a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8103440:	f7ff f80a 	bl	8102458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103444:	4b0d      	ldr	r3, [pc, #52]	; (810347c <prvAddNewTaskToReadyList+0xcc>)
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	2b00      	cmp	r3, #0
 810344a:	d00e      	beq.n	810346a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810344c:	4b0a      	ldr	r3, [pc, #40]	; (8103478 <prvAddNewTaskToReadyList+0xc8>)
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103456:	429a      	cmp	r2, r3
 8103458:	d207      	bcs.n	810346a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810345a:	4b0c      	ldr	r3, [pc, #48]	; (810348c <prvAddNewTaskToReadyList+0xdc>)
 810345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103460:	601a      	str	r2, [r3, #0]
 8103462:	f3bf 8f4f 	dsb	sy
 8103466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810346a:	bf00      	nop
 810346c:	3708      	adds	r7, #8
 810346e:	46bd      	mov	sp, r7
 8103470:	bd80      	pop	{r7, pc}
 8103472:	bf00      	nop
 8103474:	100047e4 	.word	0x100047e4
 8103478:	10004310 	.word	0x10004310
 810347c:	100047f0 	.word	0x100047f0
 8103480:	10004800 	.word	0x10004800
 8103484:	100047ec 	.word	0x100047ec
 8103488:	10004314 	.word	0x10004314
 810348c:	e000ed04 	.word	0xe000ed04

08103490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8103490:	b580      	push	{r7, lr}
 8103492:	b084      	sub	sp, #16
 8103494:	af00      	add	r7, sp, #0
 8103496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8103498:	2300      	movs	r3, #0
 810349a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d016      	beq.n	81034d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81034a2:	4b13      	ldr	r3, [pc, #76]	; (81034f0 <vTaskDelay+0x60>)
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d009      	beq.n	81034be <vTaskDelay+0x2e>
 81034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81034ae:	f383 8811 	msr	BASEPRI, r3
 81034b2:	f3bf 8f6f 	isb	sy
 81034b6:	f3bf 8f4f 	dsb	sy
 81034ba:	60bb      	str	r3, [r7, #8]
 81034bc:	e7fe      	b.n	81034bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 81034be:	f000 f87f 	bl	81035c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81034c2:	2100      	movs	r1, #0
 81034c4:	6878      	ldr	r0, [r7, #4]
 81034c6:	f000 fcd7 	bl	8103e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81034ca:	f000 f887 	bl	81035dc <xTaskResumeAll>
 81034ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81034d0:	68fb      	ldr	r3, [r7, #12]
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d107      	bne.n	81034e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 81034d6:	4b07      	ldr	r3, [pc, #28]	; (81034f4 <vTaskDelay+0x64>)
 81034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81034dc:	601a      	str	r2, [r3, #0]
 81034de:	f3bf 8f4f 	dsb	sy
 81034e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81034e6:	bf00      	nop
 81034e8:	3710      	adds	r7, #16
 81034ea:	46bd      	mov	sp, r7
 81034ec:	bd80      	pop	{r7, pc}
 81034ee:	bf00      	nop
 81034f0:	1000480c 	.word	0x1000480c
 81034f4:	e000ed04 	.word	0xe000ed04

081034f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81034f8:	b580      	push	{r7, lr}
 81034fa:	b08a      	sub	sp, #40	; 0x28
 81034fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81034fe:	2300      	movs	r3, #0
 8103500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8103502:	2300      	movs	r3, #0
 8103504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8103506:	463a      	mov	r2, r7
 8103508:	1d39      	adds	r1, r7, #4
 810350a:	f107 0308 	add.w	r3, r7, #8
 810350e:	4618      	mov	r0, r3
 8103510:	f7fe fb90 	bl	8101c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8103514:	6839      	ldr	r1, [r7, #0]
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	68ba      	ldr	r2, [r7, #8]
 810351a:	9202      	str	r2, [sp, #8]
 810351c:	9301      	str	r3, [sp, #4]
 810351e:	2300      	movs	r3, #0
 8103520:	9300      	str	r3, [sp, #0]
 8103522:	2300      	movs	r3, #0
 8103524:	460a      	mov	r2, r1
 8103526:	4920      	ldr	r1, [pc, #128]	; (81035a8 <vTaskStartScheduler+0xb0>)
 8103528:	4820      	ldr	r0, [pc, #128]	; (81035ac <vTaskStartScheduler+0xb4>)
 810352a:	f7ff fe13 	bl	8103154 <xTaskCreateStatic>
 810352e:	4602      	mov	r2, r0
 8103530:	4b1f      	ldr	r3, [pc, #124]	; (81035b0 <vTaskStartScheduler+0xb8>)
 8103532:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8103534:	4b1e      	ldr	r3, [pc, #120]	; (81035b0 <vTaskStartScheduler+0xb8>)
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	2b00      	cmp	r3, #0
 810353a:	d002      	beq.n	8103542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810353c:	2301      	movs	r3, #1
 810353e:	617b      	str	r3, [r7, #20]
 8103540:	e001      	b.n	8103546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8103542:	2300      	movs	r3, #0
 8103544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8103546:	697b      	ldr	r3, [r7, #20]
 8103548:	2b01      	cmp	r3, #1
 810354a:	d102      	bne.n	8103552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810354c:	f000 fce8 	bl	8103f20 <xTimerCreateTimerTask>
 8103550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8103552:	697b      	ldr	r3, [r7, #20]
 8103554:	2b01      	cmp	r3, #1
 8103556:	d115      	bne.n	8103584 <vTaskStartScheduler+0x8c>
 8103558:	f04f 0350 	mov.w	r3, #80	; 0x50
 810355c:	f383 8811 	msr	BASEPRI, r3
 8103560:	f3bf 8f6f 	isb	sy
 8103564:	f3bf 8f4f 	dsb	sy
 8103568:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810356a:	4b12      	ldr	r3, [pc, #72]	; (81035b4 <vTaskStartScheduler+0xbc>)
 810356c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8103572:	4b11      	ldr	r3, [pc, #68]	; (81035b8 <vTaskStartScheduler+0xc0>)
 8103574:	2201      	movs	r2, #1
 8103576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8103578:	4b10      	ldr	r3, [pc, #64]	; (81035bc <vTaskStartScheduler+0xc4>)
 810357a:	2200      	movs	r2, #0
 810357c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810357e:	f7fe fe9f 	bl	81022c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8103582:	e00d      	b.n	81035a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8103584:	697b      	ldr	r3, [r7, #20]
 8103586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810358a:	d109      	bne.n	81035a0 <vTaskStartScheduler+0xa8>
 810358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103590:	f383 8811 	msr	BASEPRI, r3
 8103594:	f3bf 8f6f 	isb	sy
 8103598:	f3bf 8f4f 	dsb	sy
 810359c:	60fb      	str	r3, [r7, #12]
 810359e:	e7fe      	b.n	810359e <vTaskStartScheduler+0xa6>
}
 81035a0:	bf00      	nop
 81035a2:	3718      	adds	r7, #24
 81035a4:	46bd      	mov	sp, r7
 81035a6:	bd80      	pop	{r7, pc}
 81035a8:	08104658 	.word	0x08104658
 81035ac:	08103bc1 	.word	0x08103bc1
 81035b0:	10004808 	.word	0x10004808
 81035b4:	10004804 	.word	0x10004804
 81035b8:	100047f0 	.word	0x100047f0
 81035bc:	100047e8 	.word	0x100047e8

081035c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81035c0:	b480      	push	{r7}
 81035c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 81035c4:	4b04      	ldr	r3, [pc, #16]	; (81035d8 <vTaskSuspendAll+0x18>)
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	3301      	adds	r3, #1
 81035ca:	4a03      	ldr	r2, [pc, #12]	; (81035d8 <vTaskSuspendAll+0x18>)
 81035cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 81035ce:	bf00      	nop
 81035d0:	46bd      	mov	sp, r7
 81035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d6:	4770      	bx	lr
 81035d8:	1000480c 	.word	0x1000480c

081035dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81035dc:	b580      	push	{r7, lr}
 81035de:	b084      	sub	sp, #16
 81035e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81035e2:	2300      	movs	r3, #0
 81035e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81035e6:	2300      	movs	r3, #0
 81035e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81035ea:	4b41      	ldr	r3, [pc, #260]	; (81036f0 <xTaskResumeAll+0x114>)
 81035ec:	681b      	ldr	r3, [r3, #0]
 81035ee:	2b00      	cmp	r3, #0
 81035f0:	d109      	bne.n	8103606 <xTaskResumeAll+0x2a>
 81035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035f6:	f383 8811 	msr	BASEPRI, r3
 81035fa:	f3bf 8f6f 	isb	sy
 81035fe:	f3bf 8f4f 	dsb	sy
 8103602:	603b      	str	r3, [r7, #0]
 8103604:	e7fe      	b.n	8103604 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8103606:	f7fe fef9 	bl	81023fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810360a:	4b39      	ldr	r3, [pc, #228]	; (81036f0 <xTaskResumeAll+0x114>)
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	3b01      	subs	r3, #1
 8103610:	4a37      	ldr	r2, [pc, #220]	; (81036f0 <xTaskResumeAll+0x114>)
 8103612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103614:	4b36      	ldr	r3, [pc, #216]	; (81036f0 <xTaskResumeAll+0x114>)
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	2b00      	cmp	r3, #0
 810361a:	d162      	bne.n	81036e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810361c:	4b35      	ldr	r3, [pc, #212]	; (81036f4 <xTaskResumeAll+0x118>)
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	2b00      	cmp	r3, #0
 8103622:	d05e      	beq.n	81036e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103624:	e02f      	b.n	8103686 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103626:	4b34      	ldr	r3, [pc, #208]	; (81036f8 <xTaskResumeAll+0x11c>)
 8103628:	68db      	ldr	r3, [r3, #12]
 810362a:	68db      	ldr	r3, [r3, #12]
 810362c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810362e:	68fb      	ldr	r3, [r7, #12]
 8103630:	3318      	adds	r3, #24
 8103632:	4618      	mov	r0, r3
 8103634:	f7fe fd92 	bl	810215c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	3304      	adds	r3, #4
 810363c:	4618      	mov	r0, r3
 810363e:	f7fe fd8d 	bl	810215c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8103642:	68fb      	ldr	r3, [r7, #12]
 8103644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103646:	4b2d      	ldr	r3, [pc, #180]	; (81036fc <xTaskResumeAll+0x120>)
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	429a      	cmp	r2, r3
 810364c:	d903      	bls.n	8103656 <xTaskResumeAll+0x7a>
 810364e:	68fb      	ldr	r3, [r7, #12]
 8103650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103652:	4a2a      	ldr	r2, [pc, #168]	; (81036fc <xTaskResumeAll+0x120>)
 8103654:	6013      	str	r3, [r2, #0]
 8103656:	68fb      	ldr	r3, [r7, #12]
 8103658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810365a:	4613      	mov	r3, r2
 810365c:	009b      	lsls	r3, r3, #2
 810365e:	4413      	add	r3, r2
 8103660:	009b      	lsls	r3, r3, #2
 8103662:	4a27      	ldr	r2, [pc, #156]	; (8103700 <xTaskResumeAll+0x124>)
 8103664:	441a      	add	r2, r3
 8103666:	68fb      	ldr	r3, [r7, #12]
 8103668:	3304      	adds	r3, #4
 810366a:	4619      	mov	r1, r3
 810366c:	4610      	mov	r0, r2
 810366e:	f7fe fd18 	bl	81020a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103672:	68fb      	ldr	r3, [r7, #12]
 8103674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103676:	4b23      	ldr	r3, [pc, #140]	; (8103704 <xTaskResumeAll+0x128>)
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810367c:	429a      	cmp	r2, r3
 810367e:	d302      	bcc.n	8103686 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8103680:	4b21      	ldr	r3, [pc, #132]	; (8103708 <xTaskResumeAll+0x12c>)
 8103682:	2201      	movs	r2, #1
 8103684:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103686:	4b1c      	ldr	r3, [pc, #112]	; (81036f8 <xTaskResumeAll+0x11c>)
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	2b00      	cmp	r3, #0
 810368c:	d1cb      	bne.n	8103626 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810368e:	68fb      	ldr	r3, [r7, #12]
 8103690:	2b00      	cmp	r3, #0
 8103692:	d001      	beq.n	8103698 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8103694:	f000 fb46 	bl	8103d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8103698:	4b1c      	ldr	r3, [pc, #112]	; (810370c <xTaskResumeAll+0x130>)
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	2b00      	cmp	r3, #0
 81036a2:	d010      	beq.n	81036c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81036a4:	f000 f846 	bl	8103734 <xTaskIncrementTick>
 81036a8:	4603      	mov	r3, r0
 81036aa:	2b00      	cmp	r3, #0
 81036ac:	d002      	beq.n	81036b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 81036ae:	4b16      	ldr	r3, [pc, #88]	; (8103708 <xTaskResumeAll+0x12c>)
 81036b0:	2201      	movs	r2, #1
 81036b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	3b01      	subs	r3, #1
 81036b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d1f1      	bne.n	81036a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 81036c0:	4b12      	ldr	r3, [pc, #72]	; (810370c <xTaskResumeAll+0x130>)
 81036c2:	2200      	movs	r2, #0
 81036c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81036c6:	4b10      	ldr	r3, [pc, #64]	; (8103708 <xTaskResumeAll+0x12c>)
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d009      	beq.n	81036e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81036ce:	2301      	movs	r3, #1
 81036d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81036d2:	4b0f      	ldr	r3, [pc, #60]	; (8103710 <xTaskResumeAll+0x134>)
 81036d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81036d8:	601a      	str	r2, [r3, #0]
 81036da:	f3bf 8f4f 	dsb	sy
 81036de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81036e2:	f7fe feb9 	bl	8102458 <vPortExitCritical>

	return xAlreadyYielded;
 81036e6:	68bb      	ldr	r3, [r7, #8]
}
 81036e8:	4618      	mov	r0, r3
 81036ea:	3710      	adds	r7, #16
 81036ec:	46bd      	mov	sp, r7
 81036ee:	bd80      	pop	{r7, pc}
 81036f0:	1000480c 	.word	0x1000480c
 81036f4:	100047e4 	.word	0x100047e4
 81036f8:	100047a4 	.word	0x100047a4
 81036fc:	100047ec 	.word	0x100047ec
 8103700:	10004314 	.word	0x10004314
 8103704:	10004310 	.word	0x10004310
 8103708:	100047f8 	.word	0x100047f8
 810370c:	100047f4 	.word	0x100047f4
 8103710:	e000ed04 	.word	0xe000ed04

08103714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103714:	b480      	push	{r7}
 8103716:	b083      	sub	sp, #12
 8103718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810371a:	4b05      	ldr	r3, [pc, #20]	; (8103730 <xTaskGetTickCount+0x1c>)
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8103720:	687b      	ldr	r3, [r7, #4]
}
 8103722:	4618      	mov	r0, r3
 8103724:	370c      	adds	r7, #12
 8103726:	46bd      	mov	sp, r7
 8103728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810372c:	4770      	bx	lr
 810372e:	bf00      	nop
 8103730:	100047e8 	.word	0x100047e8

08103734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103734:	b580      	push	{r7, lr}
 8103736:	b086      	sub	sp, #24
 8103738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810373a:	2300      	movs	r3, #0
 810373c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810373e:	4b4e      	ldr	r3, [pc, #312]	; (8103878 <xTaskIncrementTick+0x144>)
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	2b00      	cmp	r3, #0
 8103744:	f040 8088 	bne.w	8103858 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103748:	4b4c      	ldr	r3, [pc, #304]	; (810387c <xTaskIncrementTick+0x148>)
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	3301      	adds	r3, #1
 810374e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8103750:	4a4a      	ldr	r2, [pc, #296]	; (810387c <xTaskIncrementTick+0x148>)
 8103752:	693b      	ldr	r3, [r7, #16]
 8103754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8103756:	693b      	ldr	r3, [r7, #16]
 8103758:	2b00      	cmp	r3, #0
 810375a:	d11f      	bne.n	810379c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810375c:	4b48      	ldr	r3, [pc, #288]	; (8103880 <xTaskIncrementTick+0x14c>)
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	2b00      	cmp	r3, #0
 8103764:	d009      	beq.n	810377a <xTaskIncrementTick+0x46>
 8103766:	f04f 0350 	mov.w	r3, #80	; 0x50
 810376a:	f383 8811 	msr	BASEPRI, r3
 810376e:	f3bf 8f6f 	isb	sy
 8103772:	f3bf 8f4f 	dsb	sy
 8103776:	603b      	str	r3, [r7, #0]
 8103778:	e7fe      	b.n	8103778 <xTaskIncrementTick+0x44>
 810377a:	4b41      	ldr	r3, [pc, #260]	; (8103880 <xTaskIncrementTick+0x14c>)
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	60fb      	str	r3, [r7, #12]
 8103780:	4b40      	ldr	r3, [pc, #256]	; (8103884 <xTaskIncrementTick+0x150>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	4a3e      	ldr	r2, [pc, #248]	; (8103880 <xTaskIncrementTick+0x14c>)
 8103786:	6013      	str	r3, [r2, #0]
 8103788:	4a3e      	ldr	r2, [pc, #248]	; (8103884 <xTaskIncrementTick+0x150>)
 810378a:	68fb      	ldr	r3, [r7, #12]
 810378c:	6013      	str	r3, [r2, #0]
 810378e:	4b3e      	ldr	r3, [pc, #248]	; (8103888 <xTaskIncrementTick+0x154>)
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	3301      	adds	r3, #1
 8103794:	4a3c      	ldr	r2, [pc, #240]	; (8103888 <xTaskIncrementTick+0x154>)
 8103796:	6013      	str	r3, [r2, #0]
 8103798:	f000 fac4 	bl	8103d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810379c:	4b3b      	ldr	r3, [pc, #236]	; (810388c <xTaskIncrementTick+0x158>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	693a      	ldr	r2, [r7, #16]
 81037a2:	429a      	cmp	r2, r3
 81037a4:	d349      	bcc.n	810383a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81037a6:	4b36      	ldr	r3, [pc, #216]	; (8103880 <xTaskIncrementTick+0x14c>)
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d104      	bne.n	81037ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81037b0:	4b36      	ldr	r3, [pc, #216]	; (810388c <xTaskIncrementTick+0x158>)
 81037b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81037b6:	601a      	str	r2, [r3, #0]
					break;
 81037b8:	e03f      	b.n	810383a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81037ba:	4b31      	ldr	r3, [pc, #196]	; (8103880 <xTaskIncrementTick+0x14c>)
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	68db      	ldr	r3, [r3, #12]
 81037c0:	68db      	ldr	r3, [r3, #12]
 81037c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81037c4:	68bb      	ldr	r3, [r7, #8]
 81037c6:	685b      	ldr	r3, [r3, #4]
 81037c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81037ca:	693a      	ldr	r2, [r7, #16]
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	429a      	cmp	r2, r3
 81037d0:	d203      	bcs.n	81037da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81037d2:	4a2e      	ldr	r2, [pc, #184]	; (810388c <xTaskIncrementTick+0x158>)
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81037d8:	e02f      	b.n	810383a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81037da:	68bb      	ldr	r3, [r7, #8]
 81037dc:	3304      	adds	r3, #4
 81037de:	4618      	mov	r0, r3
 81037e0:	f7fe fcbc 	bl	810215c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81037e4:	68bb      	ldr	r3, [r7, #8]
 81037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d004      	beq.n	81037f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81037ec:	68bb      	ldr	r3, [r7, #8]
 81037ee:	3318      	adds	r3, #24
 81037f0:	4618      	mov	r0, r3
 81037f2:	f7fe fcb3 	bl	810215c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81037f6:	68bb      	ldr	r3, [r7, #8]
 81037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81037fa:	4b25      	ldr	r3, [pc, #148]	; (8103890 <xTaskIncrementTick+0x15c>)
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	429a      	cmp	r2, r3
 8103800:	d903      	bls.n	810380a <xTaskIncrementTick+0xd6>
 8103802:	68bb      	ldr	r3, [r7, #8]
 8103804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103806:	4a22      	ldr	r2, [pc, #136]	; (8103890 <xTaskIncrementTick+0x15c>)
 8103808:	6013      	str	r3, [r2, #0]
 810380a:	68bb      	ldr	r3, [r7, #8]
 810380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810380e:	4613      	mov	r3, r2
 8103810:	009b      	lsls	r3, r3, #2
 8103812:	4413      	add	r3, r2
 8103814:	009b      	lsls	r3, r3, #2
 8103816:	4a1f      	ldr	r2, [pc, #124]	; (8103894 <xTaskIncrementTick+0x160>)
 8103818:	441a      	add	r2, r3
 810381a:	68bb      	ldr	r3, [r7, #8]
 810381c:	3304      	adds	r3, #4
 810381e:	4619      	mov	r1, r3
 8103820:	4610      	mov	r0, r2
 8103822:	f7fe fc3e 	bl	81020a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103826:	68bb      	ldr	r3, [r7, #8]
 8103828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810382a:	4b1b      	ldr	r3, [pc, #108]	; (8103898 <xTaskIncrementTick+0x164>)
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103830:	429a      	cmp	r2, r3
 8103832:	d3b8      	bcc.n	81037a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8103834:	2301      	movs	r3, #1
 8103836:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103838:	e7b5      	b.n	81037a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810383a:	4b17      	ldr	r3, [pc, #92]	; (8103898 <xTaskIncrementTick+0x164>)
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103840:	4914      	ldr	r1, [pc, #80]	; (8103894 <xTaskIncrementTick+0x160>)
 8103842:	4613      	mov	r3, r2
 8103844:	009b      	lsls	r3, r3, #2
 8103846:	4413      	add	r3, r2
 8103848:	009b      	lsls	r3, r3, #2
 810384a:	440b      	add	r3, r1
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	2b01      	cmp	r3, #1
 8103850:	d907      	bls.n	8103862 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8103852:	2301      	movs	r3, #1
 8103854:	617b      	str	r3, [r7, #20]
 8103856:	e004      	b.n	8103862 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8103858:	4b10      	ldr	r3, [pc, #64]	; (810389c <xTaskIncrementTick+0x168>)
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	3301      	adds	r3, #1
 810385e:	4a0f      	ldr	r2, [pc, #60]	; (810389c <xTaskIncrementTick+0x168>)
 8103860:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8103862:	4b0f      	ldr	r3, [pc, #60]	; (81038a0 <xTaskIncrementTick+0x16c>)
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	2b00      	cmp	r3, #0
 8103868:	d001      	beq.n	810386e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810386a:	2301      	movs	r3, #1
 810386c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810386e:	697b      	ldr	r3, [r7, #20]
}
 8103870:	4618      	mov	r0, r3
 8103872:	3718      	adds	r7, #24
 8103874:	46bd      	mov	sp, r7
 8103876:	bd80      	pop	{r7, pc}
 8103878:	1000480c 	.word	0x1000480c
 810387c:	100047e8 	.word	0x100047e8
 8103880:	1000479c 	.word	0x1000479c
 8103884:	100047a0 	.word	0x100047a0
 8103888:	100047fc 	.word	0x100047fc
 810388c:	10004804 	.word	0x10004804
 8103890:	100047ec 	.word	0x100047ec
 8103894:	10004314 	.word	0x10004314
 8103898:	10004310 	.word	0x10004310
 810389c:	100047f4 	.word	0x100047f4
 81038a0:	100047f8 	.word	0x100047f8

081038a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81038a4:	b480      	push	{r7}
 81038a6:	b085      	sub	sp, #20
 81038a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81038aa:	4b27      	ldr	r3, [pc, #156]	; (8103948 <vTaskSwitchContext+0xa4>)
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	2b00      	cmp	r3, #0
 81038b0:	d003      	beq.n	81038ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81038b2:	4b26      	ldr	r3, [pc, #152]	; (810394c <vTaskSwitchContext+0xa8>)
 81038b4:	2201      	movs	r2, #1
 81038b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81038b8:	e040      	b.n	810393c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 81038ba:	4b24      	ldr	r3, [pc, #144]	; (810394c <vTaskSwitchContext+0xa8>)
 81038bc:	2200      	movs	r2, #0
 81038be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81038c0:	4b23      	ldr	r3, [pc, #140]	; (8103950 <vTaskSwitchContext+0xac>)
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	60fb      	str	r3, [r7, #12]
 81038c6:	e00f      	b.n	81038e8 <vTaskSwitchContext+0x44>
 81038c8:	68fb      	ldr	r3, [r7, #12]
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d109      	bne.n	81038e2 <vTaskSwitchContext+0x3e>
 81038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81038d2:	f383 8811 	msr	BASEPRI, r3
 81038d6:	f3bf 8f6f 	isb	sy
 81038da:	f3bf 8f4f 	dsb	sy
 81038de:	607b      	str	r3, [r7, #4]
 81038e0:	e7fe      	b.n	81038e0 <vTaskSwitchContext+0x3c>
 81038e2:	68fb      	ldr	r3, [r7, #12]
 81038e4:	3b01      	subs	r3, #1
 81038e6:	60fb      	str	r3, [r7, #12]
 81038e8:	491a      	ldr	r1, [pc, #104]	; (8103954 <vTaskSwitchContext+0xb0>)
 81038ea:	68fa      	ldr	r2, [r7, #12]
 81038ec:	4613      	mov	r3, r2
 81038ee:	009b      	lsls	r3, r3, #2
 81038f0:	4413      	add	r3, r2
 81038f2:	009b      	lsls	r3, r3, #2
 81038f4:	440b      	add	r3, r1
 81038f6:	681b      	ldr	r3, [r3, #0]
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d0e5      	beq.n	81038c8 <vTaskSwitchContext+0x24>
 81038fc:	68fa      	ldr	r2, [r7, #12]
 81038fe:	4613      	mov	r3, r2
 8103900:	009b      	lsls	r3, r3, #2
 8103902:	4413      	add	r3, r2
 8103904:	009b      	lsls	r3, r3, #2
 8103906:	4a13      	ldr	r2, [pc, #76]	; (8103954 <vTaskSwitchContext+0xb0>)
 8103908:	4413      	add	r3, r2
 810390a:	60bb      	str	r3, [r7, #8]
 810390c:	68bb      	ldr	r3, [r7, #8]
 810390e:	685b      	ldr	r3, [r3, #4]
 8103910:	685a      	ldr	r2, [r3, #4]
 8103912:	68bb      	ldr	r3, [r7, #8]
 8103914:	605a      	str	r2, [r3, #4]
 8103916:	68bb      	ldr	r3, [r7, #8]
 8103918:	685a      	ldr	r2, [r3, #4]
 810391a:	68bb      	ldr	r3, [r7, #8]
 810391c:	3308      	adds	r3, #8
 810391e:	429a      	cmp	r2, r3
 8103920:	d104      	bne.n	810392c <vTaskSwitchContext+0x88>
 8103922:	68bb      	ldr	r3, [r7, #8]
 8103924:	685b      	ldr	r3, [r3, #4]
 8103926:	685a      	ldr	r2, [r3, #4]
 8103928:	68bb      	ldr	r3, [r7, #8]
 810392a:	605a      	str	r2, [r3, #4]
 810392c:	68bb      	ldr	r3, [r7, #8]
 810392e:	685b      	ldr	r3, [r3, #4]
 8103930:	68db      	ldr	r3, [r3, #12]
 8103932:	4a09      	ldr	r2, [pc, #36]	; (8103958 <vTaskSwitchContext+0xb4>)
 8103934:	6013      	str	r3, [r2, #0]
 8103936:	4a06      	ldr	r2, [pc, #24]	; (8103950 <vTaskSwitchContext+0xac>)
 8103938:	68fb      	ldr	r3, [r7, #12]
 810393a:	6013      	str	r3, [r2, #0]
}
 810393c:	bf00      	nop
 810393e:	3714      	adds	r7, #20
 8103940:	46bd      	mov	sp, r7
 8103942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103946:	4770      	bx	lr
 8103948:	1000480c 	.word	0x1000480c
 810394c:	100047f8 	.word	0x100047f8
 8103950:	100047ec 	.word	0x100047ec
 8103954:	10004314 	.word	0x10004314
 8103958:	10004310 	.word	0x10004310

0810395c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810395c:	b580      	push	{r7, lr}
 810395e:	b084      	sub	sp, #16
 8103960:	af00      	add	r7, sp, #0
 8103962:	6078      	str	r0, [r7, #4]
 8103964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	2b00      	cmp	r3, #0
 810396a:	d109      	bne.n	8103980 <vTaskPlaceOnEventList+0x24>
 810396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103970:	f383 8811 	msr	BASEPRI, r3
 8103974:	f3bf 8f6f 	isb	sy
 8103978:	f3bf 8f4f 	dsb	sy
 810397c:	60fb      	str	r3, [r7, #12]
 810397e:	e7fe      	b.n	810397e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8103980:	4b07      	ldr	r3, [pc, #28]	; (81039a0 <vTaskPlaceOnEventList+0x44>)
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	3318      	adds	r3, #24
 8103986:	4619      	mov	r1, r3
 8103988:	6878      	ldr	r0, [r7, #4]
 810398a:	f7fe fbae 	bl	81020ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810398e:	2101      	movs	r1, #1
 8103990:	6838      	ldr	r0, [r7, #0]
 8103992:	f000 fa71 	bl	8103e78 <prvAddCurrentTaskToDelayedList>
}
 8103996:	bf00      	nop
 8103998:	3710      	adds	r7, #16
 810399a:	46bd      	mov	sp, r7
 810399c:	bd80      	pop	{r7, pc}
 810399e:	bf00      	nop
 81039a0:	10004310 	.word	0x10004310

081039a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81039a4:	b580      	push	{r7, lr}
 81039a6:	b086      	sub	sp, #24
 81039a8:	af00      	add	r7, sp, #0
 81039aa:	60f8      	str	r0, [r7, #12]
 81039ac:	60b9      	str	r1, [r7, #8]
 81039ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d109      	bne.n	81039ca <vTaskPlaceOnEventListRestricted+0x26>
 81039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039ba:	f383 8811 	msr	BASEPRI, r3
 81039be:	f3bf 8f6f 	isb	sy
 81039c2:	f3bf 8f4f 	dsb	sy
 81039c6:	617b      	str	r3, [r7, #20]
 81039c8:	e7fe      	b.n	81039c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81039ca:	4b0a      	ldr	r3, [pc, #40]	; (81039f4 <vTaskPlaceOnEventListRestricted+0x50>)
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	3318      	adds	r3, #24
 81039d0:	4619      	mov	r1, r3
 81039d2:	68f8      	ldr	r0, [r7, #12]
 81039d4:	f7fe fb65 	bl	81020a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	2b00      	cmp	r3, #0
 81039dc:	d002      	beq.n	81039e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 81039de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81039e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 81039e4:	6879      	ldr	r1, [r7, #4]
 81039e6:	68b8      	ldr	r0, [r7, #8]
 81039e8:	f000 fa46 	bl	8103e78 <prvAddCurrentTaskToDelayedList>
	}
 81039ec:	bf00      	nop
 81039ee:	3718      	adds	r7, #24
 81039f0:	46bd      	mov	sp, r7
 81039f2:	bd80      	pop	{r7, pc}
 81039f4:	10004310 	.word	0x10004310

081039f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81039f8:	b580      	push	{r7, lr}
 81039fa:	b086      	sub	sp, #24
 81039fc:	af00      	add	r7, sp, #0
 81039fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	68db      	ldr	r3, [r3, #12]
 8103a04:	68db      	ldr	r3, [r3, #12]
 8103a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8103a08:	693b      	ldr	r3, [r7, #16]
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	d109      	bne.n	8103a22 <xTaskRemoveFromEventList+0x2a>
 8103a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a12:	f383 8811 	msr	BASEPRI, r3
 8103a16:	f3bf 8f6f 	isb	sy
 8103a1a:	f3bf 8f4f 	dsb	sy
 8103a1e:	60fb      	str	r3, [r7, #12]
 8103a20:	e7fe      	b.n	8103a20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103a22:	693b      	ldr	r3, [r7, #16]
 8103a24:	3318      	adds	r3, #24
 8103a26:	4618      	mov	r0, r3
 8103a28:	f7fe fb98 	bl	810215c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103a2c:	4b1d      	ldr	r3, [pc, #116]	; (8103aa4 <xTaskRemoveFromEventList+0xac>)
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d11d      	bne.n	8103a70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8103a34:	693b      	ldr	r3, [r7, #16]
 8103a36:	3304      	adds	r3, #4
 8103a38:	4618      	mov	r0, r3
 8103a3a:	f7fe fb8f 	bl	810215c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8103a3e:	693b      	ldr	r3, [r7, #16]
 8103a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103a42:	4b19      	ldr	r3, [pc, #100]	; (8103aa8 <xTaskRemoveFromEventList+0xb0>)
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	429a      	cmp	r2, r3
 8103a48:	d903      	bls.n	8103a52 <xTaskRemoveFromEventList+0x5a>
 8103a4a:	693b      	ldr	r3, [r7, #16]
 8103a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a4e:	4a16      	ldr	r2, [pc, #88]	; (8103aa8 <xTaskRemoveFromEventList+0xb0>)
 8103a50:	6013      	str	r3, [r2, #0]
 8103a52:	693b      	ldr	r3, [r7, #16]
 8103a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103a56:	4613      	mov	r3, r2
 8103a58:	009b      	lsls	r3, r3, #2
 8103a5a:	4413      	add	r3, r2
 8103a5c:	009b      	lsls	r3, r3, #2
 8103a5e:	4a13      	ldr	r2, [pc, #76]	; (8103aac <xTaskRemoveFromEventList+0xb4>)
 8103a60:	441a      	add	r2, r3
 8103a62:	693b      	ldr	r3, [r7, #16]
 8103a64:	3304      	adds	r3, #4
 8103a66:	4619      	mov	r1, r3
 8103a68:	4610      	mov	r0, r2
 8103a6a:	f7fe fb1a 	bl	81020a2 <vListInsertEnd>
 8103a6e:	e005      	b.n	8103a7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8103a70:	693b      	ldr	r3, [r7, #16]
 8103a72:	3318      	adds	r3, #24
 8103a74:	4619      	mov	r1, r3
 8103a76:	480e      	ldr	r0, [pc, #56]	; (8103ab0 <xTaskRemoveFromEventList+0xb8>)
 8103a78:	f7fe fb13 	bl	81020a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8103a7c:	693b      	ldr	r3, [r7, #16]
 8103a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103a80:	4b0c      	ldr	r3, [pc, #48]	; (8103ab4 <xTaskRemoveFromEventList+0xbc>)
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a86:	429a      	cmp	r2, r3
 8103a88:	d905      	bls.n	8103a96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8103a8a:	2301      	movs	r3, #1
 8103a8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8103a8e:	4b0a      	ldr	r3, [pc, #40]	; (8103ab8 <xTaskRemoveFromEventList+0xc0>)
 8103a90:	2201      	movs	r2, #1
 8103a92:	601a      	str	r2, [r3, #0]
 8103a94:	e001      	b.n	8103a9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8103a96:	2300      	movs	r3, #0
 8103a98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8103a9a:	697b      	ldr	r3, [r7, #20]
}
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	3718      	adds	r7, #24
 8103aa0:	46bd      	mov	sp, r7
 8103aa2:	bd80      	pop	{r7, pc}
 8103aa4:	1000480c 	.word	0x1000480c
 8103aa8:	100047ec 	.word	0x100047ec
 8103aac:	10004314 	.word	0x10004314
 8103ab0:	100047a4 	.word	0x100047a4
 8103ab4:	10004310 	.word	0x10004310
 8103ab8:	100047f8 	.word	0x100047f8

08103abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8103abc:	b480      	push	{r7}
 8103abe:	b083      	sub	sp, #12
 8103ac0:	af00      	add	r7, sp, #0
 8103ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8103ac4:	4b06      	ldr	r3, [pc, #24]	; (8103ae0 <vTaskInternalSetTimeOutState+0x24>)
 8103ac6:	681a      	ldr	r2, [r3, #0]
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8103acc:	4b05      	ldr	r3, [pc, #20]	; (8103ae4 <vTaskInternalSetTimeOutState+0x28>)
 8103ace:	681a      	ldr	r2, [r3, #0]
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	605a      	str	r2, [r3, #4]
}
 8103ad4:	bf00      	nop
 8103ad6:	370c      	adds	r7, #12
 8103ad8:	46bd      	mov	sp, r7
 8103ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ade:	4770      	bx	lr
 8103ae0:	100047fc 	.word	0x100047fc
 8103ae4:	100047e8 	.word	0x100047e8

08103ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103ae8:	b580      	push	{r7, lr}
 8103aea:	b088      	sub	sp, #32
 8103aec:	af00      	add	r7, sp, #0
 8103aee:	6078      	str	r0, [r7, #4]
 8103af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d109      	bne.n	8103b0c <xTaskCheckForTimeOut+0x24>
 8103af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103afc:	f383 8811 	msr	BASEPRI, r3
 8103b00:	f3bf 8f6f 	isb	sy
 8103b04:	f3bf 8f4f 	dsb	sy
 8103b08:	613b      	str	r3, [r7, #16]
 8103b0a:	e7fe      	b.n	8103b0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8103b0c:	683b      	ldr	r3, [r7, #0]
 8103b0e:	2b00      	cmp	r3, #0
 8103b10:	d109      	bne.n	8103b26 <xTaskCheckForTimeOut+0x3e>
 8103b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b16:	f383 8811 	msr	BASEPRI, r3
 8103b1a:	f3bf 8f6f 	isb	sy
 8103b1e:	f3bf 8f4f 	dsb	sy
 8103b22:	60fb      	str	r3, [r7, #12]
 8103b24:	e7fe      	b.n	8103b24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8103b26:	f7fe fc69 	bl	81023fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103b2a:	4b1d      	ldr	r3, [pc, #116]	; (8103ba0 <xTaskCheckForTimeOut+0xb8>)
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	685b      	ldr	r3, [r3, #4]
 8103b34:	69ba      	ldr	r2, [r7, #24]
 8103b36:	1ad3      	subs	r3, r2, r3
 8103b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103b3a:	683b      	ldr	r3, [r7, #0]
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103b42:	d102      	bne.n	8103b4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8103b44:	2300      	movs	r3, #0
 8103b46:	61fb      	str	r3, [r7, #28]
 8103b48:	e023      	b.n	8103b92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681a      	ldr	r2, [r3, #0]
 8103b4e:	4b15      	ldr	r3, [pc, #84]	; (8103ba4 <xTaskCheckForTimeOut+0xbc>)
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	429a      	cmp	r2, r3
 8103b54:	d007      	beq.n	8103b66 <xTaskCheckForTimeOut+0x7e>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	685b      	ldr	r3, [r3, #4]
 8103b5a:	69ba      	ldr	r2, [r7, #24]
 8103b5c:	429a      	cmp	r2, r3
 8103b5e:	d302      	bcc.n	8103b66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8103b60:	2301      	movs	r3, #1
 8103b62:	61fb      	str	r3, [r7, #28]
 8103b64:	e015      	b.n	8103b92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8103b66:	683b      	ldr	r3, [r7, #0]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	697a      	ldr	r2, [r7, #20]
 8103b6c:	429a      	cmp	r2, r3
 8103b6e:	d20b      	bcs.n	8103b88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8103b70:	683b      	ldr	r3, [r7, #0]
 8103b72:	681a      	ldr	r2, [r3, #0]
 8103b74:	697b      	ldr	r3, [r7, #20]
 8103b76:	1ad2      	subs	r2, r2, r3
 8103b78:	683b      	ldr	r3, [r7, #0]
 8103b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8103b7c:	6878      	ldr	r0, [r7, #4]
 8103b7e:	f7ff ff9d 	bl	8103abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8103b82:	2300      	movs	r3, #0
 8103b84:	61fb      	str	r3, [r7, #28]
 8103b86:	e004      	b.n	8103b92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8103b88:	683b      	ldr	r3, [r7, #0]
 8103b8a:	2200      	movs	r2, #0
 8103b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8103b8e:	2301      	movs	r3, #1
 8103b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8103b92:	f7fe fc61 	bl	8102458 <vPortExitCritical>

	return xReturn;
 8103b96:	69fb      	ldr	r3, [r7, #28]
}
 8103b98:	4618      	mov	r0, r3
 8103b9a:	3720      	adds	r7, #32
 8103b9c:	46bd      	mov	sp, r7
 8103b9e:	bd80      	pop	{r7, pc}
 8103ba0:	100047e8 	.word	0x100047e8
 8103ba4:	100047fc 	.word	0x100047fc

08103ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8103ba8:	b480      	push	{r7}
 8103baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8103bac:	4b03      	ldr	r3, [pc, #12]	; (8103bbc <vTaskMissedYield+0x14>)
 8103bae:	2201      	movs	r2, #1
 8103bb0:	601a      	str	r2, [r3, #0]
}
 8103bb2:	bf00      	nop
 8103bb4:	46bd      	mov	sp, r7
 8103bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bba:	4770      	bx	lr
 8103bbc:	100047f8 	.word	0x100047f8

08103bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8103bc0:	b580      	push	{r7, lr}
 8103bc2:	b082      	sub	sp, #8
 8103bc4:	af00      	add	r7, sp, #0
 8103bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103bc8:	f000 f852 	bl	8103c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103bcc:	4b06      	ldr	r3, [pc, #24]	; (8103be8 <prvIdleTask+0x28>)
 8103bce:	681b      	ldr	r3, [r3, #0]
 8103bd0:	2b01      	cmp	r3, #1
 8103bd2:	d9f9      	bls.n	8103bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8103bd4:	4b05      	ldr	r3, [pc, #20]	; (8103bec <prvIdleTask+0x2c>)
 8103bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103bda:	601a      	str	r2, [r3, #0]
 8103bdc:	f3bf 8f4f 	dsb	sy
 8103be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8103be4:	e7f0      	b.n	8103bc8 <prvIdleTask+0x8>
 8103be6:	bf00      	nop
 8103be8:	10004314 	.word	0x10004314
 8103bec:	e000ed04 	.word	0xe000ed04

08103bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8103bf0:	b580      	push	{r7, lr}
 8103bf2:	b082      	sub	sp, #8
 8103bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103bf6:	2300      	movs	r3, #0
 8103bf8:	607b      	str	r3, [r7, #4]
 8103bfa:	e00c      	b.n	8103c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103bfc:	687a      	ldr	r2, [r7, #4]
 8103bfe:	4613      	mov	r3, r2
 8103c00:	009b      	lsls	r3, r3, #2
 8103c02:	4413      	add	r3, r2
 8103c04:	009b      	lsls	r3, r3, #2
 8103c06:	4a12      	ldr	r2, [pc, #72]	; (8103c50 <prvInitialiseTaskLists+0x60>)
 8103c08:	4413      	add	r3, r2
 8103c0a:	4618      	mov	r0, r3
 8103c0c:	f7fe fa1c 	bl	8102048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	3301      	adds	r3, #1
 8103c14:	607b      	str	r3, [r7, #4]
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	2b37      	cmp	r3, #55	; 0x37
 8103c1a:	d9ef      	bls.n	8103bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103c1c:	480d      	ldr	r0, [pc, #52]	; (8103c54 <prvInitialiseTaskLists+0x64>)
 8103c1e:	f7fe fa13 	bl	8102048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8103c22:	480d      	ldr	r0, [pc, #52]	; (8103c58 <prvInitialiseTaskLists+0x68>)
 8103c24:	f7fe fa10 	bl	8102048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103c28:	480c      	ldr	r0, [pc, #48]	; (8103c5c <prvInitialiseTaskLists+0x6c>)
 8103c2a:	f7fe fa0d 	bl	8102048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8103c2e:	480c      	ldr	r0, [pc, #48]	; (8103c60 <prvInitialiseTaskLists+0x70>)
 8103c30:	f7fe fa0a 	bl	8102048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8103c34:	480b      	ldr	r0, [pc, #44]	; (8103c64 <prvInitialiseTaskLists+0x74>)
 8103c36:	f7fe fa07 	bl	8102048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103c3a:	4b0b      	ldr	r3, [pc, #44]	; (8103c68 <prvInitialiseTaskLists+0x78>)
 8103c3c:	4a05      	ldr	r2, [pc, #20]	; (8103c54 <prvInitialiseTaskLists+0x64>)
 8103c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8103c40:	4b0a      	ldr	r3, [pc, #40]	; (8103c6c <prvInitialiseTaskLists+0x7c>)
 8103c42:	4a05      	ldr	r2, [pc, #20]	; (8103c58 <prvInitialiseTaskLists+0x68>)
 8103c44:	601a      	str	r2, [r3, #0]
}
 8103c46:	bf00      	nop
 8103c48:	3708      	adds	r7, #8
 8103c4a:	46bd      	mov	sp, r7
 8103c4c:	bd80      	pop	{r7, pc}
 8103c4e:	bf00      	nop
 8103c50:	10004314 	.word	0x10004314
 8103c54:	10004774 	.word	0x10004774
 8103c58:	10004788 	.word	0x10004788
 8103c5c:	100047a4 	.word	0x100047a4
 8103c60:	100047b8 	.word	0x100047b8
 8103c64:	100047d0 	.word	0x100047d0
 8103c68:	1000479c 	.word	0x1000479c
 8103c6c:	100047a0 	.word	0x100047a0

08103c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8103c70:	b580      	push	{r7, lr}
 8103c72:	b082      	sub	sp, #8
 8103c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103c76:	e019      	b.n	8103cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8103c78:	f7fe fbc0 	bl	81023fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103c7c:	4b0f      	ldr	r3, [pc, #60]	; (8103cbc <prvCheckTasksWaitingTermination+0x4c>)
 8103c7e:	68db      	ldr	r3, [r3, #12]
 8103c80:	68db      	ldr	r3, [r3, #12]
 8103c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	3304      	adds	r3, #4
 8103c88:	4618      	mov	r0, r3
 8103c8a:	f7fe fa67 	bl	810215c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8103c8e:	4b0c      	ldr	r3, [pc, #48]	; (8103cc0 <prvCheckTasksWaitingTermination+0x50>)
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	3b01      	subs	r3, #1
 8103c94:	4a0a      	ldr	r2, [pc, #40]	; (8103cc0 <prvCheckTasksWaitingTermination+0x50>)
 8103c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8103c98:	4b0a      	ldr	r3, [pc, #40]	; (8103cc4 <prvCheckTasksWaitingTermination+0x54>)
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	3b01      	subs	r3, #1
 8103c9e:	4a09      	ldr	r2, [pc, #36]	; (8103cc4 <prvCheckTasksWaitingTermination+0x54>)
 8103ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8103ca2:	f7fe fbd9 	bl	8102458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8103ca6:	6878      	ldr	r0, [r7, #4]
 8103ca8:	f000 f80e 	bl	8103cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103cac:	4b05      	ldr	r3, [pc, #20]	; (8103cc4 <prvCheckTasksWaitingTermination+0x54>)
 8103cae:	681b      	ldr	r3, [r3, #0]
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d1e1      	bne.n	8103c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8103cb4:	bf00      	nop
 8103cb6:	3708      	adds	r7, #8
 8103cb8:	46bd      	mov	sp, r7
 8103cba:	bd80      	pop	{r7, pc}
 8103cbc:	100047b8 	.word	0x100047b8
 8103cc0:	100047e4 	.word	0x100047e4
 8103cc4:	100047cc 	.word	0x100047cc

08103cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103cc8:	b580      	push	{r7, lr}
 8103cca:	b084      	sub	sp, #16
 8103ccc:	af00      	add	r7, sp, #0
 8103cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8103cd6:	2b00      	cmp	r3, #0
 8103cd8:	d108      	bne.n	8103cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103cde:	4618      	mov	r0, r3
 8103ce0:	f7fe f89e 	bl	8101e20 <vPortFree>
				vPortFree( pxTCB );
 8103ce4:	6878      	ldr	r0, [r7, #4]
 8103ce6:	f7fe f89b 	bl	8101e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103cea:	e017      	b.n	8103d1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8103cf2:	2b01      	cmp	r3, #1
 8103cf4:	d103      	bne.n	8103cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8103cf6:	6878      	ldr	r0, [r7, #4]
 8103cf8:	f7fe f892 	bl	8101e20 <vPortFree>
	}
 8103cfc:	e00e      	b.n	8103d1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8103d04:	2b02      	cmp	r3, #2
 8103d06:	d009      	beq.n	8103d1c <prvDeleteTCB+0x54>
 8103d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d0c:	f383 8811 	msr	BASEPRI, r3
 8103d10:	f3bf 8f6f 	isb	sy
 8103d14:	f3bf 8f4f 	dsb	sy
 8103d18:	60fb      	str	r3, [r7, #12]
 8103d1a:	e7fe      	b.n	8103d1a <prvDeleteTCB+0x52>
	}
 8103d1c:	bf00      	nop
 8103d1e:	3710      	adds	r7, #16
 8103d20:	46bd      	mov	sp, r7
 8103d22:	bd80      	pop	{r7, pc}

08103d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103d24:	b480      	push	{r7}
 8103d26:	b083      	sub	sp, #12
 8103d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103d2a:	4b0c      	ldr	r3, [pc, #48]	; (8103d5c <prvResetNextTaskUnblockTime+0x38>)
 8103d2c:	681b      	ldr	r3, [r3, #0]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d104      	bne.n	8103d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103d34:	4b0a      	ldr	r3, [pc, #40]	; (8103d60 <prvResetNextTaskUnblockTime+0x3c>)
 8103d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103d3c:	e008      	b.n	8103d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103d3e:	4b07      	ldr	r3, [pc, #28]	; (8103d5c <prvResetNextTaskUnblockTime+0x38>)
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	68db      	ldr	r3, [r3, #12]
 8103d44:	68db      	ldr	r3, [r3, #12]
 8103d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	685b      	ldr	r3, [r3, #4]
 8103d4c:	4a04      	ldr	r2, [pc, #16]	; (8103d60 <prvResetNextTaskUnblockTime+0x3c>)
 8103d4e:	6013      	str	r3, [r2, #0]
}
 8103d50:	bf00      	nop
 8103d52:	370c      	adds	r7, #12
 8103d54:	46bd      	mov	sp, r7
 8103d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d5a:	4770      	bx	lr
 8103d5c:	1000479c 	.word	0x1000479c
 8103d60:	10004804 	.word	0x10004804

08103d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8103d64:	b480      	push	{r7}
 8103d66:	b083      	sub	sp, #12
 8103d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8103d6a:	4b0b      	ldr	r3, [pc, #44]	; (8103d98 <xTaskGetSchedulerState+0x34>)
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	2b00      	cmp	r3, #0
 8103d70:	d102      	bne.n	8103d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8103d72:	2301      	movs	r3, #1
 8103d74:	607b      	str	r3, [r7, #4]
 8103d76:	e008      	b.n	8103d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103d78:	4b08      	ldr	r3, [pc, #32]	; (8103d9c <xTaskGetSchedulerState+0x38>)
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d102      	bne.n	8103d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8103d80:	2302      	movs	r3, #2
 8103d82:	607b      	str	r3, [r7, #4]
 8103d84:	e001      	b.n	8103d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8103d86:	2300      	movs	r3, #0
 8103d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8103d8a:	687b      	ldr	r3, [r7, #4]
	}
 8103d8c:	4618      	mov	r0, r3
 8103d8e:	370c      	adds	r7, #12
 8103d90:	46bd      	mov	sp, r7
 8103d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d96:	4770      	bx	lr
 8103d98:	100047f0 	.word	0x100047f0
 8103d9c:	1000480c 	.word	0x1000480c

08103da0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8103da0:	b580      	push	{r7, lr}
 8103da2:	b086      	sub	sp, #24
 8103da4:	af00      	add	r7, sp, #0
 8103da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103dac:	2300      	movs	r3, #0
 8103dae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	2b00      	cmp	r3, #0
 8103db4:	d054      	beq.n	8103e60 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103db6:	4b2d      	ldr	r3, [pc, #180]	; (8103e6c <xTaskPriorityDisinherit+0xcc>)
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	693a      	ldr	r2, [r7, #16]
 8103dbc:	429a      	cmp	r2, r3
 8103dbe:	d009      	beq.n	8103dd4 <xTaskPriorityDisinherit+0x34>
 8103dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103dc4:	f383 8811 	msr	BASEPRI, r3
 8103dc8:	f3bf 8f6f 	isb	sy
 8103dcc:	f3bf 8f4f 	dsb	sy
 8103dd0:	60fb      	str	r3, [r7, #12]
 8103dd2:	e7fe      	b.n	8103dd2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8103dd4:	693b      	ldr	r3, [r7, #16]
 8103dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	d109      	bne.n	8103df0 <xTaskPriorityDisinherit+0x50>
 8103ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103de0:	f383 8811 	msr	BASEPRI, r3
 8103de4:	f3bf 8f6f 	isb	sy
 8103de8:	f3bf 8f4f 	dsb	sy
 8103dec:	60bb      	str	r3, [r7, #8]
 8103dee:	e7fe      	b.n	8103dee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8103df0:	693b      	ldr	r3, [r7, #16]
 8103df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103df4:	1e5a      	subs	r2, r3, #1
 8103df6:	693b      	ldr	r3, [r7, #16]
 8103df8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8103dfa:	693b      	ldr	r3, [r7, #16]
 8103dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103dfe:	693b      	ldr	r3, [r7, #16]
 8103e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e02:	429a      	cmp	r2, r3
 8103e04:	d02c      	beq.n	8103e60 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103e06:	693b      	ldr	r3, [r7, #16]
 8103e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d128      	bne.n	8103e60 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103e0e:	693b      	ldr	r3, [r7, #16]
 8103e10:	3304      	adds	r3, #4
 8103e12:	4618      	mov	r0, r3
 8103e14:	f7fe f9a2 	bl	810215c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103e18:	693b      	ldr	r3, [r7, #16]
 8103e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103e1c:	693b      	ldr	r3, [r7, #16]
 8103e1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103e20:	693b      	ldr	r3, [r7, #16]
 8103e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103e28:	693b      	ldr	r3, [r7, #16]
 8103e2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103e2c:	693b      	ldr	r3, [r7, #16]
 8103e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103e30:	4b0f      	ldr	r3, [pc, #60]	; (8103e70 <xTaskPriorityDisinherit+0xd0>)
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	429a      	cmp	r2, r3
 8103e36:	d903      	bls.n	8103e40 <xTaskPriorityDisinherit+0xa0>
 8103e38:	693b      	ldr	r3, [r7, #16]
 8103e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e3c:	4a0c      	ldr	r2, [pc, #48]	; (8103e70 <xTaskPriorityDisinherit+0xd0>)
 8103e3e:	6013      	str	r3, [r2, #0]
 8103e40:	693b      	ldr	r3, [r7, #16]
 8103e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103e44:	4613      	mov	r3, r2
 8103e46:	009b      	lsls	r3, r3, #2
 8103e48:	4413      	add	r3, r2
 8103e4a:	009b      	lsls	r3, r3, #2
 8103e4c:	4a09      	ldr	r2, [pc, #36]	; (8103e74 <xTaskPriorityDisinherit+0xd4>)
 8103e4e:	441a      	add	r2, r3
 8103e50:	693b      	ldr	r3, [r7, #16]
 8103e52:	3304      	adds	r3, #4
 8103e54:	4619      	mov	r1, r3
 8103e56:	4610      	mov	r0, r2
 8103e58:	f7fe f923 	bl	81020a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8103e5c:	2301      	movs	r3, #1
 8103e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8103e60:	697b      	ldr	r3, [r7, #20]
	}
 8103e62:	4618      	mov	r0, r3
 8103e64:	3718      	adds	r7, #24
 8103e66:	46bd      	mov	sp, r7
 8103e68:	bd80      	pop	{r7, pc}
 8103e6a:	bf00      	nop
 8103e6c:	10004310 	.word	0x10004310
 8103e70:	100047ec 	.word	0x100047ec
 8103e74:	10004314 	.word	0x10004314

08103e78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8103e78:	b580      	push	{r7, lr}
 8103e7a:	b084      	sub	sp, #16
 8103e7c:	af00      	add	r7, sp, #0
 8103e7e:	6078      	str	r0, [r7, #4]
 8103e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8103e82:	4b21      	ldr	r3, [pc, #132]	; (8103f08 <prvAddCurrentTaskToDelayedList+0x90>)
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103e88:	4b20      	ldr	r3, [pc, #128]	; (8103f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	3304      	adds	r3, #4
 8103e8e:	4618      	mov	r0, r3
 8103e90:	f7fe f964 	bl	810215c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103e9a:	d10a      	bne.n	8103eb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8103e9c:	683b      	ldr	r3, [r7, #0]
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d007      	beq.n	8103eb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103ea2:	4b1a      	ldr	r3, [pc, #104]	; (8103f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	3304      	adds	r3, #4
 8103ea8:	4619      	mov	r1, r3
 8103eaa:	4819      	ldr	r0, [pc, #100]	; (8103f10 <prvAddCurrentTaskToDelayedList+0x98>)
 8103eac:	f7fe f8f9 	bl	81020a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103eb0:	e026      	b.n	8103f00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103eb2:	68fa      	ldr	r2, [r7, #12]
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	4413      	add	r3, r2
 8103eb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8103eba:	4b14      	ldr	r3, [pc, #80]	; (8103f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	68ba      	ldr	r2, [r7, #8]
 8103ec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8103ec2:	68ba      	ldr	r2, [r7, #8]
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	429a      	cmp	r2, r3
 8103ec8:	d209      	bcs.n	8103ede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103eca:	4b12      	ldr	r3, [pc, #72]	; (8103f14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8103ecc:	681a      	ldr	r2, [r3, #0]
 8103ece:	4b0f      	ldr	r3, [pc, #60]	; (8103f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	3304      	adds	r3, #4
 8103ed4:	4619      	mov	r1, r3
 8103ed6:	4610      	mov	r0, r2
 8103ed8:	f7fe f907 	bl	81020ea <vListInsert>
}
 8103edc:	e010      	b.n	8103f00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103ede:	4b0e      	ldr	r3, [pc, #56]	; (8103f18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8103ee0:	681a      	ldr	r2, [r3, #0]
 8103ee2:	4b0a      	ldr	r3, [pc, #40]	; (8103f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	3304      	adds	r3, #4
 8103ee8:	4619      	mov	r1, r3
 8103eea:	4610      	mov	r0, r2
 8103eec:	f7fe f8fd 	bl	81020ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103ef0:	4b0a      	ldr	r3, [pc, #40]	; (8103f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	68ba      	ldr	r2, [r7, #8]
 8103ef6:	429a      	cmp	r2, r3
 8103ef8:	d202      	bcs.n	8103f00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8103efa:	4a08      	ldr	r2, [pc, #32]	; (8103f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8103efc:	68bb      	ldr	r3, [r7, #8]
 8103efe:	6013      	str	r3, [r2, #0]
}
 8103f00:	bf00      	nop
 8103f02:	3710      	adds	r7, #16
 8103f04:	46bd      	mov	sp, r7
 8103f06:	bd80      	pop	{r7, pc}
 8103f08:	100047e8 	.word	0x100047e8
 8103f0c:	10004310 	.word	0x10004310
 8103f10:	100047d0 	.word	0x100047d0
 8103f14:	100047a0 	.word	0x100047a0
 8103f18:	1000479c 	.word	0x1000479c
 8103f1c:	10004804 	.word	0x10004804

08103f20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103f20:	b580      	push	{r7, lr}
 8103f22:	b08a      	sub	sp, #40	; 0x28
 8103f24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8103f26:	2300      	movs	r3, #0
 8103f28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8103f2a:	f000 faff 	bl	810452c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8103f2e:	4b1c      	ldr	r3, [pc, #112]	; (8103fa0 <xTimerCreateTimerTask+0x80>)
 8103f30:	681b      	ldr	r3, [r3, #0]
 8103f32:	2b00      	cmp	r3, #0
 8103f34:	d021      	beq.n	8103f7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8103f36:	2300      	movs	r3, #0
 8103f38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8103f3a:	2300      	movs	r3, #0
 8103f3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8103f3e:	1d3a      	adds	r2, r7, #4
 8103f40:	f107 0108 	add.w	r1, r7, #8
 8103f44:	f107 030c 	add.w	r3, r7, #12
 8103f48:	4618      	mov	r0, r3
 8103f4a:	f7fd fe8d 	bl	8101c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8103f4e:	6879      	ldr	r1, [r7, #4]
 8103f50:	68bb      	ldr	r3, [r7, #8]
 8103f52:	68fa      	ldr	r2, [r7, #12]
 8103f54:	9202      	str	r2, [sp, #8]
 8103f56:	9301      	str	r3, [sp, #4]
 8103f58:	2302      	movs	r3, #2
 8103f5a:	9300      	str	r3, [sp, #0]
 8103f5c:	2300      	movs	r3, #0
 8103f5e:	460a      	mov	r2, r1
 8103f60:	4910      	ldr	r1, [pc, #64]	; (8103fa4 <xTimerCreateTimerTask+0x84>)
 8103f62:	4811      	ldr	r0, [pc, #68]	; (8103fa8 <xTimerCreateTimerTask+0x88>)
 8103f64:	f7ff f8f6 	bl	8103154 <xTaskCreateStatic>
 8103f68:	4602      	mov	r2, r0
 8103f6a:	4b10      	ldr	r3, [pc, #64]	; (8103fac <xTimerCreateTimerTask+0x8c>)
 8103f6c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8103f6e:	4b0f      	ldr	r3, [pc, #60]	; (8103fac <xTimerCreateTimerTask+0x8c>)
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	2b00      	cmp	r3, #0
 8103f74:	d001      	beq.n	8103f7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8103f76:	2301      	movs	r3, #1
 8103f78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8103f7a:	697b      	ldr	r3, [r7, #20]
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d109      	bne.n	8103f94 <xTimerCreateTimerTask+0x74>
 8103f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f84:	f383 8811 	msr	BASEPRI, r3
 8103f88:	f3bf 8f6f 	isb	sy
 8103f8c:	f3bf 8f4f 	dsb	sy
 8103f90:	613b      	str	r3, [r7, #16]
 8103f92:	e7fe      	b.n	8103f92 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8103f94:	697b      	ldr	r3, [r7, #20]
}
 8103f96:	4618      	mov	r0, r3
 8103f98:	3718      	adds	r7, #24
 8103f9a:	46bd      	mov	sp, r7
 8103f9c:	bd80      	pop	{r7, pc}
 8103f9e:	bf00      	nop
 8103fa0:	10004840 	.word	0x10004840
 8103fa4:	08104660 	.word	0x08104660
 8103fa8:	081040e1 	.word	0x081040e1
 8103fac:	10004844 	.word	0x10004844

08103fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8103fb0:	b580      	push	{r7, lr}
 8103fb2:	b08a      	sub	sp, #40	; 0x28
 8103fb4:	af00      	add	r7, sp, #0
 8103fb6:	60f8      	str	r0, [r7, #12]
 8103fb8:	60b9      	str	r1, [r7, #8]
 8103fba:	607a      	str	r2, [r7, #4]
 8103fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8103fbe:	2300      	movs	r3, #0
 8103fc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	d109      	bne.n	8103fdc <xTimerGenericCommand+0x2c>
 8103fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103fcc:	f383 8811 	msr	BASEPRI, r3
 8103fd0:	f3bf 8f6f 	isb	sy
 8103fd4:	f3bf 8f4f 	dsb	sy
 8103fd8:	623b      	str	r3, [r7, #32]
 8103fda:	e7fe      	b.n	8103fda <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8103fdc:	4b19      	ldr	r3, [pc, #100]	; (8104044 <xTimerGenericCommand+0x94>)
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d02a      	beq.n	810403a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103fe4:	68bb      	ldr	r3, [r7, #8]
 8103fe6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8103ff0:	68bb      	ldr	r3, [r7, #8]
 8103ff2:	2b05      	cmp	r3, #5
 8103ff4:	dc18      	bgt.n	8104028 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103ff6:	f7ff feb5 	bl	8103d64 <xTaskGetSchedulerState>
 8103ffa:	4603      	mov	r3, r0
 8103ffc:	2b02      	cmp	r3, #2
 8103ffe:	d109      	bne.n	8104014 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8104000:	4b10      	ldr	r3, [pc, #64]	; (8104044 <xTimerGenericCommand+0x94>)
 8104002:	6818      	ldr	r0, [r3, #0]
 8104004:	f107 0110 	add.w	r1, r7, #16
 8104008:	2300      	movs	r3, #0
 810400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810400c:	f7fe fc4e 	bl	81028ac <xQueueGenericSend>
 8104010:	6278      	str	r0, [r7, #36]	; 0x24
 8104012:	e012      	b.n	810403a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8104014:	4b0b      	ldr	r3, [pc, #44]	; (8104044 <xTimerGenericCommand+0x94>)
 8104016:	6818      	ldr	r0, [r3, #0]
 8104018:	f107 0110 	add.w	r1, r7, #16
 810401c:	2300      	movs	r3, #0
 810401e:	2200      	movs	r2, #0
 8104020:	f7fe fc44 	bl	81028ac <xQueueGenericSend>
 8104024:	6278      	str	r0, [r7, #36]	; 0x24
 8104026:	e008      	b.n	810403a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8104028:	4b06      	ldr	r3, [pc, #24]	; (8104044 <xTimerGenericCommand+0x94>)
 810402a:	6818      	ldr	r0, [r3, #0]
 810402c:	f107 0110 	add.w	r1, r7, #16
 8104030:	2300      	movs	r3, #0
 8104032:	683a      	ldr	r2, [r7, #0]
 8104034:	f7fe fd34 	bl	8102aa0 <xQueueGenericSendFromISR>
 8104038:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810403c:	4618      	mov	r0, r3
 810403e:	3728      	adds	r7, #40	; 0x28
 8104040:	46bd      	mov	sp, r7
 8104042:	bd80      	pop	{r7, pc}
 8104044:	10004840 	.word	0x10004840

08104048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8104048:	b580      	push	{r7, lr}
 810404a:	b088      	sub	sp, #32
 810404c:	af02      	add	r7, sp, #8
 810404e:	6078      	str	r0, [r7, #4]
 8104050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104052:	4b22      	ldr	r3, [pc, #136]	; (81040dc <prvProcessExpiredTimer+0x94>)
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	68db      	ldr	r3, [r3, #12]
 8104058:	68db      	ldr	r3, [r3, #12]
 810405a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810405c:	697b      	ldr	r3, [r7, #20]
 810405e:	3304      	adds	r3, #4
 8104060:	4618      	mov	r0, r3
 8104062:	f7fe f87b 	bl	810215c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8104066:	697b      	ldr	r3, [r7, #20]
 8104068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810406c:	f003 0304 	and.w	r3, r3, #4
 8104070:	2b00      	cmp	r3, #0
 8104072:	d021      	beq.n	81040b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8104074:	697b      	ldr	r3, [r7, #20]
 8104076:	699a      	ldr	r2, [r3, #24]
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	18d1      	adds	r1, r2, r3
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	683a      	ldr	r2, [r7, #0]
 8104080:	6978      	ldr	r0, [r7, #20]
 8104082:	f000 f8d1 	bl	8104228 <prvInsertTimerInActiveList>
 8104086:	4603      	mov	r3, r0
 8104088:	2b00      	cmp	r3, #0
 810408a:	d01e      	beq.n	81040ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810408c:	2300      	movs	r3, #0
 810408e:	9300      	str	r3, [sp, #0]
 8104090:	2300      	movs	r3, #0
 8104092:	687a      	ldr	r2, [r7, #4]
 8104094:	2100      	movs	r1, #0
 8104096:	6978      	ldr	r0, [r7, #20]
 8104098:	f7ff ff8a 	bl	8103fb0 <xTimerGenericCommand>
 810409c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810409e:	693b      	ldr	r3, [r7, #16]
 81040a0:	2b00      	cmp	r3, #0
 81040a2:	d112      	bne.n	81040ca <prvProcessExpiredTimer+0x82>
 81040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81040a8:	f383 8811 	msr	BASEPRI, r3
 81040ac:	f3bf 8f6f 	isb	sy
 81040b0:	f3bf 8f4f 	dsb	sy
 81040b4:	60fb      	str	r3, [r7, #12]
 81040b6:	e7fe      	b.n	81040b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81040b8:	697b      	ldr	r3, [r7, #20]
 81040ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81040be:	f023 0301 	bic.w	r3, r3, #1
 81040c2:	b2da      	uxtb	r2, r3
 81040c4:	697b      	ldr	r3, [r7, #20]
 81040c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81040ca:	697b      	ldr	r3, [r7, #20]
 81040cc:	6a1b      	ldr	r3, [r3, #32]
 81040ce:	6978      	ldr	r0, [r7, #20]
 81040d0:	4798      	blx	r3
}
 81040d2:	bf00      	nop
 81040d4:	3718      	adds	r7, #24
 81040d6:	46bd      	mov	sp, r7
 81040d8:	bd80      	pop	{r7, pc}
 81040da:	bf00      	nop
 81040dc:	10004838 	.word	0x10004838

081040e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81040e0:	b580      	push	{r7, lr}
 81040e2:	b084      	sub	sp, #16
 81040e4:	af00      	add	r7, sp, #0
 81040e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81040e8:	f107 0308 	add.w	r3, r7, #8
 81040ec:	4618      	mov	r0, r3
 81040ee:	f000 f857 	bl	81041a0 <prvGetNextExpireTime>
 81040f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81040f4:	68bb      	ldr	r3, [r7, #8]
 81040f6:	4619      	mov	r1, r3
 81040f8:	68f8      	ldr	r0, [r7, #12]
 81040fa:	f000 f803 	bl	8104104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81040fe:	f000 f8d5 	bl	81042ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8104102:	e7f1      	b.n	81040e8 <prvTimerTask+0x8>

08104104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8104104:	b580      	push	{r7, lr}
 8104106:	b084      	sub	sp, #16
 8104108:	af00      	add	r7, sp, #0
 810410a:	6078      	str	r0, [r7, #4]
 810410c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810410e:	f7ff fa57 	bl	81035c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8104112:	f107 0308 	add.w	r3, r7, #8
 8104116:	4618      	mov	r0, r3
 8104118:	f000 f866 	bl	81041e8 <prvSampleTimeNow>
 810411c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810411e:	68bb      	ldr	r3, [r7, #8]
 8104120:	2b00      	cmp	r3, #0
 8104122:	d130      	bne.n	8104186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8104124:	683b      	ldr	r3, [r7, #0]
 8104126:	2b00      	cmp	r3, #0
 8104128:	d10a      	bne.n	8104140 <prvProcessTimerOrBlockTask+0x3c>
 810412a:	687a      	ldr	r2, [r7, #4]
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	429a      	cmp	r2, r3
 8104130:	d806      	bhi.n	8104140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8104132:	f7ff fa53 	bl	81035dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8104136:	68f9      	ldr	r1, [r7, #12]
 8104138:	6878      	ldr	r0, [r7, #4]
 810413a:	f7ff ff85 	bl	8104048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810413e:	e024      	b.n	810418a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8104140:	683b      	ldr	r3, [r7, #0]
 8104142:	2b00      	cmp	r3, #0
 8104144:	d008      	beq.n	8104158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8104146:	4b13      	ldr	r3, [pc, #76]	; (8104194 <prvProcessTimerOrBlockTask+0x90>)
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	2b00      	cmp	r3, #0
 810414e:	d101      	bne.n	8104154 <prvProcessTimerOrBlockTask+0x50>
 8104150:	2301      	movs	r3, #1
 8104152:	e000      	b.n	8104156 <prvProcessTimerOrBlockTask+0x52>
 8104154:	2300      	movs	r3, #0
 8104156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8104158:	4b0f      	ldr	r3, [pc, #60]	; (8104198 <prvProcessTimerOrBlockTask+0x94>)
 810415a:	6818      	ldr	r0, [r3, #0]
 810415c:	687a      	ldr	r2, [r7, #4]
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	1ad3      	subs	r3, r2, r3
 8104162:	683a      	ldr	r2, [r7, #0]
 8104164:	4619      	mov	r1, r3
 8104166:	f7fe ffc1 	bl	81030ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810416a:	f7ff fa37 	bl	81035dc <xTaskResumeAll>
 810416e:	4603      	mov	r3, r0
 8104170:	2b00      	cmp	r3, #0
 8104172:	d10a      	bne.n	810418a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8104174:	4b09      	ldr	r3, [pc, #36]	; (810419c <prvProcessTimerOrBlockTask+0x98>)
 8104176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810417a:	601a      	str	r2, [r3, #0]
 810417c:	f3bf 8f4f 	dsb	sy
 8104180:	f3bf 8f6f 	isb	sy
}
 8104184:	e001      	b.n	810418a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8104186:	f7ff fa29 	bl	81035dc <xTaskResumeAll>
}
 810418a:	bf00      	nop
 810418c:	3710      	adds	r7, #16
 810418e:	46bd      	mov	sp, r7
 8104190:	bd80      	pop	{r7, pc}
 8104192:	bf00      	nop
 8104194:	1000483c 	.word	0x1000483c
 8104198:	10004840 	.word	0x10004840
 810419c:	e000ed04 	.word	0xe000ed04

081041a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81041a0:	b480      	push	{r7}
 81041a2:	b085      	sub	sp, #20
 81041a4:	af00      	add	r7, sp, #0
 81041a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81041a8:	4b0e      	ldr	r3, [pc, #56]	; (81041e4 <prvGetNextExpireTime+0x44>)
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	2b00      	cmp	r3, #0
 81041b0:	d101      	bne.n	81041b6 <prvGetNextExpireTime+0x16>
 81041b2:	2201      	movs	r2, #1
 81041b4:	e000      	b.n	81041b8 <prvGetNextExpireTime+0x18>
 81041b6:	2200      	movs	r2, #0
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	d105      	bne.n	81041d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81041c4:	4b07      	ldr	r3, [pc, #28]	; (81041e4 <prvGetNextExpireTime+0x44>)
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	68db      	ldr	r3, [r3, #12]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	60fb      	str	r3, [r7, #12]
 81041ce:	e001      	b.n	81041d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81041d0:	2300      	movs	r3, #0
 81041d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81041d4:	68fb      	ldr	r3, [r7, #12]
}
 81041d6:	4618      	mov	r0, r3
 81041d8:	3714      	adds	r7, #20
 81041da:	46bd      	mov	sp, r7
 81041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041e0:	4770      	bx	lr
 81041e2:	bf00      	nop
 81041e4:	10004838 	.word	0x10004838

081041e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81041e8:	b580      	push	{r7, lr}
 81041ea:	b084      	sub	sp, #16
 81041ec:	af00      	add	r7, sp, #0
 81041ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81041f0:	f7ff fa90 	bl	8103714 <xTaskGetTickCount>
 81041f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81041f6:	4b0b      	ldr	r3, [pc, #44]	; (8104224 <prvSampleTimeNow+0x3c>)
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	68fa      	ldr	r2, [r7, #12]
 81041fc:	429a      	cmp	r2, r3
 81041fe:	d205      	bcs.n	810420c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8104200:	f000 f930 	bl	8104464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	2201      	movs	r2, #1
 8104208:	601a      	str	r2, [r3, #0]
 810420a:	e002      	b.n	8104212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	2200      	movs	r2, #0
 8104210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8104212:	4a04      	ldr	r2, [pc, #16]	; (8104224 <prvSampleTimeNow+0x3c>)
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8104218:	68fb      	ldr	r3, [r7, #12]
}
 810421a:	4618      	mov	r0, r3
 810421c:	3710      	adds	r7, #16
 810421e:	46bd      	mov	sp, r7
 8104220:	bd80      	pop	{r7, pc}
 8104222:	bf00      	nop
 8104224:	10004848 	.word	0x10004848

08104228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8104228:	b580      	push	{r7, lr}
 810422a:	b086      	sub	sp, #24
 810422c:	af00      	add	r7, sp, #0
 810422e:	60f8      	str	r0, [r7, #12]
 8104230:	60b9      	str	r1, [r7, #8]
 8104232:	607a      	str	r2, [r7, #4]
 8104234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8104236:	2300      	movs	r3, #0
 8104238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	68ba      	ldr	r2, [r7, #8]
 810423e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104240:	68fb      	ldr	r3, [r7, #12]
 8104242:	68fa      	ldr	r2, [r7, #12]
 8104244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8104246:	68ba      	ldr	r2, [r7, #8]
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	429a      	cmp	r2, r3
 810424c:	d812      	bhi.n	8104274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810424e:	687a      	ldr	r2, [r7, #4]
 8104250:	683b      	ldr	r3, [r7, #0]
 8104252:	1ad2      	subs	r2, r2, r3
 8104254:	68fb      	ldr	r3, [r7, #12]
 8104256:	699b      	ldr	r3, [r3, #24]
 8104258:	429a      	cmp	r2, r3
 810425a:	d302      	bcc.n	8104262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810425c:	2301      	movs	r3, #1
 810425e:	617b      	str	r3, [r7, #20]
 8104260:	e01b      	b.n	810429a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8104262:	4b10      	ldr	r3, [pc, #64]	; (81042a4 <prvInsertTimerInActiveList+0x7c>)
 8104264:	681a      	ldr	r2, [r3, #0]
 8104266:	68fb      	ldr	r3, [r7, #12]
 8104268:	3304      	adds	r3, #4
 810426a:	4619      	mov	r1, r3
 810426c:	4610      	mov	r0, r2
 810426e:	f7fd ff3c 	bl	81020ea <vListInsert>
 8104272:	e012      	b.n	810429a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8104274:	687a      	ldr	r2, [r7, #4]
 8104276:	683b      	ldr	r3, [r7, #0]
 8104278:	429a      	cmp	r2, r3
 810427a:	d206      	bcs.n	810428a <prvInsertTimerInActiveList+0x62>
 810427c:	68ba      	ldr	r2, [r7, #8]
 810427e:	683b      	ldr	r3, [r7, #0]
 8104280:	429a      	cmp	r2, r3
 8104282:	d302      	bcc.n	810428a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8104284:	2301      	movs	r3, #1
 8104286:	617b      	str	r3, [r7, #20]
 8104288:	e007      	b.n	810429a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810428a:	4b07      	ldr	r3, [pc, #28]	; (81042a8 <prvInsertTimerInActiveList+0x80>)
 810428c:	681a      	ldr	r2, [r3, #0]
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	3304      	adds	r3, #4
 8104292:	4619      	mov	r1, r3
 8104294:	4610      	mov	r0, r2
 8104296:	f7fd ff28 	bl	81020ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 810429a:	697b      	ldr	r3, [r7, #20]
}
 810429c:	4618      	mov	r0, r3
 810429e:	3718      	adds	r7, #24
 81042a0:	46bd      	mov	sp, r7
 81042a2:	bd80      	pop	{r7, pc}
 81042a4:	1000483c 	.word	0x1000483c
 81042a8:	10004838 	.word	0x10004838

081042ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81042ac:	b580      	push	{r7, lr}
 81042ae:	b08e      	sub	sp, #56	; 0x38
 81042b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81042b2:	e0c6      	b.n	8104442 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	da17      	bge.n	81042ea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81042ba:	1d3b      	adds	r3, r7, #4
 81042bc:	3304      	adds	r3, #4
 81042be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81042c2:	2b00      	cmp	r3, #0
 81042c4:	d109      	bne.n	81042da <prvProcessReceivedCommands+0x2e>
 81042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81042ca:	f383 8811 	msr	BASEPRI, r3
 81042ce:	f3bf 8f6f 	isb	sy
 81042d2:	f3bf 8f4f 	dsb	sy
 81042d6:	61fb      	str	r3, [r7, #28]
 81042d8:	e7fe      	b.n	81042d8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81042e0:	6850      	ldr	r0, [r2, #4]
 81042e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81042e4:	6892      	ldr	r2, [r2, #8]
 81042e6:	4611      	mov	r1, r2
 81042e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	f2c0 80a7 	blt.w	8104440 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81042f8:	695b      	ldr	r3, [r3, #20]
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	d004      	beq.n	8104308 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104300:	3304      	adds	r3, #4
 8104302:	4618      	mov	r0, r3
 8104304:	f7fd ff2a 	bl	810215c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8104308:	463b      	mov	r3, r7
 810430a:	4618      	mov	r0, r3
 810430c:	f7ff ff6c 	bl	81041e8 <prvSampleTimeNow>
 8104310:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	2b09      	cmp	r3, #9
 8104316:	f200 8094 	bhi.w	8104442 <prvProcessReceivedCommands+0x196>
 810431a:	a201      	add	r2, pc, #4	; (adr r2, 8104320 <prvProcessReceivedCommands+0x74>)
 810431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104320:	08104349 	.word	0x08104349
 8104324:	08104349 	.word	0x08104349
 8104328:	08104349 	.word	0x08104349
 810432c:	081043bb 	.word	0x081043bb
 8104330:	081043cf 	.word	0x081043cf
 8104334:	08104417 	.word	0x08104417
 8104338:	08104349 	.word	0x08104349
 810433c:	08104349 	.word	0x08104349
 8104340:	081043bb 	.word	0x081043bb
 8104344:	081043cf 	.word	0x081043cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8104348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810434a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810434e:	f043 0301 	orr.w	r3, r3, #1
 8104352:	b2da      	uxtb	r2, r3
 8104354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810435a:	68ba      	ldr	r2, [r7, #8]
 810435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810435e:	699b      	ldr	r3, [r3, #24]
 8104360:	18d1      	adds	r1, r2, r3
 8104362:	68bb      	ldr	r3, [r7, #8]
 8104364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104368:	f7ff ff5e 	bl	8104228 <prvInsertTimerInActiveList>
 810436c:	4603      	mov	r3, r0
 810436e:	2b00      	cmp	r3, #0
 8104370:	d067      	beq.n	8104442 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8104372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104374:	6a1b      	ldr	r3, [r3, #32]
 8104376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810437c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104380:	f003 0304 	and.w	r3, r3, #4
 8104384:	2b00      	cmp	r3, #0
 8104386:	d05c      	beq.n	8104442 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8104388:	68ba      	ldr	r2, [r7, #8]
 810438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810438c:	699b      	ldr	r3, [r3, #24]
 810438e:	441a      	add	r2, r3
 8104390:	2300      	movs	r3, #0
 8104392:	9300      	str	r3, [sp, #0]
 8104394:	2300      	movs	r3, #0
 8104396:	2100      	movs	r1, #0
 8104398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810439a:	f7ff fe09 	bl	8103fb0 <xTimerGenericCommand>
 810439e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81043a0:	6a3b      	ldr	r3, [r7, #32]
 81043a2:	2b00      	cmp	r3, #0
 81043a4:	d14d      	bne.n	8104442 <prvProcessReceivedCommands+0x196>
 81043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81043aa:	f383 8811 	msr	BASEPRI, r3
 81043ae:	f3bf 8f6f 	isb	sy
 81043b2:	f3bf 8f4f 	dsb	sy
 81043b6:	61bb      	str	r3, [r7, #24]
 81043b8:	e7fe      	b.n	81043b8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81043c0:	f023 0301 	bic.w	r3, r3, #1
 81043c4:	b2da      	uxtb	r2, r3
 81043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 81043cc:	e039      	b.n	8104442 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81043d4:	f043 0301 	orr.w	r3, r3, #1
 81043d8:	b2da      	uxtb	r2, r3
 81043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81043e0:	68ba      	ldr	r2, [r7, #8]
 81043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043e8:	699b      	ldr	r3, [r3, #24]
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d109      	bne.n	8104402 <prvProcessReceivedCommands+0x156>
 81043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81043f2:	f383 8811 	msr	BASEPRI, r3
 81043f6:	f3bf 8f6f 	isb	sy
 81043fa:	f3bf 8f4f 	dsb	sy
 81043fe:	617b      	str	r3, [r7, #20]
 8104400:	e7fe      	b.n	8104400 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8104402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104404:	699a      	ldr	r2, [r3, #24]
 8104406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104408:	18d1      	adds	r1, r2, r3
 810440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810440e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104410:	f7ff ff0a 	bl	8104228 <prvInsertTimerInActiveList>
					break;
 8104414:	e015      	b.n	8104442 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8104416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810441c:	f003 0302 	and.w	r3, r3, #2
 8104420:	2b00      	cmp	r3, #0
 8104422:	d103      	bne.n	810442c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8104424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104426:	f7fd fcfb 	bl	8101e20 <vPortFree>
 810442a:	e00a      	b.n	8104442 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810442e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104432:	f023 0301 	bic.w	r3, r3, #1
 8104436:	b2da      	uxtb	r2, r3
 8104438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810443a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810443e:	e000      	b.n	8104442 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8104440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8104442:	4b07      	ldr	r3, [pc, #28]	; (8104460 <prvProcessReceivedCommands+0x1b4>)
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	1d39      	adds	r1, r7, #4
 8104448:	2200      	movs	r2, #0
 810444a:	4618      	mov	r0, r3
 810444c:	f7fe fbbc 	bl	8102bc8 <xQueueReceive>
 8104450:	4603      	mov	r3, r0
 8104452:	2b00      	cmp	r3, #0
 8104454:	f47f af2e 	bne.w	81042b4 <prvProcessReceivedCommands+0x8>
	}
}
 8104458:	bf00      	nop
 810445a:	3730      	adds	r7, #48	; 0x30
 810445c:	46bd      	mov	sp, r7
 810445e:	bd80      	pop	{r7, pc}
 8104460:	10004840 	.word	0x10004840

08104464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8104464:	b580      	push	{r7, lr}
 8104466:	b088      	sub	sp, #32
 8104468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810446a:	e047      	b.n	81044fc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810446c:	4b2d      	ldr	r3, [pc, #180]	; (8104524 <prvSwitchTimerLists+0xc0>)
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	68db      	ldr	r3, [r3, #12]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104476:	4b2b      	ldr	r3, [pc, #172]	; (8104524 <prvSwitchTimerLists+0xc0>)
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	68db      	ldr	r3, [r3, #12]
 810447c:	68db      	ldr	r3, [r3, #12]
 810447e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8104480:	68fb      	ldr	r3, [r7, #12]
 8104482:	3304      	adds	r3, #4
 8104484:	4618      	mov	r0, r3
 8104486:	f7fd fe69 	bl	810215c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810448a:	68fb      	ldr	r3, [r7, #12]
 810448c:	6a1b      	ldr	r3, [r3, #32]
 810448e:	68f8      	ldr	r0, [r7, #12]
 8104490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104498:	f003 0304 	and.w	r3, r3, #4
 810449c:	2b00      	cmp	r3, #0
 810449e:	d02d      	beq.n	81044fc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	699b      	ldr	r3, [r3, #24]
 81044a4:	693a      	ldr	r2, [r7, #16]
 81044a6:	4413      	add	r3, r2
 81044a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81044aa:	68ba      	ldr	r2, [r7, #8]
 81044ac:	693b      	ldr	r3, [r7, #16]
 81044ae:	429a      	cmp	r2, r3
 81044b0:	d90e      	bls.n	81044d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81044b2:	68fb      	ldr	r3, [r7, #12]
 81044b4:	68ba      	ldr	r2, [r7, #8]
 81044b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81044b8:	68fb      	ldr	r3, [r7, #12]
 81044ba:	68fa      	ldr	r2, [r7, #12]
 81044bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81044be:	4b19      	ldr	r3, [pc, #100]	; (8104524 <prvSwitchTimerLists+0xc0>)
 81044c0:	681a      	ldr	r2, [r3, #0]
 81044c2:	68fb      	ldr	r3, [r7, #12]
 81044c4:	3304      	adds	r3, #4
 81044c6:	4619      	mov	r1, r3
 81044c8:	4610      	mov	r0, r2
 81044ca:	f7fd fe0e 	bl	81020ea <vListInsert>
 81044ce:	e015      	b.n	81044fc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81044d0:	2300      	movs	r3, #0
 81044d2:	9300      	str	r3, [sp, #0]
 81044d4:	2300      	movs	r3, #0
 81044d6:	693a      	ldr	r2, [r7, #16]
 81044d8:	2100      	movs	r1, #0
 81044da:	68f8      	ldr	r0, [r7, #12]
 81044dc:	f7ff fd68 	bl	8103fb0 <xTimerGenericCommand>
 81044e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	2b00      	cmp	r3, #0
 81044e6:	d109      	bne.n	81044fc <prvSwitchTimerLists+0x98>
 81044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81044ec:	f383 8811 	msr	BASEPRI, r3
 81044f0:	f3bf 8f6f 	isb	sy
 81044f4:	f3bf 8f4f 	dsb	sy
 81044f8:	603b      	str	r3, [r7, #0]
 81044fa:	e7fe      	b.n	81044fa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81044fc:	4b09      	ldr	r3, [pc, #36]	; (8104524 <prvSwitchTimerLists+0xc0>)
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	2b00      	cmp	r3, #0
 8104504:	d1b2      	bne.n	810446c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8104506:	4b07      	ldr	r3, [pc, #28]	; (8104524 <prvSwitchTimerLists+0xc0>)
 8104508:	681b      	ldr	r3, [r3, #0]
 810450a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810450c:	4b06      	ldr	r3, [pc, #24]	; (8104528 <prvSwitchTimerLists+0xc4>)
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a04      	ldr	r2, [pc, #16]	; (8104524 <prvSwitchTimerLists+0xc0>)
 8104512:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8104514:	4a04      	ldr	r2, [pc, #16]	; (8104528 <prvSwitchTimerLists+0xc4>)
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	6013      	str	r3, [r2, #0]
}
 810451a:	bf00      	nop
 810451c:	3718      	adds	r7, #24
 810451e:	46bd      	mov	sp, r7
 8104520:	bd80      	pop	{r7, pc}
 8104522:	bf00      	nop
 8104524:	10004838 	.word	0x10004838
 8104528:	1000483c 	.word	0x1000483c

0810452c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810452c:	b580      	push	{r7, lr}
 810452e:	b082      	sub	sp, #8
 8104530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8104532:	f7fd ff63 	bl	81023fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8104536:	4b15      	ldr	r3, [pc, #84]	; (810458c <prvCheckForValidListAndQueue+0x60>)
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	2b00      	cmp	r3, #0
 810453c:	d120      	bne.n	8104580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810453e:	4814      	ldr	r0, [pc, #80]	; (8104590 <prvCheckForValidListAndQueue+0x64>)
 8104540:	f7fd fd82 	bl	8102048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8104544:	4813      	ldr	r0, [pc, #76]	; (8104594 <prvCheckForValidListAndQueue+0x68>)
 8104546:	f7fd fd7f 	bl	8102048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810454a:	4b13      	ldr	r3, [pc, #76]	; (8104598 <prvCheckForValidListAndQueue+0x6c>)
 810454c:	4a10      	ldr	r2, [pc, #64]	; (8104590 <prvCheckForValidListAndQueue+0x64>)
 810454e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8104550:	4b12      	ldr	r3, [pc, #72]	; (810459c <prvCheckForValidListAndQueue+0x70>)
 8104552:	4a10      	ldr	r2, [pc, #64]	; (8104594 <prvCheckForValidListAndQueue+0x68>)
 8104554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8104556:	2300      	movs	r3, #0
 8104558:	9300      	str	r3, [sp, #0]
 810455a:	4b11      	ldr	r3, [pc, #68]	; (81045a0 <prvCheckForValidListAndQueue+0x74>)
 810455c:	4a11      	ldr	r2, [pc, #68]	; (81045a4 <prvCheckForValidListAndQueue+0x78>)
 810455e:	2110      	movs	r1, #16
 8104560:	200a      	movs	r0, #10
 8104562:	f7fe f8cd 	bl	8102700 <xQueueGenericCreateStatic>
 8104566:	4602      	mov	r2, r0
 8104568:	4b08      	ldr	r3, [pc, #32]	; (810458c <prvCheckForValidListAndQueue+0x60>)
 810456a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810456c:	4b07      	ldr	r3, [pc, #28]	; (810458c <prvCheckForValidListAndQueue+0x60>)
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	2b00      	cmp	r3, #0
 8104572:	d005      	beq.n	8104580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8104574:	4b05      	ldr	r3, [pc, #20]	; (810458c <prvCheckForValidListAndQueue+0x60>)
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	490b      	ldr	r1, [pc, #44]	; (81045a8 <prvCheckForValidListAndQueue+0x7c>)
 810457a:	4618      	mov	r0, r3
 810457c:	f7fe fd8e 	bl	810309c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8104580:	f7fd ff6a 	bl	8102458 <vPortExitCritical>
}
 8104584:	bf00      	nop
 8104586:	46bd      	mov	sp, r7
 8104588:	bd80      	pop	{r7, pc}
 810458a:	bf00      	nop
 810458c:	10004840 	.word	0x10004840
 8104590:	10004810 	.word	0x10004810
 8104594:	10004824 	.word	0x10004824
 8104598:	10004838 	.word	0x10004838
 810459c:	1000483c 	.word	0x1000483c
 81045a0:	100048ec 	.word	0x100048ec
 81045a4:	1000484c 	.word	0x1000484c
 81045a8:	08104668 	.word	0x08104668

081045ac <__libc_init_array>:
 81045ac:	b570      	push	{r4, r5, r6, lr}
 81045ae:	4e0d      	ldr	r6, [pc, #52]	; (81045e4 <__libc_init_array+0x38>)
 81045b0:	4c0d      	ldr	r4, [pc, #52]	; (81045e8 <__libc_init_array+0x3c>)
 81045b2:	1ba4      	subs	r4, r4, r6
 81045b4:	10a4      	asrs	r4, r4, #2
 81045b6:	2500      	movs	r5, #0
 81045b8:	42a5      	cmp	r5, r4
 81045ba:	d109      	bne.n	81045d0 <__libc_init_array+0x24>
 81045bc:	4e0b      	ldr	r6, [pc, #44]	; (81045ec <__libc_init_array+0x40>)
 81045be:	4c0c      	ldr	r4, [pc, #48]	; (81045f0 <__libc_init_array+0x44>)
 81045c0:	f000 f82c 	bl	810461c <_init>
 81045c4:	1ba4      	subs	r4, r4, r6
 81045c6:	10a4      	asrs	r4, r4, #2
 81045c8:	2500      	movs	r5, #0
 81045ca:	42a5      	cmp	r5, r4
 81045cc:	d105      	bne.n	81045da <__libc_init_array+0x2e>
 81045ce:	bd70      	pop	{r4, r5, r6, pc}
 81045d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81045d4:	4798      	blx	r3
 81045d6:	3501      	adds	r5, #1
 81045d8:	e7ee      	b.n	81045b8 <__libc_init_array+0xc>
 81045da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81045de:	4798      	blx	r3
 81045e0:	3501      	adds	r5, #1
 81045e2:	e7f2      	b.n	81045ca <__libc_init_array+0x1e>
 81045e4:	081046e0 	.word	0x081046e0
 81045e8:	081046e0 	.word	0x081046e0
 81045ec:	081046e0 	.word	0x081046e0
 81045f0:	081046e4 	.word	0x081046e4

081045f4 <memcpy>:
 81045f4:	b510      	push	{r4, lr}
 81045f6:	1e43      	subs	r3, r0, #1
 81045f8:	440a      	add	r2, r1
 81045fa:	4291      	cmp	r1, r2
 81045fc:	d100      	bne.n	8104600 <memcpy+0xc>
 81045fe:	bd10      	pop	{r4, pc}
 8104600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104608:	e7f7      	b.n	81045fa <memcpy+0x6>

0810460a <memset>:
 810460a:	4402      	add	r2, r0
 810460c:	4603      	mov	r3, r0
 810460e:	4293      	cmp	r3, r2
 8104610:	d100      	bne.n	8104614 <memset+0xa>
 8104612:	4770      	bx	lr
 8104614:	f803 1b01 	strb.w	r1, [r3], #1
 8104618:	e7f9      	b.n	810460e <memset+0x4>
	...

0810461c <_init>:
 810461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810461e:	bf00      	nop
 8104620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104622:	bc08      	pop	{r3}
 8104624:	469e      	mov	lr, r3
 8104626:	4770      	bx	lr

08104628 <_fini>:
 8104628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810462a:	bf00      	nop
 810462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810462e:	bc08      	pop	{r3}
 8104630:	469e      	mov	lr, r3
 8104632:	4770      	bx	lr
